const{entries:V}=Object,{fromEntries:et}=Object,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":150,\"nextId\":150,\"documentIds\":{\"0\":\"1\",\"1\":\"1@1\",\"2\":\"2\",\"3\":\"2#参考仓库地址\",\"4\":\"2#本站仓库地址\",\"5\":\"2#说明\",\"6\":\"2#鼠标点击特效\",\"7\":\"2#图标的使用\",\"8\":\"2#live2d的使用\",\"9\":\"2#搜索\",\"10\":\"2#音乐插件\",\"11\":\"2#感谢\",\"12\":\"3\",\"13\":\"3#个人留言\",\"14\":\"3#关于本站\",\"15\":\"3#关于建站\",\"16\":\"4\",\"17\":\"4@1\",\"18\":\"5\",\"19\":\"5#vscode-启动springboot项目\",\"20\":\"5#安装java插件\",\"21\":\"5#安装springboot插件\",\"22\":\"5#创建springboot项目\",\"23\":\"5#vscode-启动vue3项目\",\"24\":\"5#安装vue插件\",\"25\":\"5#创建vue3项目\",\"26\":\"5@0\",\"27\":\"6\",\"28\":\"6@1\",\"29\":\"7\",\"30\":\"7#小组作业的初衷\",\"31\":\"7#小组作业的弊端\",\"32\":\"7@0\",\"33\":\"7@1\",\"34\":\"8\",\"35\":\"8@1\",\"36\":\"9\",\"37\":\"9#安装axios\",\"38\":\"9#首先配置基础路径\",\"39\":\"9#拦截器\",\"40\":\"9#请求拦截器\",\"41\":\"9#响应拦截器\",\"42\":\"9#使用\",\"43\":\"9@0\",\"44\":\"9@1\",\"45\":\"10\",\"46\":\"10#问题\",\"47\":\"10#解决方案\",\"48\":\"10@0\",\"49\":\"10@1\",\"50\":\"11\",\"51\":\"11#安装\",\"52\":\"11#使用\",\"53\":\"11@0\",\"54\":\"11@1\",\"55\":\"12\",\"56\":\"12#安装\",\"57\":\"12#实现自定义图片上传\",\"58\":\"12@0\",\"59\":\"12@1\",\"60\":\"13\",\"61\":\"13#全局路由守卫\",\"62\":\"13#局部路由守卫\",\"63\":\"13@0\",\"64\":\"13@1\",\"65\":\"14\",\"66\":\"14@1\",\"67\":\"15\",\"68\":\"15#pojo\",\"69\":\"15#vo\",\"70\":\"15#dto\",\"71\":\"15#po\",\"72\":\"15#pojo、vo、dto、po的区别\",\"73\":\"15#个人理解\",\"74\":\"15#参考资料\",\"75\":\"15@0\",\"76\":\"15@1\",\"77\":\"16\",\"78\":\"16#mapstruct是什么\",\"79\":\"16#maven引入\",\"80\":\"16#使用\",\"81\":\"16#总结\",\"82\":\"16@0\",\"83\":\"16@1\",\"84\":\"17\",\"85\":\"17#代码实现\",\"86\":\"17#拦截器实现\",\"87\":\"17#总结\",\"88\":\"17@0\",\"89\":\"17@1\",\"90\":\"18\",\"91\":\"18#一对一查询\",\"92\":\"18#一对多查询\",\"93\":\"18#分类查询\",\"94\":\"18#总结\",\"95\":\"18@0\",\"96\":\"18@1\",\"97\":\"19\",\"98\":\"19#前言\",\"99\":\"19#样例\",\"100\":\"19#注意事项\",\"101\":\"19#总结\",\"102\":\"19@0\",\"103\":\"19@1\",\"104\":\"20\",\"105\":\"20#引入依赖\",\"106\":\"20#配置\",\"107\":\"20#使用\",\"108\":\"20#总结\",\"109\":\"20@0\",\"110\":\"20@1\",\"111\":\"21\",\"112\":\"21#继承关系的存储\",\"113\":\"21#聚合关系的存储\",\"114\":\"21@0\",\"115\":\"21@1\",\"116\":\"22\",\"117\":\"22#前言\",\"118\":\"22#解决方案\",\"119\":\"22@0\",\"120\":\"22@1\",\"121\":\"23\",\"122\":\"23#前言\",\"123\":\"23#解决方案\",\"124\":\"23@0\",\"125\":\"23@1\",\"126\":\"24\",\"127\":\"24#前言\",\"128\":\"24#解决方案\",\"129\":\"24@0\",\"130\":\"24@1\",\"131\":\"25\",\"132\":\"25#创建bucket\",\"133\":\"25#设置公开读写\",\"134\":\"25#引入依赖\",\"135\":\"25#配置\",\"136\":\"25#使用\",\"137\":\"25@0\",\"138\":\"25@1\",\"139\":\"26\",\"140\":\"26#背景\",\"141\":\"26#普通uuid的问题\",\"142\":\"26#雪花算法原理\",\"143\":\"26#雪花算法实现\",\"144\":\"26#使用示例\",\"145\":\"26#注意事项\",\"146\":\"26#总结\",\"147\":\"26@0\",\"148\":\"26@1\",\"149\":\"27\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[null,null,1],\"2\":[1],\"3\":[1,6],\"4\":[1,5],\"5\":[1],\"6\":[1,13],\"7\":[1,9],\"8\":[1,6],\"9\":[1,11],\"10\":[1,4],\"11\":[1,4],\"12\":[1],\"13\":[1,17],\"14\":[1,18],\"15\":[1,2],\"16\":[1,3],\"17\":[null,null,1],\"18\":[1],\"19\":[2,4],\"20\":[1,3],\"21\":[1,3],\"22\":[1,45],\"23\":[2,3],\"24\":[1,4],\"25\":[1,22],\"26\":[null,null,1],\"27\":[1,2],\"28\":[null,null,1],\"29\":[3],\"30\":[1,8],\"31\":[1,10],\"32\":[null,null,1],\"33\":[null,null,2],\"34\":[1,3],\"35\":[null,null,1],\"36\":[1],\"37\":[1,3],\"38\":[1,28],\"39\":[1],\"40\":[1,22],\"41\":[1,27],\"42\":[1,37],\"43\":[null,null,1],\"44\":[null,null,1],\"45\":[2],\"46\":[1,11],\"47\":[1,54],\"48\":[null,null,1],\"49\":[null,null,4],\"50\":[2,5],\"51\":[1,3],\"52\":[1,27],\"53\":[null,null,1],\"54\":[null,null,1],\"55\":[1],\"56\":[1,8],\"57\":[1,68],\"58\":[null,null,1],\"59\":[null,null,1],\"60\":[1],\"61\":[1,45],\"62\":[1,35],\"63\":[null,null,1],\"64\":[null,null,1],\"65\":[1,3],\"66\":[null,null,1],\"67\":[1,2],\"68\":[1,21],\"69\":[1,12],\"70\":[1,15],\"71\":[1,10],\"72\":[4,25],\"73\":[1,14],\"74\":[1,8],\"75\":[null,null,1],\"76\":[null,null,1],\"77\":[2,4],\"78\":[1,46],\"79\":[1,17],\"80\":[1,105],\"81\":[1,4],\"82\":[null,null,1],\"83\":[null,null,1],\"84\":[1,2],\"85\":[1,99],\"86\":[1,122],\"87\":[1,18],\"88\":[null,null,1],\"89\":[null,null,1],\"90\":[1],\"91\":[1,59],\"92\":[1,52],\"93\":[1,101],\"94\":[1,4],\"95\":[null,null,1],\"96\":[null,null,1],\"97\":[1],\"98\":[1,6],\"99\":[1,30],\"100\":[1,7],\"101\":[1,4],\"102\":[null,null,1],\"103\":[null,null,1],\"104\":[1],\"105\":[1,14],\"106\":[1,67],\"107\":[1,82],\"108\":[1,5],\"109\":[null,null,1],\"110\":[null,null,2],\"111\":[1],\"112\":[1,30],\"113\":[1,16],\"114\":[null,null,1],\"115\":[null,null,2],\"116\":[1],\"117\":[1,15],\"118\":[1,10],\"119\":[null,null,1],\"120\":[null,null,1],\"121\":[1],\"122\":[1,15],\"123\":[1,14],\"124\":[null,null,1],\"125\":[null,null,1],\"126\":[1],\"127\":[1,44],\"128\":[1,12],\"129\":[null,null,1],\"130\":[null,null,1],\"131\":[1],\"132\":[1,18],\"133\":[1,8],\"134\":[1,15],\"135\":[1,40],\"136\":[1,73],\"137\":[null,null,1],\"138\":[null,null,1],\"139\":[1],\"140\":[1,10],\"141\":[1,5],\"142\":[1,24],\"143\":[1,96],\"144\":[1,15],\"145\":[1,14],\"146\":[1,5],\"147\":[null,null,1],\"148\":[null,null,1],\"149\":[1,3]},\"averageFieldLength\":[1.0987451711742948,18.912230594278576,0.8156609897027434],\"storedFields\":{\"0\":{\"h\":\"关于\",\"t\":[\"相关信息\",\"关于我和关于本站\"]},\"1\":{\"c\":[\"目录\"]},\"2\":{\"h\":\"关于本站搭建\"},\"3\":{\"h\":\"参考仓库地址\",\"t\":[\"首先给出我参考的项目地址 github。 本站几乎全部参考这个项目（没办法太菜了bushi），感谢作者开源。\"]},\"4\":{\"h\":\"本站仓库地址\",\"t\":[\"然后给出本站的仓库地址 github。建议直接参照上面那个，我这个只是拙劣的模仿。\"]},\"5\":{\"h\":\"说明\"},\"6\":{\"h\":\"鼠标点击特效\",\"t\":[\"这个实现在 public/js/mouseEffect.js 文件中，使用jQuery实现。网上特别多，我就不赘述了。\",\"注意\",\"这个jQuery加载比较慢，如果鼠标点击没有特效，可以刷新一下。\"]},\"7\":{\"h\":\"图标的使用\",\"t\":[\"本站采用FontAwesome图标，图标使用方法请参考FontAwesome官网。 如果你是大牛，你可以直接在iconFont建立自己的图标，按照vuepress-theme-hope官网介绍，还是不建议直接使用iconFont。\"]},\"8\":{\"h\":\"live2D的使用\",\"t\":[\"本站使用的是Live2D插件，具体可以参照官网，我这里就不赘述了。另外附上资源网模型资源 (这个官网里面也有给出)。\"]},\"9\":{\"h\":\"搜索\",\"t\":[\"本站使用vuepress-plugin-search-pro插件，具体使用方法请参照官网。\",\"注意\",\"本站搜索功能可能存在一些问题，如果搜索不到，或者搜索框无法关闭 请尝试刷新页面。\"]},\"10\":{\"h\":\"音乐插件\",\"t\":[\"由于没有服务器，所以我把音乐存在本地。有服务器的可以参照原作者的写法。\"]},\"11\":{\"h\":\"感谢\",\"t\":[\"感谢作者 mo7cc开源，感谢开源社区。\"]},\"12\":{\"h\":\"关于我\"},\"13\":{\"h\":\"个人留言\",\"t\":[\"你好，我叫Carmen。欢迎访问我的个人网站。如你所见，我是一个正在努力前行的小牛马。我的目标是成为一名全栈工程师。什么？你问我为什么要走全栈？？因为全栈才符合牛马的气质啊！😎。\",\"注意\",\"开个玩笑，全栈十分辛苦，不建议入坑。我只是比较笨，所以只能走全栈。\"]},\"14\":{\"h\":\"关于本站\",\"t\":[\"可能看到我的网站的人觉得我是个衰鬼，因为我的网站取名还是太抽象了。但我想说，人生无常，大肠包小肠。未经他人苦，莫劝他人善。也许，我的网站就是我的“大肠”，而我的“小肠”就是我的生活。😎\",\"注意\",\"好吧。人还是要积极乐观的不是吗？\"]},\"15\":{\"h\":\"关于建站\",\"t\":[\"具体请参阅关于本站。\"]},\"16\":{\"h\":\"技术\",\"t\":[\"相关信息\",\"记录一些与编程相关的技巧与心得。\"]},\"17\":{\"c\":[\"目录\"]},\"18\":{\"h\":\"vscode一条龙服务\"},\"19\":{\"h\":\"vscode 启动SpringBoot项目\",\"t\":[\"默认已经安装了JDK，数据库，Maven\",\"没装的可以上网搜教程\"]},\"20\":{\"h\":\"安装Java插件\",\"t\":[\"vscode 插件搜索Java即可。\",\"Java插件\"]},\"21\":{\"h\":\"安装SpringBoot插件\",\"t\":[\"vscode 插件搜索Spring即可。\",\"Spring插件\"]},\"22\":{\"h\":\"创建SpringBoot项目\",\"t\":[\"按住 ctrl + shift + p，输入Java: Create Java Project\",\"Java: Create Java Project\",\"选择Spring Boot\",\"选择Spring Boot\",\"选择Maven\",\"选择Maven\",\"选择SpringBoot版本\",\"选择SpringBoot版本\",\"选择Java为开发语言\",\"选择Java为开发语言\",\"输入域名\",\"设置域名\",\"输入项目名称\",\"设置项目名称\",\"选择Jar为打包方式\",\"选择Jar为打包方式\",\"选择Java版本（根据你的情况选择）\",\"设置Java版本\",\"选择依赖（根据你的情况选择）\",\" 在application.properties中设置数据库连接信息\",\"没有配置数据库启动不了\",\"spring.application.name=demo spring.datasource.url=jdbc:mysql://localhost:3306/testdb1 spring.datasource.username=root spring.datasource.password=123456 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\",\"点击run启动项目\",\"启动项目\"]},\"23\":{\"h\":\"vscode 启动Vue3项目\",\"t\":[\"默认已经安装了Node.js\",\"没装的可以上网搜教程\"]},\"24\":{\"h\":\"安装Vue插件\",\"t\":[\"vscode 插件搜索Vue即可。\",\"alt text\"]},\"25\":{\"h\":\"创建Vue3项目\",\"t\":[\"按住ctrl + j打开命令行窗口 输入\",\"npm create vue@latest\",\"设置项目（这里是演示所以全选否）\",\"设置Vue项目\",\"输入以下命令\",\"cd xxx(你的目录) npm install npm run dev\",\"打开浏览器访问http://localhost:5173/\",\"成功启动Vue项目\"]},\"26\":{\"c\":[\"vscode\"]},\"27\":{\"h\":\"杂谈\",\"t\":[\"相关信息\",\"一些碎碎念\"]},\"28\":{\"c\":[\"目录\"]},\"29\":{\"h\":\"论小组作业为什么是“神”\"},\"30\":{\"h\":\"小组作业的初衷\",\"t\":[\"小组作业的初衷是为了让同学们在完成课程任务的同时，也能通过合作和交流来提高自己的技能和知识。通过小组作业，同学们可以互相学习、互相帮助，共同完成一个项目或任务，从而提高自己的团队协作能力和解决问题的能力。\"]},\"31\":{\"h\":\"小组作业的弊端\",\"t\":[\"都是摸鱼大神，怎么玩？？？ 😎。 ctm，别问，问就是摸鱼。 9个人，只有一个人在写，怎么玩？？\",\"所以说我就是牛马本马。😎。\"]},\"32\":{\"c\":[\"杂谈\"]},\"33\":{\"c\":[\"小组作业\",\"摸鱼\"]},\"34\":{\"h\":\"前端\",\"t\":[\"相关信息\",\"前端相关的。\"]},\"35\":{\"c\":[\"目录\"]},\"36\":{\"h\":\"axios的拦截器和请求器\"},\"37\":{\"h\":\"安装axios\",\"t\":[\"npm install axios\"]},\"38\":{\"h\":\"首先配置基础路径\",\"t\":[\"首先在vite.config.js中配置基础路径\",\"server: { proxy: { '/api': { target: 'http://localhost:8080/api', changeOrigin: true, rewrite: (path) => path.replace(/^\\\\/api/, ''), }, }, },\",\"然后使用axios.create创建一个axios实例\",\"import axios from 'axios' const service = axios.create({ baseURL: '/api', });\"]},\"39\":{\"h\":\"拦截器\"},\"40\":{\"h\":\"请求拦截器\",\"t\":[\"service.interceptors.request.use( config => { const accessToken = localStorage.getItem('accessToken'); if (accessToken) { config.headers['Authorization'] = `Bearer ${accessToken}`; } return config; }, error => Promise.reject(error) );\"]},\"41\":{\"h\":\"响应拦截器\",\"t\":[\"service.interceptors.response.use( response => { const res = response.data; if (res.code !== 200) { return Promise.reject(new Error(res.message || 'Error')); } else { return res; } }, error => { console.log('err' + error); return Promise.reject(error); } );\"]},\"42\":{\"h\":\"使用\",\"t\":[\"以用户登录为例\",\"async function login() { try { const response = await service.post('/login', { phone: user.value.phone, password: user.value.password, }); if (response.data.code == 0) { localStorage.setItem(\\\"accessToken\\\", response.data.data.tokens.accessToken); localStorage.setItem(\\\"refreshToken\\\", response.data.data.tokens.refreshToken); ElMessage.success(\\\"登录成功\\\"); return true; } ElMessage.error(response.data.msg); return false; } catch (error) { ElMessage.error(\\\"网络错误\\\"); console.error(error); return false; } }\"]},\"43\":{\"c\":[\"Vue\"]},\"44\":{\"c\":[\"axios\"]},\"45\":{\"h\":\"el-upload上传两次问题\"},\"46\":{\"h\":\"问题\",\"t\":[\"使用 el-upload 组件上传文件时，发现每次上传都会触发两次 before-upload 和 change 事件，导致上传两次。\"]},\"47\":{\"h\":\"解决方案\",\"t\":[\"<el-upload class=\\\"avatar-uploader\\\" action=\\\"/api/uploadimage\\\" :show-file-list=\\\"false\\\" :on-success=\\\"handleAvatarUpload\\\" :headers=\\\"uploadHeaders\\\"> <el-avatar v-if=\\\"avatar\\\" :src=\\\"avatar\\\" :size=\\\"100\\\" /> <i v-else class=\\\"el-icon-plus avatar-uploader-icon\\\"></i> </el-upload>\",\"const token = localStorage.getItem('accseeToken'); const refreshToken = localStorage.getItem('refreshToken'); const uploadHeaders = { \\\"Authorization\\\": `Bearer ${token}`, \\\"Refresh-Token\\\": refreshToken }; function handleAvatarUpload(response) { console.log(response); avatar.value = response.data; }\",\"这样在action的时候就会上传文件，在handleAvatarUpload的时候就不会再上传文件了。\"]},\"48\":{\"c\":[\"Vue\"]},\"49\":{\"c\":[\"element-plus\",\"el-upload\"]},\"50\":{\"h\":\"mitt 的使用\",\"t\":[\"在我开发的飞马旅游中为了让地图的主题跟随项目主题变化而变化， 特引入这个工具，用于监听主题变化，然后触发地图主题变化。\"]},\"51\":{\"h\":\"安装\",\"t\":[\"npm install mitt\"]},\"52\":{\"h\":\"使用\",\"t\":[\"先来一个工具类\",\"import mitt from 'mitt'; const emitter = mitt(); export default emitter;\",\"然后是事件发起\",\"import emitter from '@/util/eventBus.js'; emitter.emit(\\\"theme\\\", { message });\",\"最后是事件监听\",\"import emitter from '@/util/eventBus.js'; emitter.on(\\\"theme\\\", (data) => { console.log(data); }/* 这里可以写上你的回调函数 */);\",\"不需要的时候，记得取消监听\",\"emitter.off(\\\"theme\\\", (data) => { console.log(data); }/* 这里可以写上你的回调函数 */);\"]},\"53\":{\"c\":[\"Vue\"]},\"54\":{\"c\":[\"mitt\"]},\"55\":{\"h\":\"wangEditor自定义图片上传\"},\"56\":{\"h\":\"安装\",\"t\":[\"npm install @wangeditor/editor --save npm install @wangeditor/editor-for-vue@next --save\"]},\"57\":{\"h\":\"实现自定义图片上传\",\"t\":[\"首先是uploadImage方法，用于上传图片，并返回图片的url。\",\"async function uploadImage(file) { const formData = new FormData(); formData.append('file', file); const loadingInstance = ElLoading.service({ lock: true, text: '正在加载...', spinner: 'el-icon-loading', background: 'rgba(255, 255, 255, 0.4)' }); try { const res = await service.post('/uploadimage', formData); ElMessage.success('上传成功'); return res.data; } catch (error) { ElMessage.error('上传失败'); } finally { loadingInstance.close(); } }\",\"后端返回接口样例如下\",\"{ \\\"code\\\": 0, // 0表示成功，其他表示失败 \\\"msg\\\": \\\"图片上传成功\\\", \\\"data\\\": { \\\"url\\\": \\\"http://example.com/image.jpg\\\" } }\",\"然后是自定义的图片上传。\",\"const { uploadImage } = useImage(); // 配置上传图片 editorConfig.MENU_CONF['uploadImage'] = { async customUpload(file, insertFn) { const data = await uploadImage(file); console.log(\\\"editBlog: \\\", data.data); insertFn(data.data, data.data, data.data); } };\"]},\"58\":{\"c\":[\"Vue\"]},\"59\":{\"c\":[\"wangEditor自定义图片上传\"]},\"60\":{\"h\":\"路由守卫\"},\"61\":{\"h\":\"全局路由守卫\",\"t\":[\"在router/index.js中 配置\",\"这样防止没有token的用户进入保护区域\",\"这里是基于双token实现的\",\"router.beforeEach(async (to, from, next) => { const accessToken = localStorage.getItem('accessToken'); const refreshToken = localStorage.getItem('refreshToken'); const isAccessTokenValid = accessToken && !isTokenExpired(accessToken); const isRefreshTokenValid = refreshToken && refreshToken.length > 0; if (to.path !== '/login' && to.path !== '/register') { if (!isAccessTokenValid) { if (isRefreshTokenValid) { console.log('Access token expired, refreshing...'); try { await refreshAccessToken(); next(); } catch (error) { console.error('Error refreshing access token:', error); next('/login'); } } else { next('/login'); } } else { next(); } } else { next(); } });\"]},\"62\":{\"h\":\"局部路由守卫\",\"t\":[\"当我们在网站写入一些东西没有保存就想要刷新或者跳转的时候，浏览器会给出提示。\",\"以下给出实现\",\"首先是自定义回调函数，用于弹窗提示\",\"const beforeUnloadHandler = (event) => { if (!isEmpty.value) { event.preventDefault(); event.returnValue = '确定要离开当前页面吗？'; } };\",\"然后在挂载的时候添加监听\",\"onMounted(() => { window.addEventListener('beforeunload', beforeUnloadHandler); removeGlobalGuard = router.beforeEach((to, from, next) => { if (!isEmpty.value) { if (confirm('您还有未保存的内容，确定要离开当前页面吗？')) { next(); } else { next(false); } } else { next(); } }); });\",\"在卸载的时候移除监听\",\"onBeforeUnmount(() => { window.removeEventListener('beforeunload', beforeUnloadHandler); if (removeGlobalGuard) { removeGlobalGuard(); } });\"]},\"63\":{\"c\":[\"Vue\"]},\"64\":{\"c\":[\"路由守卫\"]},\"65\":{\"h\":\"后端\",\"t\":[\"相关信息\",\"后端相关的。\"]},\"66\":{\"c\":[\"目录\"]},\"67\":{\"h\":\"Java的多个o\",\"t\":[\"以下介绍常见的几个o。\"]},\"68\":{\"h\":\"pojo\",\"t\":[\"pojo是Plain Old Java Object的缩写，它是一个简单的Java对象，没有继承任何类，没有实现任何接口，没有使用任何注解，没有包含任何业务逻辑，没有包含任何数据库操作，没有包含任何网络通信，没有包含任何第三方库的依赖。\",\"其实大概意思就是只有data、constructor、getter、setter、toString、equals、hashCode这些方法，没有其他的方法。\"]},\"69\":{\"h\":\"vo\",\"t\":[\"vo是View Object的缩写，它是一个视图对象，用于表示一个视图层的数据。vo通常用于表示一个视图层的数据，例如一个网页的表单数据，或者一个网页的显示数据。vo通常用于作为视图层的参数和返回值。\",\"可以理解为Controller层返回的Resp对象，包含前端想要的数据，过滤掉前端不需要的数据。\"]},\"70\":{\"h\":\"dto\",\"t\":[\"dto是Data Transfer Object的缩写，它是一个数据传输对象，用于在不同的层之间传递数据。dto通常用于表示一个业务实体，或者用于表示一个数据库表中的一条记录。dto通常用于作为数据传输对象（DTO），或者用于作为业务逻辑层的参数和返回值。\",\"理解为dto为各层传输的对象（前端传后端的数据和后端传前端的数据，所以按照现在前后分离的思想来看，vo也可以认为是一种dto）。\"]},\"71\":{\"h\":\"po\",\"t\":[\"po是Persistent Object的缩写，它是一个持久化对象，用于表示一个数据库表中的一条记录。po通常用于表示一个数据库表中的一条记录。po通常用于作为数据传输对象（DTO），或者用于作为业务逻辑层的参数和返回值。\",\"理解为po中的字段和数据库中的字段一一对应。\"]},\"72\":{\"h\":\"pojo、vo、dto、po的区别\",\"t\":[\"pojo、vo、dto、po都是Java中常用的对象类型，它们之间的区别如下：\",\"pojo：Plain Old Java Object，普通Java对象 只有数据，和getter和setter。\",\"vo：View Object 显示层对象 专门为前端服务的对象，包含前端想要的数据，过滤掉前端不需要的数据。\",\"dto：Data Transfer Object，数据传输对象，用于在不同的层之间传递数据。\",\"po：Persistent Object，持久化对象，其中每个字段都和数据库中的属性一一对应\"]},\"73\":{\"h\":\"个人理解\",\"t\":[\"这么多个o（还有些没列出来），其实都是根据业务场景来划分的，没有固定的规则，所以大家可以根据自己的业务场景来划分。 个人写只用到vo(Resp), dto(Req), po(entity)。 应当注意的是这些o之间并不是固定的，他们之间可以相互转换。\"]},\"74\":{\"h\":\"参考资料\",\"t\":[\"概念POJO、DTO、DAO、PO、BO、VO、QO、ENTITY详解\"]},\"75\":{\"c\":[\"java\"]},\"76\":{\"c\":[\"java的各种o\"]},\"77\":{\"h\":\"Java类之间的转换-mapStruct的使用\",\"t\":[\"前面说到，在开发中我们会用到很多类。那么这些类之间应该如何做转换？\",\"下面介绍mapStruct\"]},\"78\":{\"h\":\"mapStruct是什么\",\"t\":[\"首先引用官网的原话:\",\"MapStruct is a code generator that greatly simplifies the implementation of mappings between Java bean types based on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe and easy to understand.\",\"大概意思是，mapStruct是一个代码生成器，它大大简化了基于约定优于配置的方法在Java bean类型之间进行映射的实现。生成的映射代码使用普通的方法调用，因此速度快、类型安全且易于理解。\"]},\"79\":{\"h\":\"maven引入\",\"t\":[\"maven坐标如下：\",\"<dependency> <groupId>org.mapstruct</groupId> <artifactId>mapstruct</artifactId> <version>1.5.5.Final</version> </dependency> <dependency> <groupId>org.mapstruct</groupId> <artifactId>mapstruct-processor</artifactId> <version>1.5.5.Final</version> <scope>provided</scope> </dependency>\"]},\"80\":{\"h\":\"使用\",\"t\":[\"假设有一个Blog的po\",\"定义如下\",\"@Schema(description = \\\"博客实体类\\\") @Data @AllArgsConstructor @NoArgsConstructor @Builder public class Blog { @Schema(description = \\\"主键id\\\") @JsonFormat(shape = JsonFormat.Shape.STRING) private Long id; @Schema(description = \\\"博客作者id\\\") @JsonFormat(shape = JsonFormat.Shape.STRING) private Long userId; @Schema(description = \\\"博客标题\\\") private String title; @Schema(description = \\\"博客描述\\\") private String description; @Schema(description = \\\"博客内容\\\") private String content; @Schema(description = \\\"博客创建时间戳\\\", defaultValue = \\\"创建博客时的时间戳\\\") @JsonFormat(timezone=\\\"GMT+8\\\") private Timestamp createAt; }\",\"还有一个BlogResp的vo\",\"定义如下\",\"@Schema(description = \\\"博客响应\\\") @Data @AllArgsConstructor @NoArgsConstructor @Builder public class BlogResp { @Schema(description = \\\"主键id\\\") @JsonFormat(shape = JsonFormat.Shape.STRING) private Long id; @Schema(description = \\\"发布博客的用户id\\\") @JsonFormat(shape = JsonFormat.Shape.STRING) private Long userId; @Schema(description = \\\"发布博客的用户昵称\\\") private String userName; @Schema(description = \\\"发布博客的用户头像\\\") private String userAvatar; @Schema(description = \\\"博客标题\\\") private String title; @Schema(description = \\\"博客描述\\\") private String description; @Schema(description = \\\"博客内容\\\") private String content; @Schema(description = \\\"博客创建时间戳\\\", defaultValue = \\\"创建博客时的时间戳\\\") @JsonFormat(timezone=\\\"GMT+8\\\") private Timestamp createAt; }\",\"可以看出多了两个属性，分别是userName和userAvatar，这两个属性需要从User表中获取。\",\"那么如何将Blog转换为BlogResp呢？\",\"我们只需要定义一个接口，用于定义转换规则。\",\"@Mapper(componentModel = \\\"spring\\\") public interface BlogConvertMapper { BlogConvertMapper INSTANCE = Mappers.getMapper(BlogConvertMapper.class); /** * 将博客实体类转换为博客响应类 * * @param blog 博客实体类 * @param userAvatar 用户头像 * @param userNickName 用户昵称 * @return 博客响应类 */ @Mappings({ @Mapping(target = \\\"userAvatar\\\", source = \\\"userAvatar\\\"), @Mapping(target = \\\"userName\\\", source = \\\"userNickName\\\") }) BlogResp toBlogResp(Blog blog, String userAvatar, String userNickName); }\",\"其中@Mapper注解用于标识这是一个mapStruct的映射接口，componentModel = \\\"spring\\\"表示这个接口是一个spring的bean。\",\"@Mappings注解用于定义映射规则，@Mapping注解用于定义具体的映射规则。\",\"然后我们就可以在代码中使用这个接口了。\",\"@Autowired private BlogConvertMapper blogConvertMapper; public BlogResp convertBlogToResp(Blog blog, String userAvatar, String userNickName) { return blogConvertMapper.toBlogResp(blog, userAvatar, userNickName); }\",\"如果没有componentModel = \\\"spring\\\"\",\"那么接口使用方式如下\",\"public BlogResp convertBlogToResp(Blog blog, String userAvatar, String userNickName) { return BlogConvertMapper.INSTANCE.toBlogResp(blog, userAvatar, userNickName); }\",\"其实加了componentModel = \\\"spring\\\"之后，在字节码里面会加上@Component，方便我们使用@Autowired\",\"以下为字节码\",\"@Component public class BlogConvertMapperImpl implements BlogConvertMapper { public BlogConvertMapperImpl() { } public BlogResp toBlogResp(Blog blog, String userAvatar, String userNickName) { if (blog == null && userAvatar == null && userNickName == null) { return null; } else { BlogResp.BlogRespBuilder blogResp = BlogResp.builder(); if (blog != null) { blogResp.content(blog.getContent()); blogResp.createAt(blog.getCreateAt()); blogResp.description(blog.getDescription()); blogResp.id(blog.getId()); blogResp.title(blog.getTitle()); blogResp.userId(blog.getUserId()); } blogResp.userAvatar(userAvatar); blogResp.userName(userNickName); return blogResp.build(); } } }\"]},\"81\":{\"h\":\"总结\",\"t\":[\"mapStruct是一个用于Java类之间的转换的工具，它可以自动生成转换代码，使得转换过程更加简单和高效。\"]},\"82\":{\"c\":[\"java\"]},\"83\":{\"c\":[\"mapStruct\"]},\"84\":{\"h\":\"JWT的粗略实现\",\"t\":[\"废话不多说，直接上代码\"]},\"85\":{\"h\":\"代码实现\",\"t\":[\"@Component public class JWTUtil { private static final String SECRET_KEY = \\\"abcdefghijklmnopqrstuvwxyz\\\"; private static final long EXPIRATION_TIME = 1000 * 60 * 15; // 15 minutes private static final long REFRESH_TIME = 1000 * 60 * 60 * 24 * 7; // 7 day /** * 生成token * @param key token中包含的信息(比如说用户的手机号) * @return token */ public static String generateToken(String key) { return Jwts.builder() .setSubject(key) .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME)) .signWith(SignatureAlgorithm.HS512, SECRET_KEY) .compact(); } /** * 生成refreshToken 时间更长 更不容易过期 * @param key token中包含的信息(比如说用户的手机号) * @return token */ public static String generateRefreshToken(String key) { return Jwts.builder() .setSubject(key) .setExpiration(new Date(System.currentTimeMillis() + REFRESH_TIME)) .signWith(SignatureAlgorithm.HS512, SECRET_KEY) .compact(); } /** * 解析token * @param token 需要解析的token * @return claims */ public static Claims extractClaims(String token) { try { return Jwts.parser() .setSigningKey(SECRET_KEY) .parseClaimsJws(token) .getBody(); } catch (JwtException e) { return null; // 过期的token直接返回null } } /** * 获取token中包含的信息 * @param token 需要解析的token * @return token中包含的信息 */ public static String extractKey(String token) { Claims claims = extractClaims(token); return claims != null ? claims.getSubject() : null; } /** * 判断token是否过期 * @param token 待验证的token * @return {@code true}表示过期 {@code false}表示未过期 */ public static boolean isTokenExpired(String token) { Claims claims = extractClaims(token); return (claims != null && claims.getExpiration().before(new Date())) || claims == null; } /** * 验证token合法性 * @param token 待验证的token * @param key 用户信息 * @return {@code true}表示合法 {@code false}表示不合法 */ public static boolean validateToken(String token, String key) { String extractedKey = extractKey(token); return extractedKey != null && extractedKey.equals(key) && !isTokenExpired(token); } }\",\"上述代码是一个简单的JWT工具类，其中包含了生成token、解析token、验证token等方法。需要注意的是，这里的SECRET_KEY是一个固定的字符串，实际应用中应该使用更安全的密钥。另外，这里的EXPIRATION_TIME和REFRESH_TIME也是固定的，实际应用中应该根据需求进行调整。\"]},\"86\":{\"h\":\"拦截器实现\",\"t\":[\"既然有了token，那么肯定要有拦截器\",\"拦截器定义如下（使用双token）\",\"注意\",\"建议对浏览器预检请求做处理\",\"@Component public class LoginInterceptor implements HandlerInterceptor { /** * 在请求处理之前进行拦截 */ @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { // **注意排除预检请求** if (\\\"OPTIONS\\\".equalsIgnoreCase(request.getMethod())) { response.setStatus(HttpServletResponse.SC_OK); return false; } String accessToken = request.getHeader(\\\"Authorization\\\"); String refreshToken = request.getHeader(\\\"Refresh-Token\\\"); boolean accessTokenValid = false; boolean refreshTokenValid = false; // 验证 Access Token if (accessToken != null && accessToken.startsWith(\\\"Bearer \\\")) { accessToken = accessToken.substring(7); accessTokenValid = !JWTUtil.isTokenExpired(accessToken); } // 验证 Refresh Token if (refreshToken != null && !refreshToken.isEmpty()) { refreshTokenValid = !JWTUtil.isTokenExpired(refreshToken); } // 如果 Access Token 有效，继续请求 if (accessTokenValid) { return true; } // 如果 Access Token 无效但 Refresh Token 有效，尝试刷新 Access Token if (!accessTokenValid && refreshTokenValid) { String key = JWTUtil.extractKey(refreshToken); // 从 refreshToken 中提取用户信息 String newAccessToken = JWTUtil.generateToken(key); // 生成新的 Access Token response.setHeader(\\\"New-Access-Token\\\", newAccessToken); return true; } // 两个 Token 都无效，返回401状态 response.setStatus(HttpServletResponse.SC_UNAUTHORIZED); response.getWriter().write(\\\"{\\\\\\\"code\\\\\\\": 1, \\\\\\\"message\\\\\\\": \\\\\\\"invalid token\\\\\\\", \\\\\\\"data\\\\\\\": null}\\\"); return false; } }\",\"然后是注册拦截器\",\"@Configuration public class WebConfig implements WebMvcConfigurer { @Autowired private LoginInterceptor loginInterceptor; /** * 添加拦截器 */ @Override public void addInterceptors(InterceptorRegistry registry) { // excludePathPatterns() 用于排除你不想要排除的路径 registry.addInterceptor(loginInterceptor) .excludePathPatterns( \\\"/api/login/**\\\", \\\"/api/register/**\\\", \\\"/api/refresh/**\\\", \\\"/doc.html\\\", \\\"/webjars/**\\\", \\\"/v3/api-docs/swagger-config\\\", \\\"/v3/api-docs/**\\\", \\\"/swagger-ui/index.html\\\", \\\"swagger-ui.html\\\" ); } /** * 静态资源映射 * */ @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { registry.addResourceHandler(\\\"doc.html\\\").addResourceLocations(\\\"classpath:/META-INF/resources/\\\"); registry.addResourceHandler(\\\"/favicon.ico\\\").addResourceLocations(\\\"classpath:/META-INF/resources/\\\"); registry.addResourceHandler(\\\"/webjars/**\\\").addResourceLocations(\\\"classpath:/META-INF/resources/webjars/\\\"); } }\",\"这样就大功告成了！！\"]},\"87\":{\"h\":\"总结\",\"t\":[\"通过上述步骤，我们实现了一个简单的 JWT 认证机制，并在 Spring Boot 项目中进行了集成。通过拦截器对请求进行拦截，验证 JWT 的有效性，并在需要时刷新 JWT。这样，我们就可以在项目中使用 JWT 来保护 API 的安全性了。\"]},\"88\":{\"c\":[\"java\"]},\"89\":{\"c\":[\"jwt\"]},\"90\":{\"h\":\"MyBatis复杂SQL查询\"},\"91\":{\"h\":\"一对一查询\",\"t\":[\"这里指的是一个对象中包含一个对象。\",\"这时候我们可以通过<association>标签来实现。\",\"举个例子\",\"一个路线项目包含一个地点，地点包含经纬度，地址等信息。\",\"ResultMap写法如下\",\"<!-- RouteItemMapper.xml --> <resultMap id=\\\"routeItemResultMap\\\" type=\\\"RouteItem\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"order\\\" column=\\\"order\\\" /> <association property=\\\"location\\\" column=\\\"loc_id\\\" select=\\\"com.stu.mapper.LocationMapper.findLocationById\\\" /> </resultMap> <!-- LocationMapper.xml --> <resultMap id=\\\"locationResultMap\\\" type=\\\"Location\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"longitude\\\" column=\\\"longitude\\\" /> <result property=\\\"latitude\\\" column=\\\"latitude\\\" /> <result property=\\\"address\\\" column=\\\"address\\\" /> </resultMap>\",\"查询的时候直接如下面写即可\",\"<select id=\\\"findRouteItemsByRouteId\\\" resultMap=\\\"routeItemResultMap\\\"> SELECT `id`, `loc_id`, `order` FROM `route_item` WHERE `route_id` = #{routeId} ORDER BY `order` </select>\",\"这时候会根据loc_id来查询Location对象，并且赋值给RouteItem对象的location属性。\"]},\"92\":{\"h\":\"一对多查询\",\"t\":[\"这里指的是一个对象中包含多个对象。\",\"这时候我们可以通过<collection>标签来实现。\",\"举个例子\",\"一个路线列表包含多个路线项目\",\"ResultMap写法如下\",\"<!-- RouteListMapper.xml --> <resultMap id=\\\"routeResultMap\\\" type=\\\"Route\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"name\\\" column=\\\"name\\\" /> <collection property=\\\"routeItems\\\" column=\\\"id\\\" select=\\\"com.stu.mapper.RouteItemMapper.findRouteItemsByRouteId\\\" /> </resultMap> <!-- RouteItemMapper.xml --> <resultMap id=\\\"routeItemResultMap\\\" type=\\\"RouteItem\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"order\\\" column=\\\"order\\\" /> <association property=\\\"location\\\" column=\\\"loc_id\\\" select=\\\"com.stu.mapper.LocationMapper.findLocationById\\\" /> </resultMap>\",\"查询的时候直接如下面写即可\",\"<select id=\\\"findRouteListById\\\" resultMap=\\\"routeResultMap\\\"> SELECT `id`, `name` FROM `route` WHERE `id` = #{id} </select>\",\"这时候会根据id来查询RouteItem对象，并且赋值给Route对象的routeItems属性。\"]},\"93\":{\"h\":\"分类查询\",\"t\":[\"假设我们有一个父类，几个子类，现在我们要查询父类，并且查询出其子类。\",\"（我这里父类和子类的表是分开的 参见从面向对象到数据库存储）\",\"这时候我们可以通过<discriminator>标签来实现。\",\"假设一个Item类派生出Spot, Hotel, Restaurant\",\"Item表中存储了一个type字段，用来区分是哪个子类。\",\"ResultMap写法如下\",\"<!-- ItemMapper.xml --> <resultMap id=\\\"itemResultMap\\\" type=\\\"Item\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"name\\\" column=\\\"name\\\" /> <result property=\\\"description\\\" column=\\\"desc\\\" /> <result property=\\\"itemType\\\" column=\\\"type\\\" /> <discriminator javaType=\\\"String\\\" column=\\\"type\\\"> <case value=\\\"SPOT\\\" resultMap=\\\"com.stu.mapper.SpotMapper.spotResultMap\\\" /> <case value=\\\"HOTEL\\\" resultMap=\\\"com.stu.mapper.HotelMapper.hotelResultMap\\\" /> <case value=\\\"RESTAURANT\\\" resultMap=\\\"com.stu.mapper.RestaurantMapper.restaurantResultMap\\\" /> </discriminator> </resultMap> <!-- SpotMapper.xml --> <!-- 这里的spotResultMap继承了itemResultMap --> <resultMap id=\\\"spotResultMap\\\" type=\\\"Spot\\\" extends=\\\"com.stu.mapper.ItemMapper.itemResultMap\\\"> <result property=\\\"avgLevel\\\" column=\\\"avg_level\\\" /> <result property=\\\"starNumber\\\" column=\\\"star_number\\\" /> </resultMap>\",\"查询写法如下\",\"<select id=\\\"findItemById\\\" resultMap=\\\"itemResultMap\\\"> SELECT `filtered_item`.`id`, `filtered_item`.`name`, `filtered_item`.`desc`, `filtered_item`.`type`, `filtered_item`.`loc_id`, CASE WHEN `filtered_item`.`type` = 'SPOT' THEN `spot`.`avg_level` WHEN `filtered_item`.`type` = 'HOTEL' THEN `hotel`.`avg_level` WHEN `filtered_item`.`type` = 'RESTAURANT' THEN `restaurant`.`avg_level` ELSE NULL END AS `avg_level`, CASE WHEN `filtered_item`.`type` = 'SPOT' THEN `spot`.`star_number` WHEN `filtered_item`.`type` = 'HOTEL' THEN `hotel`.`star_number` WHEN `filtered_item`.`type` = 'RESTAURANT' THEN `restaurant`.`star_number` ELSE NULL END AS `star_number`, `hotel`.`avg_price` AS `hotel_avg_price`, `restaurant`.`avg_price` AS `restaurant_avg_price`, `restaurant`.`type` AS `restaurant_type`, `restaurant`.`recommend` AS `restaurant_recommend` FROM ( SELECT `item`.`id`, `item`.`name`, `item`.`desc`, `item`.`type`, `item`.`loc_id` FROM `item` WHERE `item`.`id` = #{id} ) AS `filtered_item` LEFT JOIN `spot` ON `filtered_item`.`id` = `spot`.`id` LEFT JOIN `hotel` ON `filtered_item`.`id` = `hotel`.`id` LEFT JOIN `restaurant` ON `filtered_item`.`id` = `restaurant`.`id`; </select>\"]},\"94\":{\"h\":\"总结\",\"t\":[\"MyBatis的复杂查询主要通过<resultMap>标签来实现，通过<association>和<collection>标签来关联对象，通过<discriminator>标签来实现分类查询。\"]},\"95\":{\"c\":[\"MyBatis\"]},\"96\":{\"c\":[\"复杂SQL查询\"]},\"97\":{\"h\":\"MyBatis字段类型不匹配解决\"},\"98\":{\"h\":\"前言\",\"t\":[\"在开发过程中，我们经常会遇到数据库字段类型与Java实体类属性类型不匹配的问题。\",\"这时，我们需要在MyBatis的xml文件设置resultMap，将数据库字段类型与Java实体类属性类型进行映射。\"]},\"99\":{\"h\":\"样例\",\"t\":[\"<resultMap id=\\\"userResultMap\\\" type=\\\"User\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"phone\\\" column=\\\"phone\\\" /> <result property=\\\"password\\\" column=\\\"pwd\\\" /> <result property=\\\"gender\\\" column=\\\"gender\\\" /> <result property=\\\"nickName\\\" column=\\\"nickName\\\" /> <result property=\\\"birthday\\\" column=\\\"birthday\\\" /> <result property=\\\"avatar\\\" column=\\\"avatar\\\" /> </resultMap>\",\"然后就可以在select语句中使用resultMap属性了。\",\"<select id=\\\"getUserById\\\" resultMap=\\\"userResultMap\\\"> SELECT * FROM user WHERE id = #{id} </select>\"]},\"100\":{\"h\":\"注意事项\",\"t\":[\"resultMap的id属性必须与select语句的resultMap一致。\",\"type属性必须与Java实体类的全限定名一致。（建议加上包名）\",\"id标签的property属性必须与Java实体类的属性名一致，column属性必须与数据库字段名一致。\",\"result标签的property属性必须与Java实体类的属性名一致，column属性必须与数据库字段名一致。\"]},\"101\":{\"h\":\"总结\",\"t\":[\"通过设置resultMap，我们可以将数据库字段类型与Java实体类属性类型进行映射，解决字段类型不匹配的问题。\"]},\"102\":{\"c\":[\"MyBatis\"]},\"103\":{\"c\":[\"MyBatis的字段匹配问题\"]},\"104\":{\"h\":\"springCache结合redis\"},\"105\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-cache</artifactId> </dependency>\"]},\"106\":{\"h\":\"配置\",\"t\":[\"spring: data: redis: port: 6379 database: 0 connect-timeout: 5s timeout: 5s cache: type: redis redis: time-to-live: 3600000 cache-null-values: false\",\"@Configuration public class CacheConfig { // 客制化cacheManager @Bean public CacheManager cacheManager(RedisConnectionFactory connectionFactory) { RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig() // .entryTtl(Duration.ofMinutes(10)) .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(StringRedisSerializer.UTF_8)) .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer())); return RedisCacheManager.builder(connectionFactory) .cacheDefaults(config) .transactionAware() .build(); } // 客制化redisTemplate，使用jackon序列化 @Bean public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) { GenericJackson2JsonRedisSerializer genericJackson2JsonRedisSerializer = new GenericJackson2JsonRedisSerializer(); RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>(); redisTemplate.setKeySerializer(StringRedisSerializer.UTF_8); redisTemplate.setValueSerializer(genericJackson2JsonRedisSerializer); redisTemplate.setHashKeySerializer(StringRedisSerializer.UTF_8); redisTemplate.setHashValueSerializer(genericJackson2JsonRedisSerializer); redisTemplate.setConnectionFactory(redisConnectionFactory); return redisTemplate; } }\"]},\"107\":{\"h\":\"使用\",\"t\":[\"接下来我们就可以愉快的使用装饰器来进行缓存了\",\"@Cacheable(value = \\\"user\\\", key = \\\"#id\\\") public User getUserById(Long id) { return userMapper.selectById(id); } @CachePut(value = \\\"user\\\", key = \\\"#user.id\\\") public User updateUser(User user) { userMapper.updateById(user); return user; } @CacheEvict(value = \\\"user\\\", key = \\\"#id\\\") public void deleteUser(Long id) { userMapper.deleteById(id); }\",\"如果你想编程式缓存，可以使用CacheManager来获取Cache，然后使用Cache的方法。\",\"代码如下\",\"先来一个接口\",\"public interface ICacheService<E> { /** * 缓存数据 * 键值为ID * @param val 需要缓存的数据 */ @Async(\\\"AsyncExecutor\\\") void cache(E val); /** * 根据ID获取缓存数据 * @param id 数据ID * @return 缓存数据 */ E get(Long id); @EventListener @Async(\\\"AsyncExecutor\\\") void clearCache(UpdateEvent event); }\",\"然后具体实现一下\",\"@Service public class UserCacheService implements ICacheService<User> { @Autowired private CacheManager cacheManager; @Override public void cache(User user) { Cache cache = cacheManager.getCache(\\\"user\\\"); String key = \\\"userId#\\\" + user.getId(); cache.put(key, user); } @Override public User get(Long id) { Cache cache = cacheManager.getCache(\\\"user\\\"); String key = \\\"userId#\\\" + id; return cache.get(key, User.class); } @Override public void clearCache(UpdateEvent event) { Cache cache = cacheManager.getCache(\\\"user\\\"); cache.clear(); } }\",\"使用如下\",\"@Autowired private UserMapper userMapper; @Autowired private ICacheService<User> userCacheService; public List<User> findAllUsers() { List<Long> ids = userMapper.findAllIds(); List<User> users = new ArrayList<>(); for (Long id : ids) { User user = userCacheService.get(id); if (user != null) { users.add(user); } else { user = userMapper.findUserById(id); userCacheService.cache(user); users.add(user); } } return users; }\",\"这样当我们使用像selectAll这样的方法的时候可以逐条缓存起来。\"]},\"108\":{\"h\":\"总结\",\"t\":[\"通过springCache可以更优雅地实现缓存功能。如果只是简单地缓存实现，那么直接用装饰器就行。即使复杂的功能也不会有太多的代码。\"]},\"109\":{\"c\":[\"java\"]},\"110\":{\"c\":[\"springCache\",\"redis\"]},\"111\":{\"h\":\"从面向对象到数据库存储\"},\"112\":{\"h\":\"继承关系的存储\",\"t\":[\"对于继承关系，我们一般有两种存储方式：\",\"合并存储：将所有子类和父类的字段都存储在一张表中，不同子类建立不同表。\",\"比如，B、C继承A。那么 B建立一张表，C建立一张表。B表和C表都存储A表的数据。 然后B表存储自己独特的字段，C表存储自己独特的字段。\",\"这样做的好处是，查询方便，不用做表关联，插入删除也方便。\",\"分开存储：将父类和子类分别存储在不同的表中，子表通过外键关联父表。\",\"比如，B、C继承A。那么三个类分成三个表，每张表存储自己独特的字段。然后B表和C表通过外键关联A表。 这样做查询时需要建立表的链接，比较费时，而且插入删除时需要多表操作比较麻烦。 但是假如一般类也可以生成对象，那么这种方法比较合适。\"]},\"113\":{\"h\":\"聚合关系的存储\",\"t\":[\"对于聚合关系，我们有以下集中存储方式：\",\"一对一关系：可以存成两张表，通过外键关联。但更多的是存成一张表，这样减少开销\",\"一对多关系：一般存成两张表，通过外键关联。当然也可以化简成一张表（往多端靠拢）。\",\"多对多关系：一般存成三张表，通过外键关联。或者耍流氓存向量或者json，但是这样就违背了关系型数据库的设计理念。\"]},\"114\":{\"c\":[\"数据库\"]},\"115\":{\"c\":[\"数据库设计\",\"面向对象\"]},\"116\":{\"h\":\"关于Java读取数据库的时区问题\"},\"117\":{\"h\":\"前言\",\"t\":[\"我的MySQL是通过压缩包安装的，也配置了my.ini文件\",\"配置如下\",\"default-time_zone='+8:00'\",\"可以看到我配置了时区，然后我在数据库中访问时间戳也是正常的，但是当我通过Java访问数据库的时候，时间戳并没有加8个小时，而是显示的是0时区的时间。\"]},\"118\":{\"h\":\"解决方案\",\"t\":[\"@JsonFormat(timezone=\\\"GMT+8\\\") private Timestamp createAt;\",\"在实体类中，将时间戳字段加上这个注解，就可以解决时区问题。\"]},\"119\":{\"c\":[\"数据库\"]},\"120\":{\"c\":[\"时区问题\"]},\"121\":{\"h\":\"关于Long传入前端精度缺失的解决方案\"},\"122\":{\"h\":\"前言\",\"t\":[\"在Java中，Long类型是64位有符号整数，最大值为9223372036854775807，最小值为-9223372036854775808。而在JavaScript中，Number类型是64位双精度浮点数，最大值为1.7976931348623157e+308，最小值为5e-324。因此，当Java中的Long类型值超过JavaScript中的Number类型范围时，就会出现精度缺失的问题。\"]},\"123\":{\"h\":\"解决方案\",\"t\":[\"直接上代码\",\"@JsonFormat(shape = JsonFormat.Shape.STRING) private Long id;\",\"使用@JsonFormat注解，将Long类型转换为字符串类型，这样就可以避免精度缺失的问题了。\"]},\"124\":{\"c\":[\"java\"]},\"125\":{\"c\":[\"Long精度缺失\"]},\"126\":{\"h\":\"获取Bean的那些事\"},\"127\":{\"h\":\"前言\",\"t\":[\"有一个类获取Bean\",\"@Component public class ServiceFactory { @Autowired private ApplicationContext applicationContext; /** * 根据服务类型获取服务实例 * * @param <T> 服务类型 * @param serviceClass 服务类名 * @return 服务实例 */ public <T> T getService(Class<T> serviceClass) { return applicationContext.getBean(serviceClass); } /** * 根据服务名称获取服务实例 * * @param <T> 服务类型 * @param serviceName 服务名称 * @return 服务实例 */ public <T> T getService(String serviceName) { return (T) applicationContext.getBean(serviceName); } }\",\"使用如下\",\"@Autowired private ServiceFactory serviceFactory; BlogService blogService = serviceFactory.getService(BlogService.class);\",\"然后突然发现有些时候无法获取某个Bean，报错如下\",\"org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'xxxxx' available\"]},\"128\":{\"h\":\"解决方案\",\"t\":[\"我去检查了一下发现这个Bean确实存在，但是他的方法上加了@Async导致了无法获取，于是我去查了一下资料，发现@Async会导致Bean被代理，而代理Bean和原始Bean是不一样的，所以无法获取。\",\"所以我的解决方案是通过Bean的名称获取Bean，而不是通过类型获取Bean，这样就可以获取到代理Bean了。\"]},\"129\":{\"c\":[\"java\"]},\"130\":{\"c\":[\"Bean\"]},\"131\":{\"h\":\"阿里云oss的使用\"},\"132\":{\"h\":\"创建bucket\",\"t\":[\"首先创建一个阿里账号，然后购买oss服务，这里使用的是新人免费（具体几个月忘记了）。\",\"首先应该生成一个AccessKey\",\"警告\",\"必须在创建完AccessKey后就赶紧保存你的Id和Secret\",\"过了你就查不到了\",\"AccessKey界面\",\"接下来创建bucket\",\"oss1\",\"这里配置你的bucket\",\"主要是存储类型和存储冗余类型。\",\"我设置为低频访问和本地冗余\",\"注\",\"公开读写得创建完了才能设置\",\"alt text\"]},\"133\":{\"h\":\"设置公开读写\",\"t\":[\"在边栏权限访问处，读写权限设置公开读写\",\"注\",\"不设置公开读写，你访问的url是有时间限制的，超过时间就无法访问\",\"alt text\"]},\"134\":{\"h\":\"引入依赖\",\"t\":[\"maven坐标如下\",\"<dependency> <groupId>com.aliyun.oss</groupId> <artifactId>aliyun-sdk-oss</artifactId> <version>3.1.0</version> </dependency>\"]},\"135\":{\"h\":\"配置\",\"t\":[\"aliyun: oss: end-point: #你的end-point 可以在概览中查到 access-key-id: # 上面提到的AccessKey access-key-secret: # 上面提到的AccessSecret bucket-name: # 你的bucketName\",\"如果你需要设置上传的文件大小，可以添加以下配置\",\"spring: servlet: multipart: max-file-size: 100MB max-request-size: 100MB\",\"@ConfigurationProperties(prefix = \\\"aliyun.oss\\\") @Configuration @Data public class OSSConfig { private String endPoint; private String accessKeyId; private String accessKeySecret; private String bucketName; }\"]},\"136\":{\"h\":\"使用\",\"t\":[\"@Service public class ImageService { @Autowired private OSSConfig ossConfig; public String uploadImage(MultipartFile multipartFile) throws IOException { String endpoint = ossConfig.getEndPoint(); String accessKeyId = ossConfig.getAccessKeyId(); String accessKeySecret = ossConfig.getAccessKeySecret(); String bucketName = ossConfig.getBucketName(); OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret); // 这里是为了按照日期分文件管理 SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyyMMdd\\\"); String fileName = multipartFile.getOriginalFilename(); String suffixName = fileName.substring(fileName.lastIndexOf(\\\".\\\")); String finalFileName = System.currentTimeMillis() + \\\"\\\" + new SecureRandom().nextInt(0x0400) + suffixName; String objectName = sdf.format(new Date()) + \\\"/\\\" + finalFileName; ObjectMetadata objectMetadata = new ObjectMetadata(); objectMetadata.setContentType(\\\"image/jpg\\\"); // 文件上传 ossClient.putObject(bucketName, objectName, new ByteArrayInputStream(multipartFile.getBytes()), objectMetadata); // 这里是设置过期时间，公开读写可忽略这部分。 // 注意最大设置为7天 // Date expiration = new Date(System.currentTimeMillis() + 7 * 24 * 60 * 60 * 1000); // String url = ossClient.generatePresignedUrl(bucketName, objectName, expiration).toString(); // 设置公开读后，这串url可以直接访问图片 String url = \\\"https://\\\" + bucketName + \\\".\\\" + ossConfig.getEndPoint() + \\\"/\\\" + objectName; ossClient.shutdown(); return url; } }\"]},\"137\":{\"c\":[\"java\"]},\"138\":{\"c\":[\"oss\"]},\"139\":{\"h\":\"雪花算法简介\"},\"140\":{\"h\":\"背景\",\"t\":[\"在分布式系统中，需要生成全局唯一的ID，比如订单号、用户ID等。雪花算法（Snowflake Algorithm）是由Twitter开发的一种用于生成唯一ID的算法，它能够保证在分布式环境下生成的ID是唯一的。\"]},\"141\":{\"h\":\"普通uuid的问题\",\"t\":[\"主要问题在于uuid是无序的，比如在MySQL中查询，因为使用了B+树，uuid的无序性会导致查询效率低下。\"]},\"142\":{\"h\":\"雪花算法原理\",\"t\":[\"雪花算法生成的是一个64位的整数，由以下几部分组成：\",\"符号位：1位，固定为0，表示正数。（因为ID是正数，所以符号位固定为0）\",\"时间戳：41位，表示当前时间相对于某个起始时间的毫秒数。41位可以表示69年的时间。\",\"数据中心ID：5位，表示数据中心ID。最多可以表示32个数据中心。\",\"机器ID：5位，表示机器ID。最多可以表示32台机器。\",\"序列号：12位，表示同一毫秒内生成的多个ID。12位可以表示4096个不同的序列号。\"]},\"143\":{\"h\":\"雪花算法实现\",\"t\":[\"下面是一个简单的Java实现：\",\"@Component public class SnowFlake { /** * 起始的时间戳 */ private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00 /** * 每一部分占用的位数 */ private final static long SEQUENCE_BIT = 12; //序列号占用的位数 private final static long MACHINE_BIT = 5; //机器标识占用的位数 private final static long DATACENTER_BIT = 5;//数据中心占用的位数 /** * 每一部分的最大值 */ private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT); private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT); private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT); /** * 每一部分向左的位移 */ private final static long MACHINE_LEFT = SEQUENCE_BIT; private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT; private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT; private long datacenterId = 1; //数据中心 private long machineId = 1; //机器标识 private long sequence = 0L; //序列号 private long lastStmp = -1L;//上一次时间戳 public SnowFlake() { } public SnowFlake(long datacenterId, long machineId) { if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) { throw new IllegalArgumentException(\\\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\\\"); } if (machineId > MAX_MACHINE_NUM || machineId < 0) { throw new IllegalArgumentException(\\\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\\\"); } this.datacenterId = datacenterId; this.machineId = machineId; } /** * 产生下一个ID * * @return */ public synchronized long nextId() { long currStmp = getNewstmp(); if (currStmp < lastStmp) { throw new RuntimeException(\\\"Clock moved backwards. Refusing to generate id\\\"); } if (currStmp == lastStmp) { //相同毫秒内，序列号自增 sequence = (sequence + 1) & MAX_SEQUENCE; //同一毫秒的序列数已经达到最大 if (sequence == 0L) { currStmp = getNextMill(); } } else { //不同毫秒内，序列号置为0 sequence = 0L; } lastStmp = currStmp; return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分 | datacenterId << DATACENTER_LEFT //数据中心部分 | machineId << MACHINE_LEFT //机器标识部分 | sequence; //序列号部分 } private long getNextMill() { long mill = getNewstmp(); while (mill <= lastStmp) { mill = getNewstmp(); } return mill; } private long getNewstmp() { return System.currentTimeMillis(); } }\"]},\"144\":{\"h\":\"使用示例\",\"t\":[\"@Autowired private SnowFlake snowFlake; public void generateId() { long id = snowFlake.nextId(); System.out.println(id); }\"]},\"145\":{\"h\":\"注意事项\",\"t\":[\"时间回拨：如果系统时间回拨，可能会导致生成的ID重复。为了避免这种情况，可以在代码中添加时间回拨的处理逻辑。\",\"数据中心和机器ID的分配：在分布式环境下，需要为每个数据中心和机器分配一个唯一的ID，以确保生成的ID是全局唯一的。\",\"序列号的分配：在同一毫秒内，生成的多个ID需要使用序列号进行区分，以确保生成的ID是唯一的。\"]},\"146\":{\"h\":\"总结\",\"t\":[\"雪花算法是一种简单而有效的生成全局唯一ID的算法，它能够保证在分布式环境下生成的ID是唯一的。通过调整数据中心ID和机器ID的位数，可以支持更多的数据中心和机器。\"]},\"147\":{\"c\":[\"数据库\"]},\"148\":{\"c\":[\"雪花算法\"]},\"149\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"为了避免这种情况\",{\"1\":{\"145\":1}}],[\"|\",{\"1\":{\"143\":3}}],[\"||\",{\"1\":{\"41\":1,\"85\":1,\"143\":2}}],[\"同一毫秒的序列数已经达到最大\",{\"1\":{\"143\":1}}],[\"同学们可以互相学习\",{\"1\":{\"30\":1}}],[\"相同毫秒内\",{\"1\":{\"143\":1}}],[\"相关信息\",{\"1\":{\"0\":1,\"16\":1,\"27\":1,\"34\":1,\"65\":1}}],[\"产生下一个id\",{\"1\":{\"143\":1}}],[\"机器标识部分\",{\"1\":{\"143\":1}}],[\"机器标识\",{\"1\":{\"143\":1}}],[\"机器标识占用的位数\",{\"1\":{\"143\":1}}],[\"机器id\",{\"1\":{\"142\":1}}],[\"每一部分向左的位移\",{\"1\":{\"143\":1}}],[\"每一部分的最大值\",{\"1\":{\"143\":1}}],[\"每一部分占用的位数\",{\"1\":{\"143\":1}}],[\"每张表存储自己独特的字段\",{\"1\":{\"112\":1}}],[\"起始的时间戳\",{\"1\":{\"143\":1}}],[\"下面是一个简单的java实现\",{\"1\":{\"143\":1}}],[\"下面介绍mapstruct\",{\"1\":{\"77\":1}}],[\"序列号的分配\",{\"1\":{\"145\":1}}],[\"序列号部分\",{\"1\":{\"143\":1}}],[\"序列号置为0\",{\"1\":{\"143\":1}}],[\"序列号自增\",{\"1\":{\"143\":1}}],[\"序列号占用的位数\",{\"1\":{\"143\":1}}],[\"序列号\",{\"1\":{\"142\":1,\"143\":1}}],[\"固定为0\",{\"1\":{\"142\":1}}],[\"符号位\",{\"1\":{\"142\":1}}],[\"由以下几部分组成\",{\"1\":{\"142\":1}}],[\"由于没有服务器\",{\"1\":{\"10\":1}}],[\"普通uuid的问题\",{\"0\":{\"141\":1}}],[\"普通java对象\",{\"1\":{\"72\":1}}],[\"是由twitter开发的一种用于生成唯一id的算法\",{\"1\":{\"140\":1}}],[\"雪花算法是一种简单而有效的生成全局唯一id的算法\",{\"1\":{\"146\":1}}],[\"雪花算法实现\",{\"0\":{\"143\":1}}],[\"雪花算法生成的是一个64位的整数\",{\"1\":{\"142\":1}}],[\"雪花算法原理\",{\"0\":{\"142\":1}}],[\"雪花算法\",{\"1\":{\"140\":1},\"2\":{\"148\":1}}],[\"雪花算法简介\",{\"0\":{\"139\":1}}],[\"背景\",{\"0\":{\"140\":1}}],[\"公开读写可忽略这部分\",{\"1\":{\"136\":1}}],[\"公开读写得创建完了才能设置\",{\"1\":{\"132\":1}}],[\"文件上传\",{\"1\":{\"136\":1}}],[\"文件中\",{\"1\":{\"6\":1}}],[\"yyyymmdd\",{\"1\":{\"136\":1}}],[\"超过时间就无法访问\",{\"1\":{\"133\":1}}],[\"读写权限设置公开读写\",{\"1\":{\"133\":1}}],[\"注\",{\"1\":{\"132\":1,\"133\":1}}],[\"注意最大设置为7天\",{\"1\":{\"136\":1}}],[\"注意事项\",{\"0\":{\"100\":1,\"145\":1}}],[\"注意排除预检请求\",{\"1\":{\"86\":1}}],[\"注意\",{\"1\":{\"6\":1,\"9\":1,\"13\":1,\"14\":1,\"86\":1}}],[\"主要问题在于uuid是无序的\",{\"1\":{\"141\":1}}],[\"主要是存储类型和存储冗余类型\",{\"1\":{\"132\":1}}],[\"主键id\",{\"1\":{\"80\":2}}],[\"接下来创建bucket\",{\"1\":{\"132\":1}}],[\"接下来我们就可以愉快的使用装饰器来进行缓存了\",{\"1\":{\"107\":1}}],[\"必须在创建完accesskey后就赶紧保存你的id和secret\",{\"1\":{\"132\":1}}],[\"警告\",{\"1\":{\"132\":1}}],[\"阿里云oss的使用\",{\"0\":{\"131\":1}}],[\"于是我去查了一下资料\",{\"1\":{\"128\":1}}],[\"qualifying\",{\"1\":{\"127\":1}}],[\"qo\",{\"1\":{\"74\":1}}],[\"报错如下\",{\"1\":{\"127\":1}}],[\"服务名称\",{\"1\":{\"127\":1}}],[\"服务实例\",{\"1\":{\"127\":2}}],[\"服务类名\",{\"1\":{\"127\":1}}],[\"服务类型\",{\"1\":{\"127\":2}}],[\"获取bean的那些事\",{\"0\":{\"126\":1}}],[\"获取token中包含的信息\",{\"1\":{\"85\":1}}],[\"9223372036854775808\",{\"1\":{\"122\":1}}],[\"9个人\",{\"1\":{\"31\":1}}],[\"最多可以表示32台机器\",{\"1\":{\"142\":1}}],[\"最多可以表示32个数据中心\",{\"1\":{\"142\":1}}],[\"最大值为1\",{\"1\":{\"122\":1}}],[\"最大值为9223372036854775807\",{\"1\":{\"122\":1}}],[\"最小值为5e\",{\"1\":{\"122\":1}}],[\"最小值为\",{\"1\":{\"122\":1}}],[\"最后是事件监听\",{\"1\":{\"52\":1}}],[\"时区问题\",{\"2\":{\"120\":1}}],[\"时间回拨\",{\"1\":{\"145\":1}}],[\"时间戳部分\",{\"1\":{\"143\":1}}],[\"时间戳\",{\"1\":{\"142\":1}}],[\"时间戳并没有加8个小时\",{\"1\":{\"117\":1}}],[\"时间更长\",{\"1\":{\"85\":1}}],[\"就会出现精度缺失的问题\",{\"1\":{\"122\":1}}],[\"就可以解决时区问题\",{\"1\":{\"118\":1}}],[\"就是我的生活\",{\"1\":{\"14\":1}}],[\"zone=\",{\"1\":{\"117\":1}}],[\"面向对象\",{\"2\":{\"115\":1}}],[\"多对多关系\",{\"1\":{\"113\":1}}],[\"往多端靠拢\",{\"1\":{\"113\":1}}],[\"当java中的long类型值超过javascript中的number类型范围时\",{\"1\":{\"122\":1}}],[\"当然也可以化简成一张表\",{\"1\":{\"113\":1}}],[\"当我们在网站写入一些东西没有保存就想要刷新或者跳转的时候\",{\"1\":{\"62\":1}}],[\"对于聚合关系\",{\"1\":{\"113\":1}}],[\"对于继承关系\",{\"1\":{\"112\":1}}],[\"聚合关系的存储\",{\"0\":{\"113\":1}}],[\"但是他的方法上加了\",{\"1\":{\"128\":1}}],[\"但是当我通过java访问数据库的时候\",{\"1\":{\"117\":1}}],[\"但是这样就违背了关系型数据库的设计理念\",{\"1\":{\"113\":1}}],[\"但是假如一般类也可以生成对象\",{\"1\":{\"112\":1}}],[\"但更多的是存成一张表\",{\"1\":{\"113\":1}}],[\"但我想说\",{\"1\":{\"14\":1}}],[\"而不是通过类型获取bean\",{\"1\":{\"128\":1}}],[\"而代理bean和原始bean是不一样的\",{\"1\":{\"128\":1}}],[\"而在javascript中\",{\"1\":{\"122\":1}}],[\"而是显示的是0时区的时间\",{\"1\":{\"117\":1}}],[\"而且插入删除时需要多表操作比较麻烦\",{\"1\":{\"112\":1}}],[\"而我的\",{\"1\":{\"14\":1}}],[\"比较费时\",{\"1\":{\"112\":1}}],[\"比如在mysql中查询\",{\"1\":{\"141\":1}}],[\"比如订单号\",{\"1\":{\"140\":1}}],[\"比如\",{\"1\":{\"112\":2}}],[\"比如说用户的手机号\",{\"1\":{\"85\":2}}],[\"子表通过外键关联父表\",{\"1\":{\"112\":1}}],[\"插入删除也方便\",{\"1\":{\"112\":1}}],[\"插件搜索vue即可\",{\"1\":{\"24\":1}}],[\"插件搜索spring即可\",{\"1\":{\"21\":1}}],[\"插件搜索java即可\",{\"1\":{\"20\":1}}],[\"合并存储\",{\"1\":{\"112\":1}}],[\"继承关系的存储\",{\"0\":{\"112\":1}}],[\"继续请求\",{\"1\":{\"86\":1}}],[\"即使复杂的功能也不会有太多的代码\",{\"1\":{\"108\":1}}],[\"根据服务名称获取服务实例\",{\"1\":{\"127\":1}}],[\"根据服务类型获取服务实例\",{\"1\":{\"127\":1}}],[\"根据id获取缓存数据\",{\"1\":{\"107\":1}}],[\"根据你的情况选择\",{\"1\":{\"22\":2}}],[\"键值为id\",{\"1\":{\"107\":1}}],[\"缓存数据\",{\"1\":{\"107\":2}}],[\"先来一个接口\",{\"1\":{\"107\":1}}],[\"先来一个工具类\",{\"1\":{\"52\":1}}],[\"代码如下\",{\"1\":{\"107\":1}}],[\"代码实现\",{\"0\":{\"85\":1}}],[\"客制化redistemplate\",{\"1\":{\"106\":1}}],[\"客制化cachemanager\",{\"1\":{\"106\":1}}],[\"8\",{\"1\":{\"106\":3}}],[\"8080\",{\"1\":{\"38\":1}}],[\"324\",{\"1\":{\"122\":1}}],[\"3600000\",{\"1\":{\"106\":1}}],[\"3306\",{\"1\":{\"22\":1}}],[\"6379\",{\"1\":{\"106\":1}}],[\"60\",{\"1\":{\"85\":3,\"136\":2}}],[\"引入依赖\",{\"0\":{\"105\":1,\"134\":1}}],[\"样例\",{\"0\":{\"99\":1}}],[\"将long类型转换为字符串类型\",{\"1\":{\"123\":1}}],[\"将时间戳字段加上这个注解\",{\"1\":{\"118\":1}}],[\"将父类和子类分别存储在不同的表中\",{\"1\":{\"112\":1}}],[\"将所有子类和父类的字段都存储在一张表中\",{\"1\":{\"112\":1}}],[\"将数据库字段类型与java实体类属性类型进行映射\",{\"1\":{\"98\":1}}],[\"将博客实体类转换为博客响应类\",{\"1\":{\"80\":1}}],[\"复杂sql查询\",{\"2\":{\"96\":1}}],[\"查询方便\",{\"1\":{\"112\":1}}],[\"查询写法如下\",{\"1\":{\"93\":1}}],[\"查询的时候直接如下面写即可\",{\"1\":{\"91\":1,\"92\":1}}],[\"参见从面向对象到数据库存储\",{\"1\":{\"93\":1}}],[\"参考资料\",{\"0\":{\"74\":1}}],[\"参考仓库地址\",{\"0\":{\"3\":1}}],[\"现在我们要查询父类\",{\"1\":{\"93\":1}}],[\"几个子类\",{\"1\":{\"93\":1}}],[\"假设一个item类派生出spot\",{\"1\":{\"93\":1}}],[\"假设我们有一个父类\",{\"1\":{\"93\":1}}],[\"假设有一个blog的po\",{\"1\":{\"80\":1}}],[\"分开存储\",{\"1\":{\"112\":1}}],[\"分类查询\",{\"0\":{\"93\":1}}],[\"分别是username和useravatar\",{\"1\":{\"80\":1}}],[\"xml\",{\"1\":{\"91\":2,\"92\":2,\"93\":2}}],[\"xxxxx\",{\"1\":{\"127\":1}}],[\"xxx\",{\"1\":{\"25\":1}}],[\"地址等信息\",{\"1\":{\"91\":1}}],[\"地点包含经纬度\",{\"1\":{\"91\":1}}],[\"举个例子\",{\"1\":{\"91\":1,\"92\":1}}],[\"一般存成三张表\",{\"1\":{\"113\":1}}],[\"一般存成两张表\",{\"1\":{\"113\":1}}],[\"一个路线列表包含多个路线项目\",{\"1\":{\"92\":1}}],[\"一个路线项目包含一个地点\",{\"1\":{\"91\":1}}],[\"一对多关系\",{\"1\":{\"113\":1}}],[\"一对多查询\",{\"0\":{\"92\":1}}],[\"一对一关系\",{\"1\":{\"113\":1}}],[\"一对一查询\",{\"0\":{\"91\":1}}],[\"一些碎碎念\",{\"1\":{\"27\":1}}],[\"来保护\",{\"1\":{\"87\":1}}],[\"的安全性了\",{\"1\":{\"87\":1}}],[\"的有效性\",{\"1\":{\"87\":1}}],[\"的使用\",{\"0\":{\"50\":1}}],[\"项目中进行了集成\",{\"1\":{\"87\":1}}],[\"并且查询出其子类\",{\"1\":{\"93\":1}}],[\"并且赋值给route对象的routeitems属性\",{\"1\":{\"92\":1}}],[\"并且赋值给routeitem对象的location属性\",{\"1\":{\"91\":1}}],[\"并在需要时刷新\",{\"1\":{\"87\":1}}],[\"并在\",{\"1\":{\"87\":1}}],[\"并返回图片的url\",{\"1\":{\"57\":1}}],[\"认证机制\",{\"1\":{\"87\":1}}],[\"通过调整数据中心id和机器id的位数\",{\"1\":{\"146\":1}}],[\"通过外键关联\",{\"1\":{\"113\":3}}],[\"通过springcache可以更优雅地实现缓存功能\",{\"1\":{\"108\":1}}],[\"通过设置resultmap\",{\"1\":{\"101\":1}}],[\"通过<discriminator>标签来实现分类查询\",{\"1\":{\"94\":1}}],[\"通过<association>和<collection>标签来关联对象\",{\"1\":{\"94\":1}}],[\"通过拦截器对请求进行拦截\",{\"1\":{\"87\":1}}],[\"通过上述步骤\",{\"1\":{\"87\":1}}],[\"通过小组作业\",{\"1\":{\"30\":1}}],[\"静态资源映射\",{\"1\":{\"86\":1}}],[\"添加拦截器\",{\"1\":{\"86\":1}}],[\"返回401状态\",{\"1\":{\"86\":1}}],[\"都无效\",{\"1\":{\"86\":1}}],[\"都是摸鱼大神\",{\"1\":{\"31\":1}}],[\"两个\",{\"1\":{\"86\":1}}],[\"中提取用户信息\",{\"1\":{\"86\":1}}],[\"从面向对象到数据库存储\",{\"0\":{\"111\":1}}],[\"从\",{\"1\":{\"86\":1}}],[\"从而提高自己的团队协作能力和解决问题的能力\",{\"1\":{\"30\":1}}],[\"尝试刷新\",{\"1\":{\"86\":1}}],[\"无效但\",{\"1\":{\"86\":1}}],[\"有一个类获取bean\",{\"1\":{\"127\":1}}],[\"有效\",{\"1\":{\"86\":2}}],[\"有服务器的可以参照原作者的写法\",{\"1\":{\"10\":1}}],[\"验证\",{\"1\":{\"86\":2,\"87\":1}}],[\"验证token等方法\",{\"1\":{\"85\":1}}],[\"验证token合法性\",{\"1\":{\"85\":1}}],[\"建议加上包名\",{\"1\":{\"100\":1}}],[\"建议对浏览器预检请求做处理\",{\"1\":{\"86\":1}}],[\"建议直接参照上面那个\",{\"1\":{\"4\":1}}],[\"既然有了token\",{\"1\":{\"86\":1}}],[\"另外\",{\"1\":{\"85\":1}}],[\"另外附上资源网模型资源\",{\"1\":{\"8\":1}}],[\"实际应用中应该根据需求进行调整\",{\"1\":{\"85\":1}}],[\"实际应用中应该使用更安全的密钥\",{\"1\":{\"85\":1}}],[\"实现自定义图片上传\",{\"0\":{\"57\":1}}],[\"需要为每个数据中心和机器分配一个唯一的id\",{\"1\":{\"145\":1}}],[\"需要生成全局唯一的id\",{\"1\":{\"140\":1}}],[\"需要缓存的数据\",{\"1\":{\"107\":1}}],[\"需要注意的是\",{\"1\":{\"85\":1}}],[\"需要解析的token\",{\"1\":{\"85\":2}}],[\"上一次时间戳\",{\"1\":{\"143\":1}}],[\"上面提到的accesssecret\",{\"1\":{\"135\":1}}],[\"上面提到的accesskey\",{\"1\":{\"135\":1}}],[\"上述代码是一个简单的jwt工具类\",{\"1\":{\"85\":1}}],[\"上传失败\",{\"1\":{\"57\":1}}],[\"上传成功\",{\"1\":{\"57\":1}}],[\"表示同一毫秒内生成的多个id\",{\"1\":{\"142\":1}}],[\"表示机器id\",{\"1\":{\"142\":1}}],[\"表示数据中心id\",{\"1\":{\"142\":1}}],[\"表示当前时间相对于某个起始时间的毫秒数\",{\"1\":{\"142\":1}}],[\"表示正数\",{\"1\":{\"142\":1}}],[\"表示不合法\",{\"1\":{\"85\":1}}],[\"表示合法\",{\"1\":{\"85\":1}}],[\"表示未过期\",{\"1\":{\"85\":1}}],[\"表示过期\",{\"1\":{\"85\":1}}],[\"表示这个接口是一个spring的bean\",{\"1\":{\"80\":1}}],[\"待验证的token\",{\"1\":{\"85\":2}}],[\"判断token是否过期\",{\"1\":{\"85\":1}}],[\"过了你就查不到了\",{\"1\":{\"132\":1}}],[\"过期的token直接返回null\",{\"1\":{\"85\":1}}],[\"过滤掉前端不需要的数据\",{\"1\":{\"69\":1,\"72\":1}}],[\"解决字段类型不匹配的问题\",{\"1\":{\"101\":1}}],[\"解决方案\",{\"0\":{\"47\":1,\"118\":1,\"123\":1,\"128\":1}}],[\"解析token\",{\"1\":{\"85\":2}}],[\"更不容易过期\",{\"1\":{\"85\":1}}],[\"生成的多个id需要使用序列号进行区分\",{\"1\":{\"145\":1}}],[\"生成的映射代码使用普通的方法调用\",{\"1\":{\"78\":1}}],[\"生成新的\",{\"1\":{\"86\":1}}],[\"生成refreshtoken\",{\"1\":{\"85\":1}}],[\"生成token\",{\"1\":{\"85\":1}}],[\"7976931348623157e+308\",{\"1\":{\"122\":1}}],[\"7\",{\"1\":{\"85\":2,\"86\":1,\"136\":1}}],[\"1l\",{\"1\":{\"143\":7}}],[\"12\",{\"1\":{\"143\":1}}],[\"12位可以表示4096个不同的序列号\",{\"1\":{\"142\":1}}],[\"12位\",{\"1\":{\"142\":1}}],[\"1609459200000l\",{\"1\":{\"143\":1}}],[\"1位\",{\"1\":{\"142\":1}}],[\"10\",{\"1\":{\"106\":1}}],[\"100mb\",{\"1\":{\"135\":2}}],[\"1000\",{\"1\":{\"85\":2,\"136\":1}}],[\"100\",{\"1\":{\"47\":1}}],[\"1\",{\"1\":{\"86\":1,\"134\":1,\"143\":3}}],[\"15\",{\"1\":{\"85\":2}}],[\"key是一个固定的字符串\",{\"1\":{\"85\":1}}],[\"key\",{\"1\":{\"85\":13,\"86\":2,\"107\":7,\"135\":2}}],[\"直接上代码\",{\"1\":{\"84\":1,\"123\":1}}],[\"废话不多说\",{\"1\":{\"84\":1}}],[\"使得转换过程更加简单和高效\",{\"1\":{\"81\":1}}],[\"使用示例\",{\"0\":{\"144\":1}}],[\"使用如下\",{\"1\":{\"107\":1,\"127\":1}}],[\"使用jackon序列化\",{\"1\":{\"106\":1}}],[\"使用jquery实现\",{\"1\":{\"6\":1}}],[\"使用双token\",{\"1\":{\"86\":1}}],[\"使用\",{\"0\":{\"42\":1,\"52\":1,\"80\":1,\"107\":1,\"136\":1},\"1\":{\"46\":1,\"123\":1}}],[\"总结\",{\"0\":{\"81\":1,\"87\":1,\"94\":1,\"101\":1,\"108\":1,\"146\":1}}],[\"方便我们使用\",{\"1\":{\"80\":1}}],[\"之后\",{\"1\":{\"80\":1}}],[\"用来区分是哪个子类\",{\"1\":{\"93\":1}}],[\"用户id等\",{\"1\":{\"140\":1}}],[\"用户信息\",{\"1\":{\"85\":1}}],[\"用户昵称\",{\"1\":{\"80\":1}}],[\"用户头像\",{\"1\":{\"80\":1}}],[\"用于排除你不想要排除的路径\",{\"1\":{\"86\":1}}],[\"用于定义转换规则\",{\"1\":{\"80\":1}}],[\"用于表示一个数据库表中的一条记录\",{\"1\":{\"71\":1}}],[\"用于表示一个视图层的数据\",{\"1\":{\"69\":1}}],[\"用于在不同的层之间传递数据\",{\"1\":{\"70\":1,\"72\":1}}],[\"用于弹窗提示\",{\"1\":{\"62\":1}}],[\"用于上传图片\",{\"1\":{\"57\":1}}],[\"用于监听主题变化\",{\"1\":{\"50\":1}}],[\"那么这种方法比较合适\",{\"1\":{\"112\":1}}],[\"那么这些类之间应该如何做转换\",{\"1\":{\"77\":1}}],[\"那么三个类分成三个表\",{\"1\":{\"112\":1}}],[\"那么\",{\"1\":{\"112\":1}}],[\"那么直接用装饰器就行\",{\"1\":{\"108\":1}}],[\"那么肯定要有拦截器\",{\"1\":{\"86\":1}}],[\"那么接口使用方式如下\",{\"1\":{\"80\":1}}],[\"那么如何将blog转换为blogresp呢\",{\"1\":{\"80\":1}}],[\"发现\",{\"1\":{\"128\":1}}],[\"发现每次上传都会触发两次\",{\"1\":{\"46\":1}}],[\"发布博客的用户头像\",{\"1\":{\"80\":1}}],[\"发布博客的用户昵称\",{\"1\":{\"80\":1}}],[\"发布博客的用户id\",{\"1\":{\"80\":1}}],[\"博客响应类\",{\"1\":{\"80\":1}}],[\"博客响应\",{\"1\":{\"80\":1}}],[\"博客创建时间戳\",{\"1\":{\"80\":2}}],[\"博客内容\",{\"1\":{\"80\":2}}],[\"博客描述\",{\"1\":{\"80\":2}}],[\"博客标题\",{\"1\":{\"80\":2}}],[\"博客作者id\",{\"1\":{\"80\":1}}],[\"博客实体类\",{\"1\":{\"80\":2}}],[\"定义如下\",{\"1\":{\"80\":2}}],[\"5位\",{\"1\":{\"142\":2}}],[\"5s\",{\"1\":{\"106\":2}}],[\"5\",{\"1\":{\"79\":4,\"143\":2}}],[\"5173\",{\"1\":{\"25\":1}}],[\"类型安全且易于理解\",{\"1\":{\"78\":1}}],[\"因此\",{\"1\":{\"122\":1}}],[\"因此速度快\",{\"1\":{\"78\":1}}],[\"因为id是正数\",{\"1\":{\"142\":1}}],[\"因为使用了b+树\",{\"1\":{\"141\":1}}],[\"因为我的网站取名还是太抽象了\",{\"1\":{\"14\":1}}],[\"因为全栈才符合牛马的气质啊\",{\"1\":{\"13\":1}}],[\"大概意思是\",{\"1\":{\"78\":1}}],[\"大肠\",{\"1\":{\"14\":1}}],[\"大肠包小肠\",{\"1\":{\"14\":1}}],[\"前言\",{\"0\":{\"98\":1,\"117\":1,\"122\":1,\"127\":1}}],[\"前面说到\",{\"1\":{\"77\":1}}],[\"前端传后端的数据和后端传前端的数据\",{\"1\":{\"70\":1}}],[\"前端相关的\",{\"1\":{\"34\":1}}],[\"前端\",{\"0\":{\"34\":1}}],[\"概念pojo\",{\"1\":{\"74\":1}}],[\"他们之间可以相互转换\",{\"1\":{\"73\":1}}],[\"应当注意的是这些o之间并不是固定的\",{\"1\":{\"73\":1}}],[\"还有一个blogresp的vo\",{\"1\":{\"80\":1}}],[\"还有些没列出来\",{\"1\":{\"73\":1}}],[\"还是不建议直接使用iconfont\",{\"1\":{\"7\":1}}],[\"个人写只用到vo\",{\"1\":{\"73\":1}}],[\"个人理解\",{\"0\":{\"73\":1}}],[\"个人留言\",{\"0\":{\"13\":1}}],[\"持久化对象\",{\"1\":{\"72\":1}}],[\"数据中心和机器id的分配\",{\"1\":{\"145\":1}}],[\"数据中心部分\",{\"1\":{\"143\":1}}],[\"数据中心\",{\"1\":{\"143\":1}}],[\"数据中心占用的位数\",{\"1\":{\"143\":1}}],[\"数据中心id\",{\"1\":{\"142\":1}}],[\"数据id\",{\"1\":{\"107\":1}}],[\"数据传输对象\",{\"1\":{\"72\":1}}],[\"数据库设计\",{\"2\":{\"115\":1}}],[\"数据库\",{\"1\":{\"19\":1},\"2\":{\"114\":1,\"119\":1,\"147\":1}}],[\"专门为前端服务的对象\",{\"1\":{\"72\":1}}],[\"显示层对象\",{\"1\":{\"72\":1}}],[\"只有数据\",{\"1\":{\"72\":1}}],[\"只有一个人在写\",{\"1\":{\"31\":1}}],[\"它能够保证在分布式环境下生成的id是唯一的\",{\"1\":{\"140\":1,\"146\":1}}],[\"它可以自动生成转换代码\",{\"1\":{\"81\":1}}],[\"它大大简化了基于约定优于配置的方法在java\",{\"1\":{\"78\":1}}],[\"它们之间的区别如下\",{\"1\":{\"72\":1}}],[\"它是一个持久化对象\",{\"1\":{\"71\":1}}],[\"它是一个数据传输对象\",{\"1\":{\"70\":1}}],[\"它是一个视图对象\",{\"1\":{\"69\":1}}],[\"它是一个简单的java对象\",{\"1\":{\"68\":1}}],[\"理解为po中的字段和数据库中的字段一一对应\",{\"1\":{\"71\":1}}],[\"理解为dto为各层传输的对象\",{\"1\":{\"70\":1}}],[\"包含前端想要的数据\",{\"1\":{\"69\":1,\"72\":1}}],[\"或者耍流氓存向量或者json\",{\"1\":{\"113\":1}}],[\"或者用于作为业务逻辑层的参数和返回值\",{\"1\":{\"70\":1,\"71\":1}}],[\"或者用于表示一个数据库表中的一条记录\",{\"1\":{\"70\":1}}],[\"或者一个网页的显示数据\",{\"1\":{\"69\":1}}],[\"或者搜索框无法关闭\",{\"1\":{\"9\":1}}],[\"例如一个网页的表单数据\",{\"1\":{\"69\":1}}],[\"其中包含了生成token\",{\"1\":{\"85\":1}}],[\"其中\",{\"1\":{\"80\":1}}],[\"其中每个字段都和数据库中的属性一一对应\",{\"1\":{\"72\":1}}],[\"其实加了componentmodel\",{\"1\":{\"80\":1}}],[\"其实都是根据业务场景来划分的\",{\"1\":{\"73\":1}}],[\"其实大概意思就是只有data\",{\"1\":{\"68\":1}}],[\"其他表示失败\",{\"1\":{\"57\":1}}],[\"后端相关的\",{\"1\":{\"65\":1}}],[\"后端\",{\"0\":{\"65\":1}}],[\"后端返回接口样例如下\",{\"1\":{\"57\":1}}],[\"您还有未保存的内容\",{\"1\":{\"62\":1}}],[\"while\",{\"1\":{\"143\":1}}],[\"when\",{\"1\":{\"93\":6}}],[\"where\",{\"1\":{\"91\":1,\"92\":1,\"93\":1,\"99\":1}}],[\"webjars\",{\"1\":{\"86\":3}}],[\"webmvcconfigurer\",{\"1\":{\"86\":1}}],[\"webconfig\",{\"1\":{\"86\":1}}],[\"write\",{\"1\":{\"86\":1}}],[\"window\",{\"1\":{\"62\":2}}],[\"wangeditor\",{\"1\":{\"56\":2}}],[\"wangeditor自定义图片上传\",{\"0\":{\"55\":1},\"2\":{\"59\":1}}],[\"确定要离开当前页面吗\",{\"1\":{\"62\":2}}],[\"以确保生成的id是唯一的\",{\"1\":{\"145\":1}}],[\"以确保生成的id是全局唯一的\",{\"1\":{\"145\":1}}],[\"以下为字节码\",{\"1\":{\"80\":1}}],[\"以下介绍常见的几个o\",{\"1\":{\"67\":1}}],[\"以下给出实现\",{\"1\":{\"62\":1}}],[\"以用户登录为例\",{\"1\":{\"42\":1}}],[\"浏览器会给出提示\",{\"1\":{\"62\":1}}],[\"局部路由守卫\",{\"0\":{\"62\":1}}],[\"配置如下\",{\"1\":{\"117\":1}}],[\"配置\",{\"0\":{\"106\":1,\"135\":1},\"1\":{\"61\":1}}],[\"配置上传图片\",{\"1\":{\"57\":1}}],[\"全局路由守卫\",{\"0\":{\"61\":1}}],[\"全栈十分辛苦\",{\"1\":{\"13\":1}}],[\"路由守卫\",{\"0\":{\"60\":1},\"2\":{\"64\":1}}],[\"图片上传成功\",{\"1\":{\"57\":1}}],[\"图标使用方法请参考fontawesome官网\",{\"1\":{\"7\":1}}],[\"图标的使用\",{\"0\":{\"7\":1}}],[\"404\",{\"1\":{\"149\":1}}],[\"41位可以表示69年的时间\",{\"1\":{\"142\":1}}],[\"41位\",{\"1\":{\"142\":1}}],[\"4\",{\"1\":{\"57\":1}}],[\"2021\",{\"1\":{\"143\":1}}],[\"200\",{\"1\":{\"41\":1}}],[\"24\",{\"1\":{\"85\":1,\"136\":1}}],[\"255\",{\"1\":{\"57\":3}}],[\"正在加载\",{\"1\":{\"57\":1}}],[\"out\",{\"1\":{\"144\":1}}],[\"ossclientbuilder\",{\"1\":{\"136\":1}}],[\"ossclient\",{\"1\":{\"136\":4}}],[\"ossconfig\",{\"1\":{\"135\":1,\"136\":7}}],[\"oss\",{\"1\":{\"135\":2,\"136\":1},\"2\":{\"138\":1}}],[\"oss<\",{\"1\":{\"134\":2}}],[\"oss1\",{\"1\":{\"132\":1}}],[\"or\",{\"1\":{\"143\":2}}],[\"org\",{\"1\":{\"127\":1}}],[\"order\",{\"1\":{\"91\":3,\"92\":2}}],[\"ok\",{\"1\":{\"86\":1}}],[\"options\",{\"1\":{\"86\":1}}],[\"override\",{\"1\":{\"86\":3,\"107\":3}}],[\"over\",{\"1\":{\"78\":1}}],[\"ofminutes\",{\"1\":{\"106\":1}}],[\"of\",{\"1\":{\"78\":1,\"127\":1}}],[\"off\",{\"1\":{\"52\":1}}],[\"objectmetadata\",{\"1\":{\"136\":5}}],[\"objectname\",{\"1\":{\"136\":4}}],[\"object>\",{\"1\":{\"106\":2}}],[\"object\",{\"1\":{\"72\":4,\"86\":1}}],[\"object的缩写\",{\"1\":{\"68\":1,\"69\":1,\"70\":1,\"71\":1}}],[\"old\",{\"1\":{\"68\":1,\"72\":1}}],[\"onbeforeunmount\",{\"1\":{\"62\":1}}],[\"onmounted\",{\"1\":{\"62\":1}}],[\"on\",{\"1\":{\"47\":1,\"52\":1,\"78\":1,\"93\":3}}],[\"记得取消监听\",{\"1\":{\"52\":1}}],[\"记录一些与编程相关的技巧与心得\",{\"1\":{\"16\":1}}],[\"不同毫秒内\",{\"1\":{\"143\":1}}],[\"不同子类建立不同表\",{\"1\":{\"112\":1}}],[\"不设置公开读写\",{\"1\":{\"133\":1}}],[\"不用做表关联\",{\"1\":{\"112\":1}}],[\"不需要的时候\",{\"1\":{\"52\":1}}],[\"不建议入坑\",{\"1\":{\"13\":1}}],[\"特引入这个工具\",{\"1\":{\"50\":1}}],[\"在同一毫秒内\",{\"1\":{\"145\":1}}],[\"在分布式环境下\",{\"1\":{\"145\":1}}],[\"在分布式系统中\",{\"1\":{\"140\":1}}],[\"在边栏权限访问处\",{\"1\":{\"133\":1}}],[\"在java中\",{\"1\":{\"122\":1}}],[\"在实体类中\",{\"1\":{\"118\":1}}],[\"在开发过程中\",{\"1\":{\"98\":1}}],[\"在开发中我们会用到很多类\",{\"1\":{\"77\":1}}],[\"在请求处理之前进行拦截\",{\"1\":{\"86\":1}}],[\"在字节码里面会加上\",{\"1\":{\"80\":1}}],[\"在卸载的时候移除监听\",{\"1\":{\"62\":1}}],[\"在router\",{\"1\":{\"61\":1}}],[\"在我开发的飞马旅游中为了让地图的主题跟随项目主题变化而变化\",{\"1\":{\"50\":1}}],[\"在handleavatarupload的时候就不会再上传文件了\",{\"1\":{\"47\":1}}],[\"在application\",{\"1\":{\"22\":1}}],[\"<=\",{\"1\":{\"143\":1}}],[\"<<\",{\"1\":{\"143\":6}}],[\"<version>3\",{\"1\":{\"134\":1}}],[\"<version>1\",{\"1\":{\"79\":2}}],[\"<groupid>com\",{\"1\":{\"134\":1}}],[\"<groupid>org\",{\"1\":{\"79\":2,\"105\":2}}],[\"<t>\",{\"1\":{\"127\":4}}],[\"<case\",{\"1\":{\"93\":3}}],[\"<collection\",{\"1\":{\"92\":1}}],[\"<discriminator\",{\"1\":{\"93\":1}}],[\"<dependency>\",{\"1\":{\"79\":2,\"105\":2,\"134\":1}}],[\"<select\",{\"1\":{\"91\":1,\"92\":1,\"93\":1,\"99\":1}}],[\"<scope>provided<\",{\"1\":{\"79\":1}}],[\"<artifactid>aliyun\",{\"1\":{\"134\":1}}],[\"<artifactid>spring\",{\"1\":{\"105\":2}}],[\"<artifactid>mapstruct\",{\"1\":{\"79\":1}}],[\"<artifactid>mapstruct<\",{\"1\":{\"79\":1}}],[\"<association\",{\"1\":{\"91\":1,\"92\":1}}],[\"<result\",{\"1\":{\"91\":4,\"92\":2,\"93\":5,\"99\":6}}],[\"<resultmap\",{\"1\":{\"91\":2,\"92\":2,\"93\":2,\"99\":1}}],[\"<\",{\"1\":{\"47\":1,\"79\":2,\"91\":5,\"92\":5,\"93\":7,\"99\":2,\"105\":2,\"134\":1,\"143\":3}}],[\"<id\",{\"1\":{\"91\":2,\"92\":2,\"93\":1,\"99\":1}}],[\"<i\",{\"1\":{\"47\":1}}],[\"<el\",{\"1\":{\"47\":2}}],[\"><\",{\"1\":{\"47\":1}}],[\">\",{\"1\":{\"47\":2,\"61\":1,\"91\":12,\"92\":11,\"93\":16,\"99\":9,\"143\":2}}],[\"导致上传两次\",{\"1\":{\"46\":1}}],[\"事件\",{\"1\":{\"46\":1}}],[\"和getter和setter\",{\"1\":{\"72\":1}}],[\"和\",{\"1\":{\"46\":1}}],[\"组件上传文件时\",{\"1\":{\"46\":1}}],[\"问题\",{\"0\":{\"46\":1}}],[\"问就是摸鱼\",{\"1\":{\"31\":1}}],[\"网络错误\",{\"1\":{\"42\":1}}],[\"网上特别多\",{\"1\":{\"6\":1}}],[\"登录成功\",{\"1\":{\"42\":1}}],[\"0l\",{\"1\":{\"143\":3}}],[\"01\",{\"1\":{\"143\":2}}],[\"0x0400\",{\"1\":{\"136\":1}}],[\"0<\",{\"1\":{\"134\":1}}],[\"00\",{\"1\":{\"117\":1,\"143\":3}}],[\"0表示成功\",{\"1\":{\"57\":1}}],[\"0\",{\"1\":{\"42\":1,\"57\":2,\"61\":1,\"106\":1,\"143\":4}}],[\"found\",{\"1\":{\"149\":1}}],[\"format\",{\"1\":{\"136\":1}}],[\"formdata\",{\"1\":{\"57\":4}}],[\"for\",{\"1\":{\"56\":1,\"107\":1}}],[\"factory\",{\"1\":{\"127\":1}}],[\"favicon\",{\"1\":{\"86\":1}}],[\"fast\",{\"1\":{\"78\":1}}],[\"false\",{\"1\":{\"42\":2,\"47\":1,\"62\":1,\"85\":2,\"86\":4,\"106\":1}}],[\"finduserbyid\",{\"1\":{\"107\":1}}],[\"findallids\",{\"1\":{\"107\":1}}],[\"findallusers\",{\"1\":{\"107\":1}}],[\"finditembyid\",{\"1\":{\"93\":1}}],[\"findroutelistbyid\",{\"1\":{\"92\":1}}],[\"findrouteitemsbyrouteid\",{\"1\":{\"91\":1,\"92\":1}}],[\"findlocationbyid\",{\"1\":{\"91\":1,\"92\":1}}],[\"finalfilename\",{\"1\":{\"136\":2}}],[\"final\",{\"1\":{\"85\":3,\"143\":10}}],[\"final<\",{\"1\":{\"79\":2}}],[\"finally\",{\"1\":{\"57\":1}}],[\"filename\",{\"1\":{\"136\":3}}],[\"file\",{\"1\":{\"47\":1,\"57\":5,\"135\":1}}],[\"function\",{\"1\":{\"42\":1,\"47\":1,\"57\":1}}],[\"fromserializer\",{\"1\":{\"106\":2}}],[\"from\",{\"1\":{\"38\":1,\"52\":3,\"61\":1,\"62\":1,\"91\":1,\"92\":1,\"93\":2,\"99\":1}}],[\"entryttl\",{\"1\":{\"106\":1}}],[\"entity详解\",{\"1\":{\"74\":1}}],[\"entity\",{\"1\":{\"73\":1}}],[\"endpoint\",{\"1\":{\"135\":1,\"136\":2}}],[\"end\",{\"1\":{\"93\":2,\"135\":1}}],[\"e\",{\"1\":{\"85\":1,\"107\":2}}],[\"easy\",{\"1\":{\"78\":1}}],[\"equalsignorecase\",{\"1\":{\"86\":1}}],[\"equals\",{\"1\":{\"68\":1,\"85\":1}}],[\"eventlistener\",{\"1\":{\"107\":1}}],[\"event\",{\"1\":{\"62\":3,\"107\":2}}],[\"eventbus\",{\"1\":{\"52\":2}}],[\"editblog\",{\"1\":{\"57\":1}}],[\"editorconfig\",{\"1\":{\"57\":1}}],[\"editor\",{\"1\":{\"56\":2}}],[\"extends=\",{\"1\":{\"93\":1}}],[\"extractedkey\",{\"1\":{\"85\":3}}],[\"extractkey\",{\"1\":{\"85\":2,\"86\":1}}],[\"extractclaims\",{\"1\":{\"85\":3}}],[\"excludepathpatterns\",{\"1\":{\"86\":2}}],[\"exception\",{\"1\":{\"86\":1}}],[\"expiration\",{\"1\":{\"85\":2,\"136\":2}}],[\"expired\",{\"1\":{\"61\":1}}],[\"export\",{\"1\":{\"52\":1}}],[\"example\",{\"1\":{\"57\":1}}],[\"emit\",{\"1\":{\"52\":1}}],[\"emitter\",{\"1\":{\"52\":7}}],[\"elloading\",{\"1\":{\"57\":1}}],[\"element\",{\"2\":{\"49\":1}}],[\"el\",{\"0\":{\"45\":1},\"1\":{\"46\":1,\"47\":2,\"57\":1},\"2\":{\"49\":1}}],[\"elmessage\",{\"1\":{\"42\":3,\"57\":2}}],[\"else\",{\"1\":{\"41\":1,\"47\":1,\"61\":3,\"62\":2,\"80\":1,\"93\":2,\"107\":1,\"143\":1}}],[\"err\",{\"1\":{\"41\":1}}],[\"error\",{\"1\":{\"40\":2,\"41\":5,\"42\":5,\"57\":2,\"61\":4}}],[\"响应拦截器\",{\"0\":{\"41\":1}}],[\"`item`\",{\"1\":{\"93\":7}}],[\"`id`\",{\"1\":{\"91\":1,\"92\":2,\"93\":9}}],[\"`hotel\",{\"1\":{\"93\":1}}],[\"`hotel`\",{\"1\":{\"93\":5}}],[\"`star\",{\"1\":{\"93\":4}}],[\"`spot`\",{\"1\":{\"93\":4}}],[\"`recommend`\",{\"1\":{\"93\":1}}],[\"`restaurant\",{\"1\":{\"93\":3}}],[\"`restaurant`\",{\"1\":{\"93\":7}}],[\"`route`\",{\"1\":{\"92\":1}}],[\"`route\",{\"1\":{\"91\":2}}],[\"`avg\",{\"1\":{\"93\":6}}],[\"`type`\",{\"1\":{\"93\":9}}],[\"`desc`\",{\"1\":{\"93\":2}}],[\"`filtered\",{\"1\":{\"93\":15}}],[\"`name`\",{\"1\":{\"92\":1,\"93\":2}}],[\"`order`\",{\"1\":{\"91\":2}}],[\"`loc\",{\"1\":{\"91\":1,\"93\":2}}],[\"`\",{\"1\":{\"40\":1,\"47\":1}}],[\"`bearer\",{\"1\":{\"40\":1,\"47\":1}}],[\"$\",{\"1\":{\"40\":1,\"47\":1}}],[\"gmt+8\",{\"1\":{\"80\":2,\"118\":1}}],[\"greater\",{\"1\":{\"143\":2}}],[\"greatly\",{\"1\":{\"78\":1}}],[\"groupid>\",{\"1\":{\"79\":2,\"105\":2,\"134\":1}}],[\"genericjackson2jsonredisserializer\",{\"1\":{\"106\":6}}],[\"generateid\",{\"1\":{\"144\":1}}],[\"generate\",{\"1\":{\"143\":1}}],[\"generatepresignedurl\",{\"1\":{\"136\":1}}],[\"generaterefreshtoken\",{\"1\":{\"85\":1}}],[\"generatetoken\",{\"1\":{\"85\":1,\"86\":1}}],[\"generated\",{\"1\":{\"78\":1}}],[\"generator\",{\"1\":{\"78\":1}}],[\"gender\",{\"1\":{\"99\":2}}],[\"getnextmill\",{\"1\":{\"143\":2}}],[\"getnewstmp\",{\"1\":{\"143\":4}}],[\"getoriginalfilename\",{\"1\":{\"136\":1}}],[\"getaccesskeysecret\",{\"1\":{\"136\":1}}],[\"getaccesskeyid\",{\"1\":{\"136\":1}}],[\"getendpoint\",{\"1\":{\"136\":2}}],[\"getexpiration\",{\"1\":{\"85\":1}}],[\"getbytes\",{\"1\":{\"136\":1}}],[\"getbucketname\",{\"1\":{\"136\":1}}],[\"getbean\",{\"1\":{\"127\":2}}],[\"getbody\",{\"1\":{\"85\":1}}],[\"getservice\",{\"1\":{\"127\":3}}],[\"getsubject\",{\"1\":{\"85\":1}}],[\"get\",{\"1\":{\"107\":4}}],[\"getuserbyid\",{\"1\":{\"99\":1,\"107\":1}}],[\"getuserid\",{\"1\":{\"80\":1}}],[\"getwriter\",{\"1\":{\"86\":1}}],[\"getheader\",{\"1\":{\"86\":2}}],[\"getmethod\",{\"1\":{\"86\":1}}],[\"getmapper\",{\"1\":{\"80\":1}}],[\"gettitle\",{\"1\":{\"80\":1}}],[\"getter\",{\"1\":{\"68\":1}}],[\"getid\",{\"1\":{\"80\":1,\"107\":1}}],[\"getitem\",{\"1\":{\"40\":1,\"47\":2,\"61\":2}}],[\"getdescription\",{\"1\":{\"80\":1}}],[\"getcache\",{\"1\":{\"107\":3}}],[\"getcreateat\",{\"1\":{\"80\":1}}],[\"getcontent\",{\"1\":{\"80\":1}}],[\"github\",{\"1\":{\"3\":1,\"4\":1}}],[\"请求拦截器\",{\"0\":{\"40\":1}}],[\"请尝试刷新页面\",{\"1\":{\"9\":1}}],[\"拦截器定义如下\",{\"1\":{\"86\":1}}],[\"拦截器实现\",{\"0\":{\"86\":1}}],[\"拦截器\",{\"0\":{\"39\":1}}],[\"bit\",{\"1\":{\"143\":10}}],[\"birthday\",{\"1\":{\"99\":2}}],[\"bucketname\",{\"1\":{\"135\":1,\"136\":4}}],[\"bucket\",{\"1\":{\"135\":1}}],[\"build\",{\"1\":{\"80\":1,\"106\":1,\"136\":1}}],[\"builder\",{\"1\":{\"80\":3,\"85\":2,\"106\":1}}],[\"b表和c表都存储a表的数据\",{\"1\":{\"112\":1}}],[\"b建立一张表\",{\"1\":{\"112\":1}}],[\"b\",{\"1\":{\"112\":2}}],[\"bytearrayinputstream\",{\"1\":{\"136\":1}}],[\"by\",{\"1\":{\"91\":1}}],[\"blogservice\",{\"1\":{\"127\":3}}],[\"blogconvertmapperimpl\",{\"1\":{\"80\":2}}],[\"blogconvertmapper\",{\"1\":{\"80\":8}}],[\"blogrespbuilder\",{\"1\":{\"80\":1}}],[\"blogresp\",{\"1\":{\"80\":17}}],[\"blog\",{\"1\":{\"80\":20}}],[\"be\",{\"1\":{\"143\":2}}],[\"bearer\",{\"1\":{\"86\":1}}],[\"beans\",{\"1\":{\"127\":1}}],[\"bean类型之间进行映射的实现\",{\"1\":{\"78\":1}}],[\"bean\",{\"1\":{\"78\":1,\"106\":2,\"127\":1},\"2\":{\"130\":1}}],[\"between\",{\"1\":{\"78\":1}}],[\"beforeunload\",{\"1\":{\"62\":2}}],[\"beforeunloadhandler\",{\"1\":{\"62\":3}}],[\"beforeeach\",{\"1\":{\"61\":1,\"62\":1}}],[\"before\",{\"1\":{\"46\":1,\"85\":1}}],[\"boolean\",{\"1\":{\"85\":2,\"86\":3}}],[\"boot<\",{\"1\":{\"105\":2}}],[\"boot\",{\"1\":{\"22\":2,\"87\":1,\"105\":2}}],[\"bo\",{\"1\":{\"74\":1}}],[\"backwards\",{\"1\":{\"143\":1}}],[\"background\",{\"1\":{\"57\":1}}],[\"based\",{\"1\":{\"78\":1}}],[\"baseurl\",{\"1\":{\"38\":1}}],[\"==\",{\"1\":{\"41\":1,\"42\":1,\"61\":2,\"80\":3,\"85\":1,\"143\":2}}],[\"=\",{\"1\":{\"38\":1,\"40\":2,\"41\":1,\"42\":1,\"47\":4,\"52\":1,\"57\":6,\"61\":4,\"62\":3,\"80\":33,\"85\":9,\"86\":11,\"91\":1,\"92\":1,\"93\":10,\"99\":1,\"106\":3,\"107\":16,\"123\":1,\"127\":1,\"135\":1,\"136\":14,\"143\":23,\"144\":1}}],[\"=>\",{\"1\":{\"38\":1,\"40\":2,\"41\":2,\"52\":2,\"61\":1,\"62\":4}}],[\"illegalargumentexception\",{\"1\":{\"143\":2}}],[\"ioexception\",{\"1\":{\"136\":1}}],[\"icacheservice<user>\",{\"1\":{\"107\":2}}],[\"icacheservice<e>\",{\"1\":{\"107\":1}}],[\"ico\",{\"1\":{\"86\":1}}],[\"icon\",{\"1\":{\"47\":2,\"57\":1}}],[\"itemtype\",{\"1\":{\"93\":1}}],[\"item\",{\"1\":{\"93\":1}}],[\"itemresultmap\",{\"1\":{\"93\":3}}],[\"itemmapper\",{\"1\":{\"93\":2}}],[\"item表中存储了一个type字段\",{\"1\":{\"93\":1}}],[\"item`\",{\"1\":{\"91\":1,\"93\":15}}],[\"ids\",{\"1\":{\"107\":2}}],[\"id标签的property属性必须与java实体类的属性名一致\",{\"1\":{\"100\":1}}],[\"id来查询location对象\",{\"1\":{\"91\":1}}],[\"id`\",{\"1\":{\"91\":2,\"93\":2}}],[\"id=\",{\"1\":{\"91\":3,\"92\":3,\"93\":3,\"99\":2}}],[\"id\",{\"1\":{\"80\":3,\"91\":5,\"92\":7,\"93\":3,\"99\":4,\"107\":14,\"123\":1,\"135\":1,\"143\":1,\"144\":2}}],[\"is\",{\"1\":{\"78\":2}}],[\"isempty\",{\"1\":{\"62\":2,\"86\":1}}],[\"isrefreshtokenvalid\",{\"1\":{\"61\":2}}],[\"istokenexpired\",{\"1\":{\"61\":1,\"85\":2,\"86\":2}}],[\"isaccesstokenvalid\",{\"1\":{\"61\":2}}],[\"implements\",{\"1\":{\"80\":1,\"86\":2,\"107\":1}}],[\"implementation\",{\"1\":{\"78\":1}}],[\"import\",{\"1\":{\"38\":1,\"52\":3}}],[\"imageservice\",{\"1\":{\"136\":1}}],[\"image\",{\"1\":{\"57\":1,\"136\":1}}],[\"i>\",{\"1\":{\"47\":1}}],[\"if=\",{\"1\":{\"47\":1}}],[\"if\",{\"1\":{\"40\":1,\"41\":1,\"42\":1,\"61\":3,\"62\":4,\"80\":2,\"86\":5,\"107\":1,\"143\":5}}],[\"ini文件\",{\"1\":{\"117\":1}}],[\"inf\",{\"1\":{\"86\":3}}],[\"invalid\",{\"1\":{\"86\":1}}],[\"invocations\",{\"1\":{\"78\":1}}],[\"interceptorregistry\",{\"1\":{\"86\":1}}],[\"interceptors\",{\"1\":{\"40\":1,\"41\":1}}],[\"interface\",{\"1\":{\"80\":1,\"107\":1}}],[\"index\",{\"1\":{\"61\":1,\"86\":1}}],[\"instance\",{\"1\":{\"80\":2}}],[\"install\",{\"1\":{\"25\":1,\"37\":1,\"51\":1,\"56\":2}}],[\"insertfn\",{\"1\":{\"57\":2}}],[\"然后购买oss服务\",{\"1\":{\"132\":1}}],[\"然后突然发现有些时候无法获取某个bean\",{\"1\":{\"127\":1}}],[\"然后我在数据库中访问时间戳也是正常的\",{\"1\":{\"117\":1}}],[\"然后我们就可以在代码中使用这个接口了\",{\"1\":{\"80\":1}}],[\"然后b表和c表通过外键关联a表\",{\"1\":{\"112\":1}}],[\"然后b表存储自己独特的字段\",{\"1\":{\"112\":1}}],[\"然后具体实现一下\",{\"1\":{\"107\":1}}],[\"然后使用cache的方法\",{\"1\":{\"107\":1}}],[\"然后使用axios\",{\"1\":{\"38\":1}}],[\"然后就可以在select语句中使用resultmap属性了\",{\"1\":{\"99\":1}}],[\"然后在挂载的时候添加监听\",{\"1\":{\"62\":1}}],[\"然后是注册拦截器\",{\"1\":{\"86\":1}}],[\"然后是自定义的图片上传\",{\"1\":{\"57\":1}}],[\"然后是事件发起\",{\"1\":{\"52\":1}}],[\"然后触发地图主题变化\",{\"1\":{\"50\":1}}],[\"然后给出本站的仓库地址\",{\"1\":{\"4\":1}}],[\"^\",{\"1\":{\"38\":1,\"143\":3}}],[\"route\",{\"1\":{\"92\":1}}],[\"routelistmapper\",{\"1\":{\"92\":1}}],[\"routeid\",{\"1\":{\"91\":1}}],[\"routeitems\",{\"1\":{\"92\":1}}],[\"routeitem\",{\"1\":{\"91\":1,\"92\":1}}],[\"routeitemresultmap\",{\"1\":{\"91\":2,\"92\":1}}],[\"routeitemmapper\",{\"1\":{\"91\":1,\"92\":2}}],[\"routeresultmap\",{\"1\":{\"92\":2}}],[\"router\",{\"1\":{\"61\":1,\"62\":1}}],[\"rgba\",{\"1\":{\"57\":1}}],[\"refusing\",{\"1\":{\"143\":1}}],[\"refreshaccesstoken\",{\"1\":{\"61\":1}}],[\"refreshing\",{\"1\":{\"61\":2}}],[\"refresh\",{\"1\":{\"47\":1,\"85\":2,\"86\":4}}],[\"refreshtokenvalid\",{\"1\":{\"86\":3}}],[\"refreshtoken\",{\"1\":{\"42\":2,\"47\":3,\"61\":4,\"86\":6}}],[\"redistemplate<>\",{\"1\":{\"106\":1}}],[\"redistemplate<string\",{\"1\":{\"106\":2}}],[\"redistemplate\",{\"1\":{\"106\":8}}],[\"redisserializationcontext\",{\"1\":{\"106\":2}}],[\"rediscachemanager\",{\"1\":{\"106\":1}}],[\"rediscacheconfiguration\",{\"1\":{\"106\":2}}],[\"redisconnectionfactory\",{\"1\":{\"106\":4}}],[\"redis\",{\"1\":{\"106\":3},\"2\":{\"110\":1}}],[\"redis<\",{\"1\":{\"105\":1}}],[\"recommend`\",{\"1\":{\"93\":1}}],[\"registry\",{\"1\":{\"86\":6}}],[\"register\",{\"1\":{\"61\":1,\"86\":1}}],[\"req\",{\"1\":{\"73\":1}}],[\"request\",{\"1\":{\"40\":1,\"86\":4,\"135\":1}}],[\"removeeventlistener\",{\"1\":{\"62\":1}}],[\"removeglobalguard\",{\"1\":{\"62\":3}}],[\"result标签的property属性必须与java实体类的属性名一致\",{\"1\":{\"100\":1}}],[\"resultmap的id属性必须与select语句的resultmap一致\",{\"1\":{\"100\":1}}],[\"resultmap=\",{\"1\":{\"91\":1,\"92\":1,\"93\":4,\"99\":1}}],[\"resultmap>\",{\"1\":{\"91\":2,\"92\":2,\"93\":2,\"99\":1}}],[\"resultmap写法如下\",{\"1\":{\"91\":1,\"92\":1,\"93\":1}}],[\"restaurantresultmap\",{\"1\":{\"93\":1}}],[\"restaurantmapper\",{\"1\":{\"93\":1}}],[\"restaurant\",{\"1\":{\"93\":4}}],[\"resources\",{\"1\":{\"86\":3}}],[\"resourcehandlerregistry\",{\"1\":{\"86\":1}}],[\"resp\",{\"1\":{\"73\":1}}],[\"response\",{\"1\":{\"41\":3,\"42\":5,\"47\":3,\"86\":5}}],[\"res\",{\"1\":{\"41\":4,\"57\":2}}],[\"reject\",{\"1\":{\"40\":1,\"41\":2}}],[\"returnvalue\",{\"1\":{\"62\":1}}],[\"return\",{\"1\":{\"40\":1,\"41\":3,\"42\":3,\"57\":1,\"80\":5,\"85\":13,\"86\":4,\"106\":2,\"107\":5,\"127\":4,\"136\":1,\"143\":4}}],[\"replace\",{\"1\":{\"38\":1}}],[\"rewrite\",{\"1\":{\"38\":1}}],[\"runtimeexception\",{\"1\":{\"143\":1}}],[\"run\",{\"1\":{\"25\":1}}],[\"hotelresultmap\",{\"1\":{\"93\":1}}],[\"hotelmapper\",{\"1\":{\"93\":1}}],[\"hotel\",{\"1\":{\"93\":4}}],[\"hope官网介绍\",{\"1\":{\"7\":1}}],[\"html\",{\"1\":{\"86\":4}}],[\"https\",{\"1\":{\"136\":1}}],[\"httpservletresponse\",{\"1\":{\"86\":3}}],[\"httpservletrequest\",{\"1\":{\"86\":1}}],[\"http\",{\"1\":{\"38\":1,\"57\":1}}],[\"hs512\",{\"1\":{\"85\":2}}],[\"handler\",{\"1\":{\"86\":1}}],[\"handlerinterceptor\",{\"1\":{\"86\":1}}],[\"handleavatarupload\",{\"1\":{\"47\":2}}],[\"hashcode这些方法\",{\"1\":{\"68\":1}}],[\"headers=\",{\"1\":{\"47\":1}}],[\"headers\",{\"1\":{\"40\":1}}],[\"首先应该生成一个accesskey\",{\"1\":{\"132\":1}}],[\"首先创建一个阿里账号\",{\"1\":{\"132\":1}}],[\"首先引用官网的原话\",{\"1\":{\"78\":1}}],[\"首先是自定义回调函数\",{\"1\":{\"62\":1}}],[\"首先是uploadimage方法\",{\"1\":{\"57\":1}}],[\"首先在vite\",{\"1\":{\"38\":1}}],[\"首先配置基础路径\",{\"0\":{\"38\":1}}],[\"首先给出我参考的项目地址\",{\"1\":{\"3\":1}}],[\"摸鱼\",{\"2\":{\"33\":1}}],[\"别问\",{\"1\":{\"31\":1}}],[\"怎么玩\",{\"1\":{\"31\":2}}],[\"共同完成一个项目或任务\",{\"1\":{\"30\":1}}],[\"互相帮助\",{\"1\":{\"30\":1}}],[\"也配置了my\",{\"1\":{\"117\":1}}],[\"也能通过合作和交流来提高自己的技能和知识\",{\"1\":{\"30\":1}}],[\"也许\",{\"1\":{\"14\":1}}],[\"小组作业\",{\"2\":{\"33\":1}}],[\"小组作业的弊端\",{\"0\":{\"31\":1}}],[\"小组作业的初衷是为了让同学们在完成课程任务的同时\",{\"1\":{\"30\":1}}],[\"小组作业的初衷\",{\"0\":{\"30\":1}}],[\"小肠\",{\"1\":{\"14\":1}}],[\"神\",{\"0\":{\"29\":1}}],[\"论小组作业为什么是\",{\"0\":{\"29\":1}}],[\"杂谈\",{\"0\":{\"27\":1},\"2\":{\"32\":1}}],[\"成功启动vue项目\",{\"1\":{\"25\":1}}],[\"打开浏览器访问http\",{\"1\":{\"25\":1}}],[\"这串url可以直接访问图片\",{\"1\":{\"136\":1}}],[\"这时\",{\"1\":{\"98\":1}}],[\"这时候会根据id来查询routeitem对象\",{\"1\":{\"92\":1}}],[\"这时候会根据loc\",{\"1\":{\"91\":1}}],[\"这时候我们可以通过<discriminator>标签来实现\",{\"1\":{\"93\":1}}],[\"这时候我们可以通过<collection>标签来实现\",{\"1\":{\"92\":1}}],[\"这时候我们可以通过<association>标签来实现\",{\"1\":{\"91\":1}}],[\"这两个属性需要从user表中获取\",{\"1\":{\"80\":1}}],[\"这么多个o\",{\"1\":{\"73\":1}}],[\"这样就可以获取到代理bean了\",{\"1\":{\"128\":1}}],[\"这样就可以避免精度缺失的问题了\",{\"1\":{\"123\":1}}],[\"这样就大功告成了\",{\"1\":{\"86\":1}}],[\"这样减少开销\",{\"1\":{\"113\":1}}],[\"这样做查询时需要建立表的链接\",{\"1\":{\"112\":1}}],[\"这样做的好处是\",{\"1\":{\"112\":1}}],[\"这样当我们使用像selectall这样的方法的时候可以逐条缓存起来\",{\"1\":{\"107\":1}}],[\"这样\",{\"1\":{\"87\":1}}],[\"这样防止没有token的用户进入保护区域\",{\"1\":{\"61\":1}}],[\"这样在action的时候就会上传文件\",{\"1\":{\"47\":1}}],[\"这里配置你的bucket\",{\"1\":{\"132\":1}}],[\"这里使用的是新人免费\",{\"1\":{\"132\":1}}],[\"这里指的是一个对象中包含多个对象\",{\"1\":{\"92\":1}}],[\"这里指的是一个对象中包含一个对象\",{\"1\":{\"91\":1}}],[\"这里的spotresultmap继承了itemresultmap\",{\"1\":{\"93\":1}}],[\"这里的secret\",{\"1\":{\"85\":1}}],[\"这里的expiration\",{\"1\":{\"85\":1}}],[\"这里是设置过期时间\",{\"1\":{\"136\":1}}],[\"这里是为了按照日期分文件管理\",{\"1\":{\"136\":1}}],[\"这里是基于双token实现的\",{\"1\":{\"61\":1}}],[\"这里是演示所以全选否\",{\"1\":{\"25\":1}}],[\"这里可以写上你的回调函数\",{\"1\":{\"52\":2}}],[\"这个官网里面也有给出\",{\"1\":{\"8\":1}}],[\"这个jquery加载比较慢\",{\"1\":{\"6\":1}}],[\"这个实现在\",{\"1\":{\"6\":1}}],[\"v3\",{\"1\":{\"86\":2}}],[\"val\",{\"1\":{\"107\":2}}],[\"validatetoken\",{\"1\":{\"85\":1}}],[\"values\",{\"1\":{\"106\":1}}],[\"value=\",{\"1\":{\"93\":3}}],[\"value\",{\"1\":{\"42\":2,\"47\":1,\"62\":2,\"107\":3}}],[\"version>\",{\"1\":{\"79\":2,\"134\":1}}],[\"view\",{\"1\":{\"72\":1}}],[\"void\",{\"1\":{\"86\":2,\"107\":5,\"144\":1}}],[\"vo也可以认为是一种dto\",{\"1\":{\"70\":1}}],[\"vo通常用于作为视图层的参数和返回值\",{\"1\":{\"69\":1}}],[\"vo通常用于表示一个视图层的数据\",{\"1\":{\"69\":1}}],[\"vo是view\",{\"1\":{\"69\":1}}],[\"vo\",{\"0\":{\"69\":1,\"72\":1},\"1\":{\"72\":2,\"74\":1}}],[\"v\",{\"1\":{\"47\":2}}],[\"vue\",{\"1\":{\"25\":1,\"56\":1},\"2\":{\"43\":1,\"48\":1,\"53\":1,\"58\":1,\"63\":1}}],[\"vscode\",{\"0\":{\"19\":1,\"23\":1},\"1\":{\"20\":1,\"21\":1,\"24\":1},\"2\":{\"26\":1}}],[\"vscode一条龙服务\",{\"0\":{\"18\":1}}],[\"not\",{\"1\":{\"149\":1}}],[\"no\",{\"1\":{\"127\":1}}],[\"nosuchbeandefinitionexception\",{\"1\":{\"127\":1}}],[\"noargsconstructor\",{\"1\":{\"80\":2}}],[\"nickname\",{\"1\":{\"99\":2}}],[\"num\",{\"1\":{\"143\":6}}],[\"number类型是64位双精度浮点数\",{\"1\":{\"122\":1}}],[\"number`\",{\"1\":{\"93\":4}}],[\"number\",{\"1\":{\"93\":1}}],[\"null\",{\"1\":{\"80\":5,\"85\":6,\"86\":3,\"93\":2,\"106\":1,\"107\":1}}],[\"name\",{\"1\":{\"92\":2,\"93\":2,\"135\":1}}],[\"name=com\",{\"1\":{\"22\":1}}],[\"name=demo\",{\"1\":{\"22\":1}}],[\"nextid\",{\"1\":{\"143\":1,\"144\":1}}],[\"nextint\",{\"1\":{\"136\":1}}],[\"next\",{\"1\":{\"56\":1,\"61\":6,\"62\":4}}],[\"newaccesstoken\",{\"1\":{\"86\":2}}],[\"new\",{\"1\":{\"41\":1,\"57\":1,\"85\":3,\"86\":1,\"106\":3,\"107\":1,\"136\":7,\"143\":3}}],[\"npm\",{\"1\":{\"25\":3,\"37\":1,\"51\":1,\"56\":2}}],[\"创建bucket\",{\"0\":{\"132\":1}}],[\"创建博客时的时间戳\",{\"1\":{\"80\":2}}],[\"创建vue3项目\",{\"0\":{\"25\":1}}],[\"创建springboot项目\",{\"0\":{\"22\":1}}],[\"arraylist<>\",{\"1\":{\"107\":1}}],[\"artifactid>\",{\"1\":{\"79\":2,\"105\":2,\"134\":1}}],[\"as\",{\"1\":{\"93\":7}}],[\"async会导致bean被代理\",{\"1\":{\"128\":1}}],[\"async导致了无法获取\",{\"1\":{\"128\":1}}],[\"asyncexecutor\",{\"1\":{\"107\":2}}],[\"async\",{\"1\":{\"42\":1,\"57\":2,\"61\":1,\"107\":2}}],[\"available\",{\"1\":{\"127\":1}}],[\"avatar\",{\"1\":{\"47\":6,\"99\":2}}],[\"avg\",{\"1\":{\"93\":3}}],[\"avglevel\",{\"1\":{\"93\":1}}],[\"add\",{\"1\":{\"107\":2}}],[\"address\",{\"1\":{\"91\":2}}],[\"addresourcelocations\",{\"1\":{\"86\":3}}],[\"addresourcehandler\",{\"1\":{\"86\":3}}],[\"addresourcehandlers\",{\"1\":{\"86\":1}}],[\"addinterceptor\",{\"1\":{\"86\":1}}],[\"addinterceptors\",{\"1\":{\"86\":1}}],[\"addeventlistener\",{\"1\":{\"62\":1}}],[\"abcdefghijklmnopqrstuvwxyz\",{\"1\":{\"85\":1}}],[\"autowired\",{\"1\":{\"80\":2,\"86\":1,\"107\":3,\"127\":2,\"136\":1,\"144\":1}}],[\"authorization\",{\"1\":{\"40\":1,\"47\":1,\"86\":1}}],[\"algorithm\",{\"1\":{\"140\":1}}],[\"aliyun\",{\"1\":{\"134\":1,\"135\":2}}],[\"allargsconstructor\",{\"1\":{\"80\":2}}],[\"alt\",{\"1\":{\"24\":1,\"132\":1,\"133\":1}}],[\"and\",{\"1\":{\"78\":2}}],[\"a\",{\"1\":{\"78\":2}}],[\"accesskeysecret\",{\"1\":{\"135\":1,\"136\":2}}],[\"accesskeyid\",{\"1\":{\"135\":1,\"136\":2}}],[\"accesskey界面\",{\"1\":{\"132\":1}}],[\"access\",{\"1\":{\"61\":2,\"86\":6,\"135\":2}}],[\"accesstokenvalid\",{\"1\":{\"86\":4}}],[\"accesstoken\",{\"1\":{\"40\":4,\"42\":2,\"61\":4,\"86\":6}}],[\"accseetoken\",{\"1\":{\"47\":1}}],[\"action=\",{\"1\":{\"47\":1}}],[\"await\",{\"1\":{\"42\":1,\"57\":2,\"61\":1}}],[\"approach\",{\"1\":{\"78\":1}}],[\"append\",{\"1\":{\"57\":1}}],[\"applicationcontext\",{\"1\":{\"127\":4}}],[\"application\",{\"1\":{\"22\":1}}],[\"api\",{\"1\":{\"38\":4,\"47\":1,\"86\":5,\"87\":1}}],[\"axios\",{\"1\":{\"37\":1,\"38\":3},\"2\":{\"44\":1}}],[\"axios的拦截器和请求器\",{\"0\":{\"36\":1}}],[\"默认已经安装了node\",{\"1\":{\"23\":1}}],[\"默认已经安装了jdk\",{\"1\":{\"19\":1}}],[\"启动vue3项目\",{\"0\":{\"23\":1}}],[\"启动项目\",{\"1\":{\"22\":1}}],[\"启动springboot项目\",{\"0\":{\"19\":1}}],[\"点击run启动项目\",{\"1\":{\"22\":1}}],[\"duration\",{\"1\":{\"106\":1}}],[\"discriminator>\",{\"1\":{\"93\":1}}],[\"docs\",{\"1\":{\"86\":2}}],[\"doc\",{\"1\":{\"86\":2}}],[\"date\",{\"1\":{\"85\":3,\"136\":3}}],[\"datacenterid\",{\"1\":{\"143\":8}}],[\"datacenter\",{\"1\":{\"143\":9}}],[\"database\",{\"1\":{\"106\":1}}],[\"data\",{\"1\":{\"41\":1,\"42\":6,\"47\":1,\"52\":4,\"57\":11,\"72\":1,\"80\":2,\"86\":1,\"105\":1,\"106\":1,\"135\":1}}],[\"datasource\",{\"1\":{\"22\":4}}],[\"day\",{\"1\":{\"85\":1}}],[\"dao\",{\"1\":{\"74\":1}}],[\"dto通常用于作为数据传输对象\",{\"1\":{\"70\":1}}],[\"dto通常用于表示一个业务实体\",{\"1\":{\"70\":1}}],[\"dto是data\",{\"1\":{\"70\":1}}],[\"dto\",{\"0\":{\"70\":1,\"72\":1},\"1\":{\"70\":1,\"71\":1,\"72\":2,\"73\":1,\"74\":1}}],[\"deletebyid\",{\"1\":{\"107\":1}}],[\"deleteuser\",{\"1\":{\"107\":1}}],[\"desc\",{\"1\":{\"93\":1}}],[\"description\",{\"1\":{\"80\":19,\"93\":1}}],[\"dependency>\",{\"1\":{\"79\":2,\"105\":2,\"134\":1}}],[\"defaultcacheconfig\",{\"1\":{\"106\":1}}],[\"defaultvalue\",{\"1\":{\"80\":2}}],[\"default\",{\"1\":{\"52\":1,\"117\":1}}],[\"dev\",{\"1\":{\"25\":1}}],[\"driver\",{\"1\":{\"22\":2}}],[\"uuid的无序性会导致查询效率低下\",{\"1\":{\"141\":1}}],[\"updateevent\",{\"1\":{\"107\":2}}],[\"updatebyid\",{\"1\":{\"107\":1}}],[\"updateuser\",{\"1\":{\"107\":1}}],[\"upload>\",{\"1\":{\"47\":1}}],[\"uploadheaders\",{\"1\":{\"47\":2}}],[\"uploadimage\",{\"1\":{\"47\":1,\"57\":5,\"136\":1}}],[\"uploader\",{\"1\":{\"47\":2}}],[\"upload\",{\"1\":{\"46\":2,\"47\":1},\"2\":{\"49\":1}}],[\"upload上传两次问题\",{\"0\":{\"45\":1}}],[\"utf\",{\"1\":{\"106\":3}}],[\"util\",{\"1\":{\"52\":2}}],[\"ui\",{\"1\":{\"86\":2}}],[\"unauthorized\",{\"1\":{\"86\":1}}],[\"understand\",{\"1\":{\"78\":1}}],[\"url\",{\"1\":{\"57\":1,\"136\":3}}],[\"url=jdbc\",{\"1\":{\"22\":1}}],[\"uses\",{\"1\":{\"78\":1}}],[\"useimage\",{\"1\":{\"57\":1}}],[\"users\",{\"1\":{\"107\":4}}],[\"usercacheservice\",{\"1\":{\"107\":4}}],[\"usermapper\",{\"1\":{\"107\":7}}],[\"userresultmap\",{\"1\":{\"99\":2}}],[\"usernickname\",{\"1\":{\"80\":10}}],[\"username\",{\"1\":{\"80\":3}}],[\"username=root\",{\"1\":{\"22\":1}}],[\"useravatar\",{\"1\":{\"80\":13}}],[\"userid\",{\"1\":{\"80\":3,\"107\":2}}],[\"user\",{\"1\":{\"42\":2,\"99\":2,\"107\":26}}],[\"use\",{\"1\":{\"40\":1,\"41\":1}}],[\"t\",{\"1\":{\"127\":3,\"143\":2}}],[\"timestmp\",{\"1\":{\"143\":2}}],[\"timestamp\",{\"1\":{\"80\":2,\"118\":1}}],[\"timeout\",{\"1\":{\"106\":2}}],[\"time也是固定的\",{\"1\":{\"85\":1}}],[\"time和refresh\",{\"1\":{\"85\":1}}],[\"time\",{\"1\":{\"85\":4,\"106\":1,\"117\":1}}],[\"timezone=\",{\"1\":{\"80\":2,\"118\":1}}],[\"title\",{\"1\":{\"80\":3}}],[\"type属性必须与java实体类的全限定名一致\",{\"1\":{\"100\":1}}],[\"type`\",{\"1\":{\"93\":1}}],[\"type=\",{\"1\":{\"91\":2,\"92\":2,\"93\":2,\"99\":1}}],[\"type\",{\"1\":{\"78\":1,\"93\":2,\"106\":1,\"127\":1}}],[\"types\",{\"1\":{\"78\":1}}],[\"this\",{\"1\":{\"143\":2}}],[\"than\",{\"1\":{\"143\":4}}],[\"that\",{\"1\":{\"78\":1}}],[\"throw\",{\"1\":{\"143\":3}}],[\"throws\",{\"1\":{\"86\":1,\"136\":1}}],[\"thus\",{\"1\":{\"78\":1}}],[\"then\",{\"1\":{\"93\":6}}],[\"the\",{\"1\":{\"78\":2}}],[\"theme\",{\"1\":{\"7\":1,\"52\":3}}],[\"toblogresp\",{\"1\":{\"80\":4}}],[\"tostring\",{\"1\":{\"68\":1,\"136\":1}}],[\"to\",{\"1\":{\"61\":3,\"62\":1,\"78\":1,\"106\":1,\"143\":1}}],[\"token中包含的信息\",{\"1\":{\"85\":3}}],[\"token\",{\"1\":{\"47\":3,\"61\":2,\"85\":15,\"86\":11}}],[\"tokens\",{\"1\":{\"42\":2}}],[\"transactionaware\",{\"1\":{\"106\":1}}],[\"transfer\",{\"1\":{\"70\":1,\"72\":1}}],[\"try\",{\"1\":{\"42\":1,\"57\":1,\"61\":1,\"85\":1}}],[\"true\",{\"1\":{\"38\":1,\"42\":1,\"57\":1,\"85\":2,\"86\":2}}],[\"target\",{\"1\":{\"38\":1,\"80\":2}}],[\"text\",{\"1\":{\"24\":1,\"57\":1,\"132\":1,\"133\":1}}],[\"testdb1\",{\"1\":{\"22\":1}}],[\"laststmp\",{\"1\":{\"143\":5}}],[\"lastindexof\",{\"1\":{\"136\":1}}],[\"latitude\",{\"1\":{\"91\":2}}],[\"latest\",{\"1\":{\"25\":1}}],[\"less\",{\"1\":{\"143\":2}}],[\"left\",{\"1\":{\"93\":3,\"143\":7}}],[\"level`\",{\"1\":{\"93\":4}}],[\"level\",{\"1\":{\"93\":1}}],[\"length\",{\"1\":{\"61\":1}}],[\"list<long>\",{\"1\":{\"107\":1}}],[\"list<user>\",{\"1\":{\"107\":2}}],[\"list=\",{\"1\":{\"47\":1}}],[\"live\",{\"1\":{\"106\":1}}],[\"live2d的使用\",{\"0\":{\"8\":1}}],[\"long精度缺失\",{\"2\":{\"125\":1}}],[\"long类型是64位有符号整数\",{\"1\":{\"122\":1}}],[\"longitude\",{\"1\":{\"91\":2}}],[\"long\",{\"1\":{\"80\":4,\"85\":2,\"107\":5,\"123\":1,\"143\":21,\"144\":1}}],[\"loading\",{\"1\":{\"57\":1}}],[\"loadinginstance\",{\"1\":{\"57\":2}}],[\"loc\",{\"1\":{\"91\":1,\"92\":1}}],[\"locationresultmap\",{\"1\":{\"91\":1}}],[\"locationmapper\",{\"1\":{\"91\":2,\"92\":1}}],[\"location\",{\"1\":{\"91\":2,\"92\":1}}],[\"localstorage\",{\"1\":{\"40\":1,\"42\":2,\"47\":2,\"61\":2}}],[\"localhost\",{\"1\":{\"22\":1,\"25\":1,\"38\":1}}],[\"lock\",{\"1\":{\"57\":1}}],[\"logininterceptor\",{\"1\":{\"86\":4}}],[\"login\",{\"1\":{\"42\":2,\"61\":3,\"86\":1}}],[\"log\",{\"1\":{\"41\":1,\"47\":1,\"52\":2,\"57\":1,\"61\":1}}],[\"设置公开读后\",{\"1\":{\"136\":1}}],[\"设置公开读写\",{\"0\":{\"133\":1}}],[\"设置vue项目\",{\"1\":{\"25\":1}}],[\"设置项目\",{\"1\":{\"25\":1}}],[\"设置项目名称\",{\"1\":{\"22\":1}}],[\"设置java版本\",{\"1\":{\"22\":1}}],[\"设置域名\",{\"1\":{\"22\":1}}],[\"输入以下命令\",{\"1\":{\"25\":1}}],[\"输入\",{\"1\":{\"25\":1}}],[\"输入项目名称\",{\"1\":{\"22\":1}}],[\"输入域名\",{\"1\":{\"22\":1}}],[\"输入java\",{\"1\":{\"22\":1}}],[\"选择依赖\",{\"1\":{\"22\":1}}],[\"选择java版本\",{\"1\":{\"22\":1}}],[\"选择java为开发语言\",{\"1\":{\"22\":2}}],[\"选择jar为打包方式\",{\"1\":{\"22\":2}}],[\"选择maven\",{\"1\":{\"22\":2}}],[\"选择springboot版本\",{\"1\":{\"22\":2}}],[\"选择spring\",{\"1\":{\"22\":2}}],[\"c表存储自己独特的字段\",{\"1\":{\"112\":1}}],[\"c建立一张表\",{\"1\":{\"112\":1}}],[\"c继承a\",{\"1\":{\"112\":2}}],[\"can\",{\"1\":{\"143\":2}}],[\"cacheevict\",{\"1\":{\"107\":1}}],[\"cacheput\",{\"1\":{\"107\":1}}],[\"cacheable\",{\"1\":{\"107\":1}}],[\"cachedefaults\",{\"1\":{\"106\":1}}],[\"cachemanager\",{\"1\":{\"106\":2,\"107\":5}}],[\"cacheconfig\",{\"1\":{\"106\":1}}],[\"cache\",{\"1\":{\"106\":2,\"107\":12}}],[\"cache<\",{\"1\":{\"105\":1}}],[\"case\",{\"1\":{\"93\":2}}],[\"catch\",{\"1\":{\"42\":1,\"57\":1,\"61\":1,\"85\":1}}],[\"currstmp\",{\"1\":{\"143\":6}}],[\"currenttimemillis\",{\"1\":{\"85\":2,\"136\":2,\"143\":1}}],[\"customupload\",{\"1\":{\"57\":1}}],[\"clock\",{\"1\":{\"143\":1}}],[\"close\",{\"1\":{\"57\":1}}],[\"clear\",{\"1\":{\"107\":1}}],[\"clearcache\",{\"1\":{\"107\":2}}],[\"claims\",{\"1\":{\"85\":11}}],[\"class<t>\",{\"1\":{\"127\":1}}],[\"classpath\",{\"1\":{\"86\":3}}],[\"class=\",{\"1\":{\"47\":2}}],[\"class\",{\"1\":{\"22\":1,\"80\":4,\"85\":1,\"86\":2,\"106\":1,\"107\":2,\"127\":2,\"135\":1,\"136\":1,\"143\":1}}],[\"change\",{\"1\":{\"46\":1}}],[\"changeorigin\",{\"1\":{\"38\":1}}],[\"column属性必须与数据库字段名一致\",{\"1\":{\"100\":2}}],[\"column=\",{\"1\":{\"91\":7,\"92\":6,\"93\":7,\"99\":7}}],[\"compact\",{\"1\":{\"85\":2}}],[\"component\",{\"1\":{\"80\":2,\"85\":1,\"86\":1,\"127\":1,\"143\":1}}],[\"componentmodel\",{\"1\":{\"80\":2}}],[\"com\",{\"1\":{\"57\":1,\"91\":1,\"92\":2,\"93\":4}}],[\"code\",{\"1\":{\"41\":1,\"42\":1,\"57\":1,\"78\":2,\"85\":4,\"86\":1}}],[\"connectionfactory\",{\"1\":{\"106\":2}}],[\"connect\",{\"1\":{\"106\":1}}],[\"convertblogtoresp\",{\"1\":{\"80\":2}}],[\"convention\",{\"1\":{\"78\":1}}],[\"content\",{\"1\":{\"80\":3}}],[\"confirm\",{\"1\":{\"62\":1}}],[\"configurationproperties\",{\"1\":{\"135\":1}}],[\"configuration\",{\"1\":{\"78\":1,\"86\":1,\"106\":1,\"135\":1}}],[\"config\",{\"1\":{\"38\":1,\"40\":3,\"86\":1,\"106\":2}}],[\"conf\",{\"1\":{\"57\":1}}],[\"console\",{\"1\":{\"41\":1,\"42\":1,\"47\":1,\"52\":2,\"57\":1,\"61\":2}}],[\"constructor\",{\"1\":{\"68\":1}}],[\"const\",{\"1\":{\"38\":1,\"40\":1,\"41\":1,\"42\":1,\"47\":3,\"52\":1,\"57\":5,\"61\":4,\"62\":1}}],[\"ctm\",{\"1\":{\"31\":1}}],[\"ctrl\",{\"1\":{\"22\":1}}],[\"cd\",{\"1\":{\"25\":1}}],[\"cj\",{\"1\":{\"22\":1}}],[\"createat\",{\"1\":{\"80\":3,\"118\":1}}],[\"create创建一个axios实例\",{\"1\":{\"38\":1}}],[\"create\",{\"1\":{\"22\":2,\"25\":1,\"38\":1}}],[\"+8\",{\"1\":{\"117\":1}}],[\"+\",{\"1\":{\"22\":2,\"25\":1,\"41\":1,\"85\":2,\"107\":2,\"136\":11,\"143\":3}}],[\"按住ctrl\",{\"1\":{\"25\":1}}],[\"按住\",{\"1\":{\"22\":1}}],[\"按照vuepress\",{\"1\":{\"7\":1}}],[\"synchronized\",{\"1\":{\"143\":1}}],[\"system\",{\"1\":{\"85\":2,\"136\":2,\"143\":1,\"144\":1}}],[\"snowflake\",{\"1\":{\"140\":1,\"143\":3,\"144\":3}}],[\"sdf\",{\"1\":{\"136\":2}}],[\"sdk\",{\"1\":{\"134\":1}}],[\"swagger\",{\"1\":{\"86\":3}}],[\"suffixname\",{\"1\":{\"136\":2}}],[\"substring\",{\"1\":{\"86\":1,\"136\":1}}],[\"success=\",{\"1\":{\"47\":1}}],[\"success\",{\"1\":{\"42\":1,\"57\":1}}],[\"stmp\",{\"1\":{\"143\":2}}],[\"stu\",{\"1\":{\"91\":1,\"92\":2,\"93\":4}}],[\"start\",{\"1\":{\"143\":2}}],[\"starter\",{\"1\":{\"105\":2}}],[\"startswith\",{\"1\":{\"86\":1}}],[\"star\",{\"1\":{\"93\":1}}],[\"starnumber\",{\"1\":{\"93\":1}}],[\"static\",{\"1\":{\"85\":9,\"143\":10}}],[\"stringredisserializer\",{\"1\":{\"106\":3}}],[\"string\",{\"1\":{\"80\":20,\"85\":12,\"86\":4,\"93\":1,\"107\":2,\"123\":1,\"127\":1,\"135\":4,\"136\":11}}],[\"source\",{\"1\":{\"80\":2}}],[\"sc\",{\"1\":{\"86\":2}}],[\"schema\",{\"1\":{\"80\":16}}],[\"scope>\",{\"1\":{\"79\":1}}],[\"safe\",{\"1\":{\"78\":1}}],[\"save\",{\"1\":{\"56\":2}}],[\"simpledateformat\",{\"1\":{\"136\":2}}],[\"simplifies\",{\"1\":{\"78\":1}}],[\"size\",{\"1\":{\"135\":2}}],[\"size=\",{\"1\":{\"47\":1}}],[\"signaturealgorithm\",{\"1\":{\"85\":2}}],[\"signwith\",{\"1\":{\"85\":2}}],[\"spotresultmap\",{\"1\":{\"93\":2}}],[\"spotmapper\",{\"1\":{\"93\":2}}],[\"spot\",{\"1\":{\"93\":4}}],[\"spinner\",{\"1\":{\"57\":1}}],[\"springcache\",{\"2\":{\"110\":1}}],[\"springcache结合redis\",{\"0\":{\"104\":1}}],[\"springframework\",{\"1\":{\"105\":2,\"127\":1}}],[\"spring\",{\"1\":{\"22\":5,\"80\":4,\"87\":1,\"106\":1,\"135\":1}}],[\"spring插件\",{\"1\":{\"21\":1}}],[\"src=\",{\"1\":{\"47\":1}}],[\"shutdown\",{\"1\":{\"136\":1}}],[\"shape\",{\"1\":{\"80\":8,\"123\":2}}],[\"show\",{\"1\":{\"47\":1}}],[\"shift\",{\"1\":{\"22\":1}}],[\"sequence\",{\"1\":{\"143\":12}}],[\"securerandom\",{\"1\":{\"136\":1}}],[\"secret\",{\"1\":{\"85\":4,\"135\":1}}],[\"serializevalueswith\",{\"1\":{\"106\":1}}],[\"serializekeyswith\",{\"1\":{\"106\":1}}],[\"serializationpair\",{\"1\":{\"106\":2}}],[\"servlet\",{\"1\":{\"135\":1}}],[\"servicename\",{\"1\":{\"127\":3}}],[\"serviceclass\",{\"1\":{\"127\":3}}],[\"servicefactory\",{\"1\":{\"127\":4}}],[\"service\",{\"1\":{\"38\":1,\"40\":1,\"41\":1,\"42\":1,\"57\":2,\"107\":1,\"136\":1}}],[\"server\",{\"1\":{\"38\":1}}],[\"selectbyid\",{\"1\":{\"107\":1}}],[\"select>\",{\"1\":{\"91\":1,\"92\":1,\"93\":1,\"99\":1}}],[\"select\",{\"1\":{\"91\":1,\"92\":1,\"93\":2,\"99\":1}}],[\"select=\",{\"1\":{\"91\":1,\"92\":2}}],[\"setcontenttype\",{\"1\":{\"136\":1}}],[\"setconnectionfactory\",{\"1\":{\"106\":1}}],[\"sethashvalueserializer\",{\"1\":{\"106\":1}}],[\"sethashkeyserializer\",{\"1\":{\"106\":1}}],[\"setheader\",{\"1\":{\"86\":1}}],[\"setvalueserializer\",{\"1\":{\"106\":1}}],[\"setkeyserializer\",{\"1\":{\"106\":1}}],[\"setstatus\",{\"1\":{\"86\":2}}],[\"setsigningkey\",{\"1\":{\"85\":1}}],[\"setsubject\",{\"1\":{\"85\":2}}],[\"setexpiration\",{\"1\":{\"85\":2}}],[\"setter\",{\"1\":{\"68\":1}}],[\"setitem\",{\"1\":{\"42\":2}}],[\"search\",{\"1\":{\"9\":1}}],[\"安装\",{\"0\":{\"51\":1,\"56\":1}}],[\"安装axios\",{\"0\":{\"37\":1}}],[\"安装vue插件\",{\"0\":{\"24\":1}}],[\"安装springboot插件\",{\"0\":{\"21\":1}}],[\"安装java插件\",{\"0\":{\"20\":1}}],[\"join\",{\"1\":{\"93\":3}}],[\"jwt\",{\"1\":{\"87\":4},\"2\":{\"89\":1}}],[\"jwtexception\",{\"1\":{\"85\":1}}],[\"jwts\",{\"1\":{\"85\":3}}],[\"jwtutil\",{\"1\":{\"85\":1,\"86\":4}}],[\"jwt的粗略实现\",{\"0\":{\"84\":1}}],[\"jpg\",{\"1\":{\"57\":1,\"136\":1}}],[\"j打开命令行窗口\",{\"1\":{\"25\":1}}],[\"jdbc\",{\"1\":{\"22\":1}}],[\"javatype=\",{\"1\":{\"93\":1}}],[\"java类之间的转换\",{\"0\":{\"77\":1}}],[\"java的各种o\",{\"2\":{\"76\":1}}],[\"java的多个o\",{\"0\":{\"67\":1}}],[\"java\",{\"1\":{\"22\":3,\"68\":1,\"72\":1,\"78\":1},\"2\":{\"75\":1,\"82\":1,\"88\":1,\"109\":1,\"124\":1,\"129\":1,\"137\":1}}],[\"java插件\",{\"1\":{\"20\":1}}],[\"jsonformat注解\",{\"1\":{\"123\":1}}],[\"jsonformat\",{\"1\":{\"80\":10,\"118\":1,\"123\":2}}],[\"js中\",{\"1\":{\"61\":1}}],[\"js中配置基础路径\",{\"1\":{\"38\":1}}],[\"js\",{\"1\":{\"6\":2,\"23\":1,\"52\":2}}],[\"没有固定的规则\",{\"1\":{\"73\":1}}],[\"没有其他的方法\",{\"1\":{\"68\":1}}],[\"没有包含任何第三方库的依赖\",{\"1\":{\"68\":1}}],[\"没有包含任何网络通信\",{\"1\":{\"68\":1}}],[\"没有包含任何数据库操作\",{\"1\":{\"68\":1}}],[\"没有包含任何业务逻辑\",{\"1\":{\"68\":1}}],[\"没有使用任何注解\",{\"1\":{\"68\":1}}],[\"没有实现任何接口\",{\"1\":{\"68\":1}}],[\"没有继承任何类\",{\"1\":{\"68\":1}}],[\"没有配置数据库启动不了\",{\"1\":{\"22\":1}}],[\"没装的可以上网搜教程\",{\"1\":{\"19\":1,\"23\":1}}],[\"没办法太菜了bushi\",{\"1\":{\"3\":1}}],[\"multipartfile\",{\"1\":{\"136\":4}}],[\"multipart\",{\"1\":{\"135\":1}}],[\"mybatis的字段匹配问题\",{\"2\":{\"103\":1}}],[\"mybatis的复杂查询主要通过<resultmap>标签来实现\",{\"1\":{\"94\":1}}],[\"mybatis字段类型不匹配解决\",{\"0\":{\"97\":1}}],[\"mybatis\",{\"2\":{\"95\":1,\"102\":1}}],[\"mybatis复杂sql查询\",{\"0\":{\"90\":1}}],[\"mysql\",{\"1\":{\"22\":2}}],[\"mill\",{\"1\":{\"143\":4}}],[\"minutes\",{\"1\":{\"85\":1}}],[\"mitt\",{\"0\":{\"50\":1},\"1\":{\"51\":1,\"52\":3},\"2\":{\"54\":1}}],[\"machineid\",{\"1\":{\"143\":8}}],[\"machine\",{\"1\":{\"143\":8}}],[\"max\",{\"1\":{\"135\":2,\"143\":8}}],[\"mapper注解用于标识这是一个mapstruct的映射接口\",{\"1\":{\"80\":1}}],[\"mappers\",{\"1\":{\"80\":1}}],[\"mapper\",{\"1\":{\"80\":1,\"91\":1,\"92\":2,\"93\":4}}],[\"mapping注解用于定义具体的映射规则\",{\"1\":{\"80\":1}}],[\"mapping\",{\"1\":{\"78\":1,\"80\":2}}],[\"mappings注解用于定义映射规则\",{\"1\":{\"80\":1}}],[\"mappings\",{\"1\":{\"78\":1,\"80\":1}}],[\"mapstruct<\",{\"1\":{\"79\":2}}],[\"mapstruct是一个用于java类之间的转换的工具\",{\"1\":{\"81\":1}}],[\"mapstruct是一个代码生成器\",{\"1\":{\"78\":1}}],[\"mapstruct是什么\",{\"0\":{\"78\":1}}],[\"mapstruct\",{\"1\":{\"78\":1},\"2\":{\"83\":1}}],[\"mapstruct的使用\",{\"0\":{\"77\":1}}],[\"maven坐标如下\",{\"1\":{\"79\":1,\"134\":1}}],[\"maven引入\",{\"0\":{\"79\":1}}],[\"maven\",{\"1\":{\"19\":1}}],[\"meta\",{\"1\":{\"86\":3}}],[\"method\",{\"1\":{\"78\":1}}],[\"menu\",{\"1\":{\"57\":1}}],[\"message\",{\"1\":{\"41\":1,\"52\":1,\"86\":1}}],[\"msg\",{\"1\":{\"42\":1,\"57\":1}}],[\"moved\",{\"1\":{\"143\":1}}],[\"mo7cc开源\",{\"1\":{\"11\":1}}],[\"mouseeffect\",{\"1\":{\"6\":1}}],[\"技术\",{\"0\":{\"16\":1}}],[\"人还是要积极乐观的不是吗\",{\"1\":{\"14\":1}}],[\"人生无常\",{\"1\":{\"14\":1}}],[\"好吧\",{\"1\":{\"14\":1}}],[\"莫劝他人善\",{\"1\":{\"14\":1}}],[\"未经他人苦\",{\"1\":{\"14\":1}}],[\"可能会导致生成的id重复\",{\"1\":{\"145\":1}}],[\"可能看到我的网站的人觉得我是个衰鬼\",{\"1\":{\"14\":1}}],[\"可以支持更多的数据中心和机器\",{\"1\":{\"146\":1}}],[\"可以在代码中添加时间回拨的处理逻辑\",{\"1\":{\"145\":1}}],[\"可以在概览中查到\",{\"1\":{\"135\":1}}],[\"可以添加以下配置\",{\"1\":{\"135\":1}}],[\"可以看到我配置了时区\",{\"1\":{\"117\":1}}],[\"可以看出多了两个属性\",{\"1\":{\"80\":1}}],[\"可以存成两张表\",{\"1\":{\"113\":1}}],[\"可以使用cachemanager来获取cache\",{\"1\":{\"107\":1}}],[\"可以理解为controller层返回的resp对象\",{\"1\":{\"69\":1}}],[\"可以刷新一下\",{\"1\":{\"6\":1}}],[\"所以符号位固定为0\",{\"1\":{\"142\":1}}],[\"所以我的解决方案是通过bean的名称获取bean\",{\"1\":{\"128\":1}}],[\"所以我把音乐存在本地\",{\"1\":{\"10\":1}}],[\"所以无法获取\",{\"1\":{\"128\":1}}],[\"所以大家可以根据自己的业务场景来划分\",{\"1\":{\"73\":1}}],[\"所以按照现在前后分离的思想来看\",{\"1\":{\"70\":1}}],[\"所以说我就是牛马本马\",{\"1\":{\"31\":1}}],[\"所以只能走全栈\",{\"1\":{\"13\":1}}],[\"开个玩笑\",{\"1\":{\"13\":1}}],[\"😎\",{\"1\":{\"13\":1,\"14\":1,\"31\":2}}],[\"什么\",{\"1\":{\"13\":1}}],[\"如你所见\",{\"1\":{\"13\":1}}],[\"如果系统时间回拨\",{\"1\":{\"145\":1}}],[\"如果只是简单地缓存实现\",{\"1\":{\"108\":1}}],[\"如果你需要设置上传的文件大小\",{\"1\":{\"135\":1}}],[\"如果你想编程式缓存\",{\"1\":{\"107\":1}}],[\"如果你是大牛\",{\"1\":{\"7\":1}}],[\"如果\",{\"1\":{\"86\":2}}],[\"如果没有componentmodel\",{\"1\":{\"80\":1}}],[\"如果搜索不到\",{\"1\":{\"9\":1}}],[\"如果鼠标点击没有特效\",{\"1\":{\"6\":1}}],[\"欢迎访问我的个人网站\",{\"1\":{\"13\":1}}],[\"你的bucketname\",{\"1\":{\"135\":1}}],[\"你的end\",{\"1\":{\"135\":1}}],[\"你的目录\",{\"1\":{\"25\":1}}],[\"你访问的url是有时间限制的\",{\"1\":{\"133\":1}}],[\"你问我为什么要走全栈\",{\"1\":{\"13\":1}}],[\"你好\",{\"1\":{\"13\":1}}],[\"你可以直接在iconfont建立自己的图标\",{\"1\":{\"7\":1}}],[\"感谢开源社区\",{\"1\":{\"11\":1}}],[\"感谢作者\",{\"1\":{\"11\":1}}],[\"感谢作者开源\",{\"1\":{\"3\":1}}],[\"感谢\",{\"0\":{\"11\":1}}],[\"音乐插件\",{\"0\":{\"10\":1}}],[\"具体几个月忘记了\",{\"1\":{\"132\":1}}],[\"具体请参阅关于本站\",{\"1\":{\"15\":1}}],[\"具体使用方法请参照官网\",{\"1\":{\"9\":1}}],[\"具体可以参照官网\",{\"1\":{\"8\":1}}],[\"putobject\",{\"1\":{\"136\":1}}],[\"put\",{\"1\":{\"107\":1}}],[\"public\",{\"1\":{\"6\":1,\"80\":8,\"85\":7,\"86\":5,\"106\":3,\"107\":9,\"127\":3,\"135\":1,\"136\":2,\"143\":4,\"144\":1}}],[\"pwd\",{\"1\":{\"99\":1}}],[\"persistent\",{\"1\":{\"72\":1}}],[\"plain\",{\"1\":{\"72\":1,\"78\":1}}],[\"plus\",{\"1\":{\"47\":1},\"2\":{\"49\":1}}],[\"plugin\",{\"1\":{\"9\":1}}],[\"point\",{\"1\":{\"135\":2}}],[\"port\",{\"1\":{\"106\":1}}],[\"po都是java中常用的对象类型\",{\"1\":{\"72\":1}}],[\"po的区别\",{\"0\":{\"72\":1}}],[\"po通常用于作为数据传输对象\",{\"1\":{\"71\":1}}],[\"po通常用于表示一个数据库表中的一条记录\",{\"1\":{\"71\":1}}],[\"po是persistent\",{\"1\":{\"71\":1}}],[\"po\",{\"0\":{\"71\":1},\"1\":{\"72\":1,\"73\":1,\"74\":1}}],[\"pojo是plain\",{\"1\":{\"68\":1}}],[\"pojo\",{\"0\":{\"68\":1,\"72\":1},\"1\":{\"72\":2}}],[\"post\",{\"1\":{\"42\":1,\"57\":1}}],[\"println\",{\"1\":{\"144\":1}}],[\"price`\",{\"1\":{\"93\":4}}],[\"private\",{\"1\":{\"80\":15,\"85\":3,\"86\":1,\"107\":3,\"118\":1,\"123\":1,\"127\":2,\"135\":4,\"136\":1,\"143\":16,\"144\":1}}],[\"prefix\",{\"1\":{\"135\":1}}],[\"prehandle\",{\"1\":{\"86\":1}}],[\"preventdefault\",{\"1\":{\"62\":1}}],[\"property=\",{\"1\":{\"91\":7,\"92\":6,\"93\":6,\"99\":7}}],[\"properties中设置数据库连接信息\",{\"1\":{\"22\":1}}],[\"processor<\",{\"1\":{\"79\":1}}],[\"promise\",{\"1\":{\"40\":1,\"41\":2}}],[\"proxy\",{\"1\":{\"38\":1}}],[\"project\",{\"1\":{\"22\":2}}],[\"pro插件\",{\"1\":{\"9\":1}}],[\"phone\",{\"1\":{\"42\":2,\"99\":2}}],[\"parseclaimsjws\",{\"1\":{\"85\":1}}],[\"parser\",{\"1\":{\"85\":1}}],[\"param\",{\"1\":{\"80\":3,\"85\":7,\"107\":2,\"127\":4}}],[\"password\",{\"1\":{\"42\":2,\"99\":1}}],[\"password=123456\",{\"1\":{\"22\":1}}],[\"path\",{\"1\":{\"38\":2,\"61\":2}}],[\"p\",{\"1\":{\"22\":1}}],[\"搜索\",{\"0\":{\"9\":1}}],[\"我设置为低频访问和本地冗余\",{\"1\":{\"132\":1}}],[\"我去检查了一下发现这个bean确实存在\",{\"1\":{\"128\":1}}],[\"我们有以下集中存储方式\",{\"1\":{\"113\":1}}],[\"我们一般有两种存储方式\",{\"1\":{\"112\":1}}],[\"我们可以将数据库字段类型与java实体类属性类型进行映射\",{\"1\":{\"101\":1}}],[\"我们需要在mybatis的xml文件设置resultmap\",{\"1\":{\"98\":1}}],[\"我们经常会遇到数据库字段类型与java实体类属性类型不匹配的问题\",{\"1\":{\"98\":1}}],[\"我们就可以在项目中使用\",{\"1\":{\"87\":1}}],[\"我们实现了一个简单的\",{\"1\":{\"87\":1}}],[\"我们只需要定义一个接口\",{\"1\":{\"80\":1}}],[\"我的mysql是通过压缩包安装的\",{\"1\":{\"117\":1}}],[\"我的网站就是我的\",{\"1\":{\"14\":1}}],[\"我的目标是成为一名全栈工程师\",{\"1\":{\"13\":1}}],[\"我只是比较笨\",{\"1\":{\"13\":1}}],[\"我是一个正在努力前行的小牛马\",{\"1\":{\"13\":1}}],[\"我叫carmen\",{\"1\":{\"13\":1}}],[\"我这里父类和子类的表是分开的\",{\"1\":{\"93\":1}}],[\"我这里就不赘述了\",{\"1\":{\"8\":1}}],[\"我这个只是拙劣的模仿\",{\"1\":{\"4\":1}}],[\"我就不赘述了\",{\"1\":{\"6\":1}}],[\"鼠标点击特效\",{\"0\":{\"6\":1}}],[\"说明\",{\"0\":{\"5\":1}}],[\"本站搜索功能可能存在一些问题\",{\"1\":{\"9\":1}}],[\"本站使用vuepress\",{\"1\":{\"9\":1}}],[\"本站使用的是live2d插件\",{\"1\":{\"8\":1}}],[\"本站采用fontawesome图标\",{\"1\":{\"7\":1}}],[\"本站仓库地址\",{\"0\":{\"4\":1}}],[\"本站几乎全部参考这个项目\",{\"1\":{\"3\":1}}],[\"目录\",{\"2\":{\"1\":1,\"17\":1,\"28\":1,\"35\":1,\"66\":1}}],[\"关于long传入前端精度缺失的解决方案\",{\"0\":{\"121\":1}}],[\"关于java读取数据库的时区问题\",{\"0\":{\"116\":1}}],[\"关于建站\",{\"0\":{\"15\":1}}],[\"关于本站\",{\"0\":{\"14\":1}}],[\"关于本站搭建\",{\"0\":{\"2\":1}}],[\"关于我\",{\"0\":{\"12\":1}}],[\"关于我和关于本站\",{\"1\":{\"0\":1}}],[\"关于\",{\"0\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
