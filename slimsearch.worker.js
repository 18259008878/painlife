const{entries:$}=Object,{fromEntries:et}=Object,st="ENTRIES",D="KEYS",W="VALUES",_="";class S{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=b(this._path);if(b(s)===_)return{done:!1,value:this.result()};const n=t.get(b(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=b(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>b(t)).filter(t=>t!==_).join("")}value(){return b(this._path).node.get(_)}result(){switch(this._type){case W:return this.value();case D:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const b=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,r=o+s,c=new Uint8Array(r*o).fill(s+1);for(let i=0;i<o;++i)c[i]=i;for(let i=1;i<r;++i)c[i*o]=i;return q(e,t,s,n,c,1,o,""),n},q=(e,t,s,n,o,r,c,i)=>{const h=r*c;t:for(const u of e.keys())if(u===_){const l=o[h-1];l<=s&&n.set(i,[e.get(u),l])}else{let l=r;for(let f=0;f<u.length;++f,++l){const m=u[f],g=c*l,y=g-c;let d=o[g];const a=Math.max(0,l-s-1),w=Math.min(c-1,l+s);for(let p=a;p<w;++p){const O=m!==t[p],C=o[y+p]+ +O,k=o[y+p+1]+1,x=o[g+p]+1,v=o[g+p+1]=Math.min(C,k,x);v<d&&(d=v)}if(d>s)continue t}q(e.get(u),t,s,n,o,l,c,i+u)}};class z{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=I(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,r]=L(n);for(const c of o.keys())if(c!==_&&c.startsWith(r)){const i=new Map;return i.set(c.slice(r.length),o.get(c)),new z(i,t)}}return new z(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new S(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=F(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){return F(this._tree,t)?.has(_)??!1}keys(){return new S(this,D)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,E(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new S(this,W)}[Symbol.iterator](){return this.entries()}static from(t){const s=new z;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return z.from(Object.entries(t))}}const I=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),I(e.get(n),t.slice(n.length),s);return s.push([e,t]),I(void 0,"",s)},F=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return F(e.get(s),t.slice(s.length))},E=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const r of e.keys())if(r!==_&&t[n]===r[0]){const c=Math.min(s-n,r.length);let i=1;for(;i<c&&t[n+i]===r[i];)++i;const h=e.get(r);if(i===r.length)e=h;else{const u=new Map;u.set(r.slice(i),h),e.set(t.slice(n,n+i),u),e.delete(r),e=u}n+=i;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=I(e,t);if(s!==void 0){if(s.delete(_),s.size===0)R(n);else if(s.size===1){const[o,r]=s.entries().next().value;A(n,o,r)}}},R=e=>{if(e.length===0)return;const[t,s]=L(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&A(e.slice(0,-1),n,o)}},A=(e,t,s)=>{if(e.length===0)return;const[n,o]=L(e);n.set(o+t,s),n.delete(o)},L=e=>e[e.length-1],rt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r\p{Z}\p{P}]+/u,j="or",N="and",ct="and_not",ut=(e,t)=>{e.includes(t)||e.push(t)},B=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,M=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[j]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:r,match:c}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,c),B(n.terms,r)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:r,terms:c,match:i}=t.get(n);B(o.terms,c),s.set(n,{score:o.score+r,terms:o.terms,match:Object.assign(o.match,i)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,r)=>{const{k:c,b:i,d:h}=r;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(c+1)/(e+c*(1-i+i*n/o)))},at=e=>(t,s,n)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,s,n):1}),H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),r=o.get(t);r?.get(s)==null?H(e,s,t,n):r.get(s)<=1?r.size<=1?o.delete(t):r.delete(s):r.set(s,r.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},pt={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},Y={minDirtFactor:.1,minDirtCount:20},yt={..._t,...Y},K=Symbol("*"),wt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,r]of e._documentIds){const c=n.boostDocument?n.boostDocument(r,"",e._storedFields.get(o)):1;s.set(o,{score:c,terms:[],match:{}})}return s},U=(e,t=j)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},T=(e,t,s,n,o,r,c,i,h,u=new Map)=>{if(r==null)return u;for(const l of Object.keys(c)){const f=c[l],m=e._fieldIds[l],g=r.get(m);if(g==null)continue;let y=g.size;const d=e._avgFieldLength[m];for(const a of g.keys()){if(!e._documentIds.has(a)){ft(e,m,a,s),y-=1;continue}const w=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!w)continue;const p=g.get(a),O=e._fieldLength.get(a)[m],C=dt(p,y,e._documentCount,O,d,h),k=n*o*f*w*C,x=u.get(a);if(x){x.score+=k,ut(x.terms,t);const v=G(x.match,s);v?v.push(l):x.match[s]=[l]}else u.set(a,{score:k,terms:[t],match:{[s]:[l]}})}}return u},xt=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields??e._options.fields).reduce((d,a)=>({...d,[a]:G(n.boost,a)||1}),{}),{boostDocument:r,weights:c,maxFuzzy:i,bm25:h}=n,{fuzzy:u,prefix:l}={...J.weights,...c},f=e._index.get(t.term),m=T(e,t.term,t.term,1,t.termBoost,f,o,r,h);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,a=d<1?Math.min(i,Math.round(t.term.length*d)):d;a&&(y=e._index.fuzzyGet(t.term,a))}if(g)for(const[d,a]of g){const w=d.length-t.term.length;if(!w)continue;y?.delete(d);const p=l*d.length/(d.length+.3*w);T(e,t.term,d,p,t.termBoost,a,o,r,h,m)}if(y)for(const d of y.keys()){const[a,w]=y.get(d);if(!w)continue;const p=u*d.length/(d.length+w);T(e,t.term,d,p,t.termBoost,a,o,r,h,m)}return m},Q=(e,t,s={})=>{if(t===K)return wt(e,s);if(typeof t!="string"){const l={...s,...t,queries:void 0},f=t.queries.map(m=>Q(e,m,l));return U(f,l.combineWith)}const{tokenize:n,processTerm:o,searchOptions:r}=e._options,c={tokenize:n,processTerm:o,...r,...s},{tokenize:i,processTerm:h}=c,u=i(t).flatMap(l=>h(l)).filter(l=>!!l).map(at(c)).map(l=>xt(e,l,c));return U(u,c.combineWith)},X=(e,t,s={})=>{const n=Q(e,t,s),o=[];for(const[r,{score:c,terms:i,match:h}]of n){const u=i.length||1,l={id:e._documentIds.get(r),score:c*u,terms:Object.keys(h),queryTerms:i,match:h};Object.assign(l,e._storedFields.get(r)),(s.filter==null||s.filter(l))&&o.push(l)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},zt=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:r,terms:c}of X(e,t,s)){const i=c.join(" "),h=n.get(i);h!=null?(h.score+=r,h.count+=1):n.set(i,{score:r,terms:c,count:1})}const o=[];for(const[r,{score:c,terms:i,count:h}]of n)o.push({suggestion:r,terms:i,score:c/h});return o.sort(P),o};class bt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions},autoSuggestOptions:{...pt,...t.autoSuggestOptions}},this._index=new z,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=Y,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[r,c]of n)o[r]=Object.fromEntries(c);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const vt=e=>new bt(e),kt=({documentCount:e,nextId:t,fieldIds:s,averageFieldLength:n,dirtCount:o,version:r},c)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const i=vt(c);return i._documentCount=e,i._nextId=t,i._idToShortId=new Map,i._fieldIds=s,i._avgFieldLength=n,i._dirtCount=o??0,i._index=new z,i},It=(e,t)=>{const{index:s,documentIds:n,fieldLength:o,storedFields:r}=e,c=kt(e,t);c._documentIds=M(n),c._fieldLength=M(o),c._storedFields=M(r);for(const[i,h]of c._documentIds)c._idToShortId.set(h,i);for(const[i,h]of s){const u=new Map;for(const l of Object.keys(h))u.set(parseInt(l,10),M(h[l]));c._index.set(i,u)}return c},V=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let r=0,c=0;const i=(u,l=!1)=>{let f;c===0?f=u.length>20?`… ${u.slice(-20)}`:u:l?f=u.length+c>100?`${u.slice(0,100-c)}… `:u:f=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,f&&o.push(f),c+=f.length,l||(o.push(["mark",t]),c+=t.length,c>=100&&o.push(" …"))};let h=s.indexOf(n,r);if(h===-1)return null;for(;h>=0;){const u=h+n.length;if(i(e.slice(r,h)),r=u,c>100)break;h=s.indexOf(n,r)}return c<100&&i(e.slice(r),!0),o},Mt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),Ot=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return X(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:r,terms:c,score:i}=o,h=r.includes("@"),u=r.includes("#"),[l,f]=r.split(/[#@]/),m=Number(l),g=c.sort((d,a)=>d.length-a.length).filter((d,a)=>c.slice(a+1).every(w=>!w.includes(d))),{contents:y}=n[m]??={title:"",contents:[]};if(h)y.push([{type:"customField",id:m,index:f,display:g.map(d=>o.c.map(a=>V(a,d))).flat().filter(d=>d!==null)},i]);else{const d=g.map(a=>V(o.h,a)).filter(a=>a!==null);if(d.length&&y.push([{type:u?"heading":"title",id:m,...u&&{anchor:f},display:d},i]),"t"in o&&o.t)for(const a of o.t){const w=g.map(p=>V(a,p)).filter(p=>p!==null);w.length&&y.push([{type:"text",id:m,...u&&{anchor:f},display:w},i])}}}),$(n).sort(([,o],[,r])=>"max"==="total"?Mt(o,r):Ot(o,r)).map(([o,{title:r,contents:c}])=>{if(!r){const i=rt(t,o);i&&(r=i.h)}return{title:r,contents:c.map(([i])=>i)}})},tt=(e,t,s={})=>{const n=zt(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},Ct=et($(JSON.parse("{\"/\":{\"documentCount\":111,\"nextId\":111,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2#参考仓库地址\",\"3\":\"2#本站仓库地址\",\"4\":\"2#说明\",\"5\":\"2#鼠标点击特效\",\"6\":\"2#图标的使用\",\"7\":\"2#live2d的使用\",\"8\":\"2#搜索\",\"9\":\"2#音乐插件\",\"10\":\"2#感谢\",\"11\":\"3\",\"12\":\"3#个人留言\",\"13\":\"3#关于本站\",\"14\":\"3#关于建站\",\"15\":\"4\",\"16\":\"5\",\"17\":\"5#小组作业的初衷\",\"18\":\"5#小组作业的弊端\",\"19\":\"6\",\"20\":\"7\",\"21\":\"7#vscode-启动springboot项目\",\"22\":\"7#安装java插件\",\"23\":\"7#安装springboot插件\",\"24\":\"7#创建springboot项目\",\"25\":\"7#vscode-启动vue3项目\",\"26\":\"7#安装vue插件\",\"27\":\"7#创建vue3项目\",\"28\":\"8\",\"29\":\"9\",\"30\":\"9#pojo\",\"31\":\"9#vo\",\"32\":\"9#dto\",\"33\":\"9#po\",\"34\":\"9#pojo、vo、dto、po的区别\",\"35\":\"9#个人理解\",\"36\":\"9#参考资料\",\"37\":\"10\",\"38\":\"10#mapstruct是什么\",\"39\":\"10#maven引入\",\"40\":\"10#使用\",\"41\":\"10#总结\",\"42\":\"11\",\"43\":\"11#代码实现\",\"44\":\"11#拦截器实现\",\"45\":\"11#总结\",\"46\":\"12\",\"47\":\"12#一对一查询\",\"48\":\"12#一对多查询\",\"49\":\"12#分类查询\",\"50\":\"12#总结\",\"51\":\"13\",\"52\":\"13#前言\",\"53\":\"13#样例\",\"54\":\"13#注意事项\",\"55\":\"13#总结\",\"56\":\"14\",\"57\":\"14#工具类\",\"58\":\"14#使用\",\"59\":\"15\",\"60\":\"15#引入依赖\",\"61\":\"15#配置\",\"62\":\"15#使用\",\"63\":\"15#总结\",\"64\":\"16\",\"65\":\"16#继承关系的存储\",\"66\":\"16#聚合关系的存储\",\"67\":\"17\",\"68\":\"17#前言\",\"69\":\"17#解决方案\",\"70\":\"18\",\"71\":\"18#前言\",\"72\":\"18#解决方案\",\"73\":\"19\",\"74\":\"19#前言\",\"75\":\"19#解决方案\",\"76\":\"20\",\"77\":\"20#创建bucket\",\"78\":\"20#设置公开读写\",\"79\":\"20#引入依赖\",\"80\":\"20#配置\",\"81\":\"20#使用\",\"82\":\"21\",\"83\":\"21#背景\",\"84\":\"21#普通uuid的问题\",\"85\":\"21#雪花算法原理\",\"86\":\"21#雪花算法实现\",\"87\":\"21#使用示例\",\"88\":\"21#注意事项\",\"89\":\"21#总结\",\"90\":\"22\",\"91\":\"23\",\"92\":\"23#安装axios\",\"93\":\"23#首先配置基础路径\",\"94\":\"23#拦截器\",\"95\":\"23#请求拦截器\",\"96\":\"23#响应拦截器\",\"97\":\"23#使用\",\"98\":\"24\",\"99\":\"24#问题\",\"100\":\"24#解决方案\",\"101\":\"25\",\"102\":\"25#安装\",\"103\":\"25#使用\",\"104\":\"26\",\"105\":\"26#安装\",\"106\":\"26#实现自定义图片上传\",\"107\":\"27\",\"108\":\"27#全局路由守卫\",\"109\":\"27#局部路由守卫\",\"110\":\"28\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[1],\"2\":[1,6],\"3\":[1,5],\"4\":[1],\"5\":[1,13],\"6\":[1,9],\"7\":[1,6],\"8\":[1,11],\"9\":[1,4],\"10\":[1,4],\"11\":[1],\"12\":[1,17],\"13\":[1,18],\"14\":[1,2],\"15\":[1,2],\"16\":[3],\"17\":[1,8],\"18\":[1,10],\"19\":[1,3],\"20\":[1],\"21\":[2,4],\"22\":[1,3],\"23\":[1,3],\"24\":[1,45],\"25\":[2,3],\"26\":[1,4],\"27\":[1,22],\"28\":[1,3],\"29\":[1,2],\"30\":[1,21],\"31\":[1,12],\"32\":[1,15],\"33\":[1,10],\"34\":[4,25],\"35\":[1,14],\"36\":[1,8],\"37\":[2,4],\"38\":[1,46],\"39\":[1,17],\"40\":[1,105],\"41\":[1,4],\"42\":[1,2],\"43\":[1,99],\"44\":[1,122],\"45\":[1,18],\"46\":[1],\"47\":[1,59],\"48\":[1,52],\"49\":[1,101],\"50\":[1,4],\"51\":[1],\"52\":[1,6],\"53\":[1,30],\"54\":[1,7],\"55\":[1,4],\"56\":[1],\"57\":[1,63],\"58\":[1,95],\"59\":[1],\"60\":[1,14],\"61\":[1,67],\"62\":[1,82],\"63\":[1,5],\"64\":[1],\"65\":[1,30],\"66\":[1,16],\"67\":[1],\"68\":[1,15],\"69\":[1,10],\"70\":[1],\"71\":[1,15],\"72\":[1,14],\"73\":[1],\"74\":[1,44],\"75\":[1,12],\"76\":[1],\"77\":[1,18],\"78\":[1,8],\"79\":[1,15],\"80\":[1,40],\"81\":[1,73],\"82\":[1],\"83\":[1,10],\"84\":[1,5],\"85\":[1,24],\"86\":[1,96],\"87\":[1,15],\"88\":[1,14],\"89\":[1,5],\"90\":[1,3],\"91\":[1],\"92\":[1,3],\"93\":[1,28],\"94\":[1],\"95\":[1,22],\"96\":[1,27],\"97\":[1,37],\"98\":[2],\"99\":[1,11],\"100\":[1,54],\"101\":[2,5],\"102\":[1,3],\"103\":[1,27],\"104\":[1],\"105\":[1,8],\"106\":[1,68],\"107\":[1],\"108\":[1,45],\"109\":[1,35],\"110\":[1,3]},\"averageFieldLength\":[1.0900900900900903,22.73484574801474],\"storedFields\":{\"0\":{\"h\":\"关于\",\"t\":[\"相关信息\",\"关于我和关于本站\"]},\"1\":{\"h\":\"关于本站搭建\"},\"2\":{\"h\":\"参考仓库地址\",\"t\":[\"首先给出我参考的项目地址 github。 本站几乎全部参考这个项目（没办法太菜了bushi），感谢作者开源。\"]},\"3\":{\"h\":\"本站仓库地址\",\"t\":[\"然后给出本站的仓库地址 github。建议直接参照上面那个，我这个只是拙劣的模仿。\"]},\"4\":{\"h\":\"说明\"},\"5\":{\"h\":\"鼠标点击特效\",\"t\":[\"这个实现在 public/js/mouseEffect.js 文件中，使用jQuery实现。网上特别多，我就不赘述了。\",\"注意\",\"这个jQuery加载比较慢，如果鼠标点击没有特效，可以刷新一下。\"]},\"6\":{\"h\":\"图标的使用\",\"t\":[\"本站采用FontAwesome图标，图标使用方法请参考FontAwesome官网。 如果你是大牛，你可以直接在iconFont建立自己的图标，按照vuepress-theme-hope官网介绍，还是不建议直接使用iconFont。\"]},\"7\":{\"h\":\"live2D的使用\",\"t\":[\"本站使用的是Live2D插件，具体可以参照官网，我这里就不赘述了。另外附上资源网模型资源 (这个官网里面也有给出)。\"]},\"8\":{\"h\":\"搜索\",\"t\":[\"本站使用vuepress-plugin-search-pro插件，具体使用方法请参照官网。\",\"注意\",\"本站搜索功能可能存在一些问题，如果搜索不到，或者搜索框无法关闭 请尝试刷新页面。\"]},\"9\":{\"h\":\"音乐插件\",\"t\":[\"由于没有服务器，所以我把音乐存在本地。有服务器的可以参照原作者的写法。\"]},\"10\":{\"h\":\"感谢\",\"t\":[\"感谢作者 mo7cc开源，感谢开源社区。\"]},\"11\":{\"h\":\"关于我\"},\"12\":{\"h\":\"个人留言\",\"t\":[\"你好，我叫Carmen。欢迎访问我的个人网站。如你所见，我是一个正在努力前行的小牛马。我的目标是成为一名全栈工程师。什么？你问我为什么要走全栈？？因为全栈才符合牛马的气质啊！😎。\",\"注意\",\"开个玩笑，全栈十分辛苦，不建议入坑。我只是比较笨，所以只能走全栈。\"]},\"13\":{\"h\":\"关于本站\",\"t\":[\"可能看到我的网站的人觉得我是个衰鬼，因为我的网站取名还是太抽象了。但我想说，人生无常，大肠包小肠。未经他人苦，莫劝他人善。也许，我的网站就是我的“大肠”，而我的“小肠”就是我的生活。😎\",\"注意\",\"好吧。人还是要积极乐观的不是吗？\"]},\"14\":{\"h\":\"关于建站\",\"t\":[\"具体请参阅关于本站。\"]},\"15\":{\"h\":\"杂谈\",\"t\":[\"相关信息\",\"一些碎碎念\"]},\"16\":{\"h\":\"论小组作业为什么是“神”\"},\"17\":{\"h\":\"小组作业的初衷\",\"t\":[\"小组作业的初衷是为了让同学们在完成课程任务的同时，也能通过合作和交流来提高自己的技能和知识。通过小组作业，同学们可以互相学习、互相帮助，共同完成一个项目或任务，从而提高自己的团队协作能力和解决问题的能力。\"]},\"18\":{\"h\":\"小组作业的弊端\",\"t\":[\"都是摸鱼大神，怎么玩？？？ 😎。 ctm，别问，问就是摸鱼。 9个人，只有一个人在写，怎么玩？？\",\"所以说我就是牛马本马。😎。\"]},\"19\":{\"h\":\"技术\",\"t\":[\"相关信息\",\"记录一些与编程相关的技巧与心得。\"]},\"20\":{\"h\":\"vscode一条龙服务\"},\"21\":{\"h\":\"vscode 启动SpringBoot项目\",\"t\":[\"默认已经安装了JDK，数据库，Maven\",\"没装的可以上网搜教程\"]},\"22\":{\"h\":\"安装Java插件\",\"t\":[\"vscode 插件搜索Java即可。\",\"Java插件\"]},\"23\":{\"h\":\"安装SpringBoot插件\",\"t\":[\"vscode 插件搜索Spring即可。\",\"Spring插件\"]},\"24\":{\"h\":\"创建SpringBoot项目\",\"t\":[\"按住 ctrl + shift + p，输入Java: Create Java Project\",\"Java: Create Java Project\",\"选择Spring Boot\",\"选择Spring Boot\",\"选择Maven\",\"选择Maven\",\"选择SpringBoot版本\",\"选择SpringBoot版本\",\"选择Java为开发语言\",\"选择Java为开发语言\",\"输入域名\",\"设置域名\",\"输入项目名称\",\"设置项目名称\",\"选择Jar为打包方式\",\"选择Jar为打包方式\",\"选择Java版本（根据你的情况选择）\",\"设置Java版本\",\"选择依赖（根据你的情况选择）\",\" 在application.properties中设置数据库连接信息\",\"没有配置数据库启动不了\",\"spring.application.name=demo spring.datasource.url=jdbc:mysql://localhost:3306/testdb1 spring.datasource.username=root spring.datasource.password=123456 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\",\"点击run启动项目\",\"启动项目\"]},\"25\":{\"h\":\"vscode 启动Vue3项目\",\"t\":[\"默认已经安装了Node.js\",\"没装的可以上网搜教程\"]},\"26\":{\"h\":\"安装Vue插件\",\"t\":[\"vscode 插件搜索Vue即可。\",\"alt text\"]},\"27\":{\"h\":\"创建Vue3项目\",\"t\":[\"按住ctrl + j打开命令行窗口 输入\",\"npm create vue@latest\",\"设置项目（这里是演示所以全选否）\",\"设置Vue项目\",\"输入以下命令\",\"cd xxx(你的目录) npm install npm run dev\",\"打开浏览器访问http://localhost:5173/\",\"成功启动Vue项目\"]},\"28\":{\"h\":\"后端\",\"t\":[\"相关信息\",\"后端相关的。\"]},\"29\":{\"h\":\"Java的多个o\",\"t\":[\"以下介绍常见的几个o。\"]},\"30\":{\"h\":\"pojo\",\"t\":[\"pojo是Plain Old Java Object的缩写，它是一个简单的Java对象，没有继承任何类，没有实现任何接口，没有使用任何注解，没有包含任何业务逻辑，没有包含任何数据库操作，没有包含任何网络通信，没有包含任何第三方库的依赖。\",\"其实大概意思就是只有data、constructor、getter、setter、toString、equals、hashCode这些方法，没有其他的方法。\"]},\"31\":{\"h\":\"vo\",\"t\":[\"vo是View Object的缩写，它是一个视图对象，用于表示一个视图层的数据。vo通常用于表示一个视图层的数据，例如一个网页的表单数据，或者一个网页的显示数据。vo通常用于作为视图层的参数和返回值。\",\"可以理解为Controller层返回的Resp对象，包含前端想要的数据，过滤掉前端不需要的数据。\"]},\"32\":{\"h\":\"dto\",\"t\":[\"dto是Data Transfer Object的缩写，它是一个数据传输对象，用于在不同的层之间传递数据。dto通常用于表示一个业务实体，或者用于表示一个数据库表中的一条记录。dto通常用于作为数据传输对象（DTO），或者用于作为业务逻辑层的参数和返回值。\",\"理解为dto为各层传输的对象（前端传后端的数据和后端传前端的数据，所以按照现在前后分离的思想来看，vo也可以认为是一种dto）。\"]},\"33\":{\"h\":\"po\",\"t\":[\"po是Persistent Object的缩写，它是一个持久化对象，用于表示一个数据库表中的一条记录。po通常用于表示一个数据库表中的一条记录。po通常用于作为数据传输对象（DTO），或者用于作为业务逻辑层的参数和返回值。\",\"理解为po中的字段和数据库中的字段一一对应。\"]},\"34\":{\"h\":\"pojo、vo、dto、po的区别\",\"t\":[\"pojo、vo、dto、po都是Java中常用的对象类型，它们之间的区别如下：\",\"pojo：Plain Old Java Object，普通Java对象 只有数据，和getter和setter。\",\"vo：View Object 显示层对象 专门为前端服务的对象，包含前端想要的数据，过滤掉前端不需要的数据。\",\"dto：Data Transfer Object，数据传输对象，用于在不同的层之间传递数据。\",\"po：Persistent Object，持久化对象，其中每个字段都和数据库中的属性一一对应\"]},\"35\":{\"h\":\"个人理解\",\"t\":[\"这么多个o（还有些没列出来），其实都是根据业务场景来划分的，没有固定的规则，所以大家可以根据自己的业务场景来划分。 个人写只用到vo(Resp), dto(Req), po(entity)。 应当注意的是这些o之间并不是固定的，他们之间可以相互转换。\"]},\"36\":{\"h\":\"参考资料\",\"t\":[\"概念POJO、DTO、DAO、PO、BO、VO、QO、ENTITY详解\"]},\"37\":{\"h\":\"Java类之间的转换-mapStruct的使用\",\"t\":[\"前面说到，在开发中我们会用到很多类。那么这些类之间应该如何做转换？\",\"下面介绍mapStruct\"]},\"38\":{\"h\":\"mapStruct是什么\",\"t\":[\"首先引用官网的原话:\",\"MapStruct is a code generator that greatly simplifies the implementation of mappings between Java bean types based on a convention over configuration approach. The generated mapping code uses plain method invocations and thus is fast, type-safe and easy to understand.\",\"大概意思是，mapStruct是一个代码生成器，它大大简化了基于约定优于配置的方法在Java bean类型之间进行映射的实现。生成的映射代码使用普通的方法调用，因此速度快、类型安全且易于理解。\"]},\"39\":{\"h\":\"maven引入\",\"t\":[\"maven坐标如下：\",\"<dependency> <groupId>org.mapstruct</groupId> <artifactId>mapstruct</artifactId> <version>1.5.5.Final</version> </dependency> <dependency> <groupId>org.mapstruct</groupId> <artifactId>mapstruct-processor</artifactId> <version>1.5.5.Final</version> <scope>provided</scope> </dependency>\"]},\"40\":{\"h\":\"使用\",\"t\":[\"假设有一个Blog的po\",\"定义如下\",\"@Schema(description = \\\"博客实体类\\\") @Data @AllArgsConstructor @NoArgsConstructor @Builder public class Blog { @Schema(description = \\\"主键id\\\") @JsonFormat(shape = JsonFormat.Shape.STRING) private Long id; @Schema(description = \\\"博客作者id\\\") @JsonFormat(shape = JsonFormat.Shape.STRING) private Long userId; @Schema(description = \\\"博客标题\\\") private String title; @Schema(description = \\\"博客描述\\\") private String description; @Schema(description = \\\"博客内容\\\") private String content; @Schema(description = \\\"博客创建时间戳\\\", defaultValue = \\\"创建博客时的时间戳\\\") @JsonFormat(timezone=\\\"GMT+8\\\") private Timestamp createAt; }\",\"还有一个BlogResp的vo\",\"定义如下\",\"@Schema(description = \\\"博客响应\\\") @Data @AllArgsConstructor @NoArgsConstructor @Builder public class BlogResp { @Schema(description = \\\"主键id\\\") @JsonFormat(shape = JsonFormat.Shape.STRING) private Long id; @Schema(description = \\\"发布博客的用户id\\\") @JsonFormat(shape = JsonFormat.Shape.STRING) private Long userId; @Schema(description = \\\"发布博客的用户昵称\\\") private String userName; @Schema(description = \\\"发布博客的用户头像\\\") private String userAvatar; @Schema(description = \\\"博客标题\\\") private String title; @Schema(description = \\\"博客描述\\\") private String description; @Schema(description = \\\"博客内容\\\") private String content; @Schema(description = \\\"博客创建时间戳\\\", defaultValue = \\\"创建博客时的时间戳\\\") @JsonFormat(timezone=\\\"GMT+8\\\") private Timestamp createAt; }\",\"可以看出多了两个属性，分别是userName和userAvatar，这两个属性需要从User表中获取。\",\"那么如何将Blog转换为BlogResp呢？\",\"我们只需要定义一个接口，用于定义转换规则。\",\"@Mapper(componentModel = \\\"spring\\\") public interface BlogConvertMapper { BlogConvertMapper INSTANCE = Mappers.getMapper(BlogConvertMapper.class); /** * 将博客实体类转换为博客响应类 * * @param blog 博客实体类 * @param userAvatar 用户头像 * @param userNickName 用户昵称 * @return 博客响应类 */ @Mappings({ @Mapping(target = \\\"userAvatar\\\", source = \\\"userAvatar\\\"), @Mapping(target = \\\"userName\\\", source = \\\"userNickName\\\") }) BlogResp toBlogResp(Blog blog, String userAvatar, String userNickName); }\",\"其中@Mapper注解用于标识这是一个mapStruct的映射接口，componentModel = \\\"spring\\\"表示这个接口是一个spring的bean。\",\"@Mappings注解用于定义映射规则，@Mapping注解用于定义具体的映射规则。\",\"然后我们就可以在代码中使用这个接口了。\",\"@Autowired private BlogConvertMapper blogConvertMapper; public BlogResp convertBlogToResp(Blog blog, String userAvatar, String userNickName) { return blogConvertMapper.toBlogResp(blog, userAvatar, userNickName); }\",\"如果没有componentModel = \\\"spring\\\"\",\"那么接口使用方式如下\",\"public BlogResp convertBlogToResp(Blog blog, String userAvatar, String userNickName) { return BlogConvertMapper.INSTANCE.toBlogResp(blog, userAvatar, userNickName); }\",\"其实加了componentModel = \\\"spring\\\"之后，在字节码里面会加上@Component，方便我们使用@Autowired\",\"以下为字节码\",\"@Component public class BlogConvertMapperImpl implements BlogConvertMapper { public BlogConvertMapperImpl() { } public BlogResp toBlogResp(Blog blog, String userAvatar, String userNickName) { if (blog == null && userAvatar == null && userNickName == null) { return null; } else { BlogResp.BlogRespBuilder blogResp = BlogResp.builder(); if (blog != null) { blogResp.content(blog.getContent()); blogResp.createAt(blog.getCreateAt()); blogResp.description(blog.getDescription()); blogResp.id(blog.getId()); blogResp.title(blog.getTitle()); blogResp.userId(blog.getUserId()); } blogResp.userAvatar(userAvatar); blogResp.userName(userNickName); return blogResp.build(); } } }\"]},\"41\":{\"h\":\"总结\",\"t\":[\"mapStruct是一个用于Java类之间的转换的工具，它可以自动生成转换代码，使得转换过程更加简单和高效。\"]},\"42\":{\"h\":\"JWT的粗略实现\",\"t\":[\"废话不多说，直接上代码\"]},\"43\":{\"h\":\"代码实现\",\"t\":[\"@Component public class JWTUtil { private static final String SECRET_KEY = \\\"abcdefghijklmnopqrstuvwxyz\\\"; private static final long EXPIRATION_TIME = 1000 * 60 * 15; // 15 minutes private static final long REFRESH_TIME = 1000 * 60 * 60 * 24 * 7; // 7 day /** * 生成token * @param key token中包含的信息(比如说用户的手机号) * @return token */ public static String generateToken(String key) { return Jwts.builder() .setSubject(key) .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME)) .signWith(SignatureAlgorithm.HS512, SECRET_KEY) .compact(); } /** * 生成refreshToken 时间更长 更不容易过期 * @param key token中包含的信息(比如说用户的手机号) * @return token */ public static String generateRefreshToken(String key) { return Jwts.builder() .setSubject(key) .setExpiration(new Date(System.currentTimeMillis() + REFRESH_TIME)) .signWith(SignatureAlgorithm.HS512, SECRET_KEY) .compact(); } /** * 解析token * @param token 需要解析的token * @return claims */ public static Claims extractClaims(String token) { try { return Jwts.parser() .setSigningKey(SECRET_KEY) .parseClaimsJws(token) .getBody(); } catch (JwtException e) { return null; // 过期的token直接返回null } } /** * 获取token中包含的信息 * @param token 需要解析的token * @return token中包含的信息 */ public static String extractKey(String token) { Claims claims = extractClaims(token); return claims != null ? claims.getSubject() : null; } /** * 判断token是否过期 * @param token 待验证的token * @return {@code true}表示过期 {@code false}表示未过期 */ public static boolean isTokenExpired(String token) { Claims claims = extractClaims(token); return (claims != null && claims.getExpiration().before(new Date())) || claims == null; } /** * 验证token合法性 * @param token 待验证的token * @param key 用户信息 * @return {@code true}表示合法 {@code false}表示不合法 */ public static boolean validateToken(String token, String key) { String extractedKey = extractKey(token); return extractedKey != null && extractedKey.equals(key) && !isTokenExpired(token); } }\",\"上述代码是一个简单的JWT工具类，其中包含了生成token、解析token、验证token等方法。需要注意的是，这里的SECRET_KEY是一个固定的字符串，实际应用中应该使用更安全的密钥。另外，这里的EXPIRATION_TIME和REFRESH_TIME也是固定的，实际应用中应该根据需求进行调整。\"]},\"44\":{\"h\":\"拦截器实现\",\"t\":[\"既然有了token，那么肯定要有拦截器\",\"拦截器定义如下（使用双token）\",\"注意\",\"建议对浏览器预检请求做处理\",\"@Component public class LoginInterceptor implements HandlerInterceptor { /** * 在请求处理之前进行拦截 */ @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { // **注意排除预检请求** if (\\\"OPTIONS\\\".equalsIgnoreCase(request.getMethod())) { response.setStatus(HttpServletResponse.SC_OK); return false; } String accessToken = request.getHeader(\\\"Authorization\\\"); String refreshToken = request.getHeader(\\\"Refresh-Token\\\"); boolean accessTokenValid = false; boolean refreshTokenValid = false; // 验证 Access Token if (accessToken != null && accessToken.startsWith(\\\"Bearer \\\")) { accessToken = accessToken.substring(7); accessTokenValid = !JWTUtil.isTokenExpired(accessToken); } // 验证 Refresh Token if (refreshToken != null && !refreshToken.isEmpty()) { refreshTokenValid = !JWTUtil.isTokenExpired(refreshToken); } // 如果 Access Token 有效，继续请求 if (accessTokenValid) { return true; } // 如果 Access Token 无效但 Refresh Token 有效，尝试刷新 Access Token if (!accessTokenValid && refreshTokenValid) { String key = JWTUtil.extractKey(refreshToken); // 从 refreshToken 中提取用户信息 String newAccessToken = JWTUtil.generateToken(key); // 生成新的 Access Token response.setHeader(\\\"New-Access-Token\\\", newAccessToken); return true; } // 两个 Token 都无效，返回401状态 response.setStatus(HttpServletResponse.SC_UNAUTHORIZED); response.getWriter().write(\\\"{\\\\\\\"code\\\\\\\": 1, \\\\\\\"message\\\\\\\": \\\\\\\"invalid token\\\\\\\", \\\\\\\"data\\\\\\\": null}\\\"); return false; } }\",\"然后是注册拦截器\",\"@Configuration public class WebConfig implements WebMvcConfigurer { @Autowired private LoginInterceptor loginInterceptor; /** * 添加拦截器 */ @Override public void addInterceptors(InterceptorRegistry registry) { // excludePathPatterns() 用于排除你不想要排除的路径 registry.addInterceptor(loginInterceptor) .excludePathPatterns( \\\"/api/login/**\\\", \\\"/api/register/**\\\", \\\"/api/refresh/**\\\", \\\"/doc.html\\\", \\\"/webjars/**\\\", \\\"/v3/api-docs/swagger-config\\\", \\\"/v3/api-docs/**\\\", \\\"/swagger-ui/index.html\\\", \\\"swagger-ui.html\\\" ); } /** * 静态资源映射 * */ @Override public void addResourceHandlers(ResourceHandlerRegistry registry) { registry.addResourceHandler(\\\"doc.html\\\").addResourceLocations(\\\"classpath:/META-INF/resources/\\\"); registry.addResourceHandler(\\\"/favicon.ico\\\").addResourceLocations(\\\"classpath:/META-INF/resources/\\\"); registry.addResourceHandler(\\\"/webjars/**\\\").addResourceLocations(\\\"classpath:/META-INF/resources/webjars/\\\"); } }\",\"这样就大功告成了！！\"]},\"45\":{\"h\":\"总结\",\"t\":[\"通过上述步骤，我们实现了一个简单的 JWT 认证机制，并在 Spring Boot 项目中进行了集成。通过拦截器对请求进行拦截，验证 JWT 的有效性，并在需要时刷新 JWT。这样，我们就可以在项目中使用 JWT 来保护 API 的安全性了。\"]},\"46\":{\"h\":\"MyBatis复杂SQL查询\"},\"47\":{\"h\":\"一对一查询\",\"t\":[\"这里指的是一个对象中包含一个对象。\",\"这时候我们可以通过<association>标签来实现。\",\"举个例子\",\"一个路线项目包含一个地点，地点包含经纬度，地址等信息。\",\"ResultMap写法如下\",\"<!-- RouteItemMapper.xml --> <resultMap id=\\\"routeItemResultMap\\\" type=\\\"RouteItem\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"order\\\" column=\\\"order\\\" /> <association property=\\\"location\\\" column=\\\"loc_id\\\" select=\\\"com.stu.mapper.LocationMapper.findLocationById\\\" /> </resultMap> <!-- LocationMapper.xml --> <resultMap id=\\\"locationResultMap\\\" type=\\\"Location\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"longitude\\\" column=\\\"longitude\\\" /> <result property=\\\"latitude\\\" column=\\\"latitude\\\" /> <result property=\\\"address\\\" column=\\\"address\\\" /> </resultMap>\",\"查询的时候直接如下面写即可\",\"<select id=\\\"findRouteItemsByRouteId\\\" resultMap=\\\"routeItemResultMap\\\"> SELECT `id`, `loc_id`, `order` FROM `route_item` WHERE `route_id` = #{routeId} ORDER BY `order` </select>\",\"这时候会根据loc_id来查询Location对象，并且赋值给RouteItem对象的location属性。\"]},\"48\":{\"h\":\"一对多查询\",\"t\":[\"这里指的是一个对象中包含多个对象。\",\"这时候我们可以通过<collection>标签来实现。\",\"举个例子\",\"一个路线列表包含多个路线项目\",\"ResultMap写法如下\",\"<!-- RouteListMapper.xml --> <resultMap id=\\\"routeResultMap\\\" type=\\\"Route\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"name\\\" column=\\\"name\\\" /> <collection property=\\\"routeItems\\\" column=\\\"id\\\" select=\\\"com.stu.mapper.RouteItemMapper.findRouteItemsByRouteId\\\" /> </resultMap> <!-- RouteItemMapper.xml --> <resultMap id=\\\"routeItemResultMap\\\" type=\\\"RouteItem\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"order\\\" column=\\\"order\\\" /> <association property=\\\"location\\\" column=\\\"loc_id\\\" select=\\\"com.stu.mapper.LocationMapper.findLocationById\\\" /> </resultMap>\",\"查询的时候直接如下面写即可\",\"<select id=\\\"findRouteListById\\\" resultMap=\\\"routeResultMap\\\"> SELECT `id`, `name` FROM `route` WHERE `id` = #{id} </select>\",\"这时候会根据id来查询RouteItem对象，并且赋值给Route对象的routeItems属性。\"]},\"49\":{\"h\":\"分类查询\",\"t\":[\"假设我们有一个父类，几个子类，现在我们要查询父类，并且查询出其子类。\",\"（我这里父类和子类的表是分开的 参见从面向对象到数据库存储）\",\"这时候我们可以通过<discriminator>标签来实现。\",\"假设一个Item类派生出Spot, Hotel, Restaurant\",\"Item表中存储了一个type字段，用来区分是哪个子类。\",\"ResultMap写法如下\",\"<!-- ItemMapper.xml --> <resultMap id=\\\"itemResultMap\\\" type=\\\"Item\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"name\\\" column=\\\"name\\\" /> <result property=\\\"description\\\" column=\\\"desc\\\" /> <result property=\\\"itemType\\\" column=\\\"type\\\" /> <discriminator javaType=\\\"String\\\" column=\\\"type\\\"> <case value=\\\"SPOT\\\" resultMap=\\\"com.stu.mapper.SpotMapper.spotResultMap\\\" /> <case value=\\\"HOTEL\\\" resultMap=\\\"com.stu.mapper.HotelMapper.hotelResultMap\\\" /> <case value=\\\"RESTAURANT\\\" resultMap=\\\"com.stu.mapper.RestaurantMapper.restaurantResultMap\\\" /> </discriminator> </resultMap> <!-- SpotMapper.xml --> <!-- 这里的spotResultMap继承了itemResultMap --> <resultMap id=\\\"spotResultMap\\\" type=\\\"Spot\\\" extends=\\\"com.stu.mapper.ItemMapper.itemResultMap\\\"> <result property=\\\"avgLevel\\\" column=\\\"avg_level\\\" /> <result property=\\\"starNumber\\\" column=\\\"star_number\\\" /> </resultMap>\",\"查询写法如下\",\"<select id=\\\"findItemById\\\" resultMap=\\\"itemResultMap\\\"> SELECT `filtered_item`.`id`, `filtered_item`.`name`, `filtered_item`.`desc`, `filtered_item`.`type`, `filtered_item`.`loc_id`, CASE WHEN `filtered_item`.`type` = 'SPOT' THEN `spot`.`avg_level` WHEN `filtered_item`.`type` = 'HOTEL' THEN `hotel`.`avg_level` WHEN `filtered_item`.`type` = 'RESTAURANT' THEN `restaurant`.`avg_level` ELSE NULL END AS `avg_level`, CASE WHEN `filtered_item`.`type` = 'SPOT' THEN `spot`.`star_number` WHEN `filtered_item`.`type` = 'HOTEL' THEN `hotel`.`star_number` WHEN `filtered_item`.`type` = 'RESTAURANT' THEN `restaurant`.`star_number` ELSE NULL END AS `star_number`, `hotel`.`avg_price` AS `hotel_avg_price`, `restaurant`.`avg_price` AS `restaurant_avg_price`, `restaurant`.`type` AS `restaurant_type`, `restaurant`.`recommend` AS `restaurant_recommend` FROM ( SELECT `item`.`id`, `item`.`name`, `item`.`desc`, `item`.`type`, `item`.`loc_id` FROM `item` WHERE `item`.`id` = #{id} ) AS `filtered_item` LEFT JOIN `spot` ON `filtered_item`.`id` = `spot`.`id` LEFT JOIN `hotel` ON `filtered_item`.`id` = `hotel`.`id` LEFT JOIN `restaurant` ON `filtered_item`.`id` = `restaurant`.`id`; </select>\"]},\"50\":{\"h\":\"总结\",\"t\":[\"MyBatis的复杂查询主要通过<resultMap>标签来实现，通过<association>和<collection>标签来关联对象，通过<discriminator>标签来实现分类查询。\"]},\"51\":{\"h\":\"MyBatis字段类型不匹配解决\"},\"52\":{\"h\":\"前言\",\"t\":[\"在开发过程中，我们经常会遇到数据库字段类型与Java实体类属性类型不匹配的问题。\",\"这时，我们需要在MyBatis的xml文件设置resultMap，将数据库字段类型与Java实体类属性类型进行映射。\"]},\"53\":{\"h\":\"样例\",\"t\":[\"<resultMap id=\\\"userResultMap\\\" type=\\\"User\\\"> <id property=\\\"id\\\" column=\\\"id\\\" /> <result property=\\\"phone\\\" column=\\\"phone\\\" /> <result property=\\\"password\\\" column=\\\"pwd\\\" /> <result property=\\\"gender\\\" column=\\\"gender\\\" /> <result property=\\\"nickName\\\" column=\\\"nickName\\\" /> <result property=\\\"birthday\\\" column=\\\"birthday\\\" /> <result property=\\\"avatar\\\" column=\\\"avatar\\\" /> </resultMap>\",\"然后就可以在select语句中使用resultMap属性了。\",\"<select id=\\\"getUserById\\\" resultMap=\\\"userResultMap\\\"> SELECT * FROM user WHERE id = #{id} </select>\"]},\"54\":{\"h\":\"注意事项\",\"t\":[\"resultMap的id属性必须与select语句的resultMap一致。\",\"type属性必须与Java实体类的全限定名一致。（建议加上包名）\",\"id标签的property属性必须与Java实体类的属性名一致，column属性必须与数据库字段名一致。\",\"result标签的property属性必须与Java实体类的属性名一致，column属性必须与数据库字段名一致。\"]},\"55\":{\"h\":\"总结\",\"t\":[\"通过设置resultMap，我们可以将数据库字段类型与Java实体类属性类型进行映射，解决字段类型不匹配的问题。\"]},\"56\":{\"h\":\"Redis锁在Spring中的使用\"},\"57\":{\"h\":\"工具类\",\"t\":[\"@Component public class RedisDistributedLock { @Autowired private RedisTemplate<String, String> redisTemplate; // 过期时间，单位毫秒 private static final long LOCK_EXPIRE_TIME = 1000; // 使用lua脚本确保原子性 private static final String LOCK_SCRIPT = \\\"if redis.call('setnx', KEYS[1], ARGV[1]) == 1 then \\\" + \\\"redis.call('pexpire', KEYS[1], ARGV[2]); \\\" + \\\"return true; \\\" + \\\"else return false; \\\" + \\\"end\\\"; private static final String UNLOCK_SCRIPT = \\\"if redis.call('get', KEYS[1]) == ARGV[1] then \\\" + \\\"redis.call('del', KEYS[1]); \\\" + \\\"return true; \\\" + \\\"else return false; \\\" + \\\"end\\\"; public boolean lock(String key, String value) { String[] keys = { key }; String[] args = { value, String.valueOf(LOCK_EXPIRE_TIME) }; RedisScript<Boolean> script = new DefaultRedisScript<>(LOCK_SCRIPT, Boolean.class); Boolean result = redisTemplate.execute(script, Arrays.asList(keys), args); return result != null && result; } public boolean unlock(String key, String value) { String[] keys = { key }; String[] args = { value }; RedisScript<Boolean> script = new DefaultRedisScript<>(UNLOCK_SCRIPT, Boolean.class); Boolean result = redisTemplate.execute(script, Arrays.asList(keys), args); return result != null && result; } }\",\"这里只是简单演示，所以固定了锁的过期时间。\"]},\"58\":{\"h\":\"使用\",\"t\":[\"下面展示一个收藏项目的例子\",\"@Transactional(isolation = Isolation.SERIALIZABLE) public Map<String, Object> starItem(ItemDTO itemDTO) { if (itemDTO == null || itemDTO.getUser() == null || itemDTO.getItem() == null || itemDTO.getUser().getId() == null || itemDTO.getItem().getId() == null) { throw new IllegalArgumentException(\\\"参数错误\\\"); } String lockKey = \\\"lock:star:item:\\\" + itemDTO.getItem().getId(); String lockValue = IdUtil.simpleUUID(); int retryCount = 5; // 轮询 while (retryCount-- > 0) { try { if (!redisDistributedLock.lock(lockKey, lockValue)) { throw new CannotAcquireLockException(\\\"please operate later!!\\\"); } Item item = itemCacheService.get(itemDTO.getItemId()); if (item == null) { item = itemMapper.findItemById(itemDTO.getItemId()); } if (itemMapper.isItemStarredByUser(itemDTO) > 0) { return null; } // 这里简化了逻辑，主要展示锁的使用 item.setStarNumber(item.getStarNumber() + 1); itemMapper.updateStarNumber(item); itemMapper.insertItemUsr(itemDTO); User newUser = userMapper.findUserById(itemDTO.getUser().getId()); Item newItem = itemMapper.findItemById(itemDTO.getItem().getId()); itemCacheService.cache(newItem); userCacheService.cache(newUser); Map<String, Object> map = Map.of( \\\"user\\\", newUser, \\\"item\\\", newItem); return map; } catch (PessimisticLockingFailureException e) { if (retryCount <= 0) { throw e; } try { Thread.sleep((long) (Math.pow(2, 5 - retryCount) * 100)); // 指数退避 } catch (InterruptedException ie) { Thread.currentThread().interrupt(); } } finally { redisDistributedLock.unlock(lockKey, lockValue); } } throw new BussinessException(\\\"未知错误\\\"); }\",\"本机试验1000个用户3s内同时收藏一个项目，没有出现重复收藏的情况。且异常率小于1%。\"]},\"59\":{\"h\":\"springCache结合redis\"},\"60\":{\"h\":\"引入依赖\",\"t\":[\"<dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-redis</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-cache</artifactId> </dependency>\"]},\"61\":{\"h\":\"配置\",\"t\":[\"spring: data: redis: port: 6379 database: 0 connect-timeout: 5s timeout: 5s cache: type: redis redis: time-to-live: 3600000 cache-null-values: false\",\"@Configuration public class CacheConfig { // 客制化cacheManager @Bean public CacheManager cacheManager(RedisConnectionFactory connectionFactory) { RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig() // .entryTtl(Duration.ofMinutes(10)) .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(StringRedisSerializer.UTF_8)) .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(new GenericJackson2JsonRedisSerializer())); return RedisCacheManager.builder(connectionFactory) .cacheDefaults(config) .transactionAware() .build(); } // 客制化redisTemplate，使用jackon序列化 @Bean public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) { GenericJackson2JsonRedisSerializer genericJackson2JsonRedisSerializer = new GenericJackson2JsonRedisSerializer(); RedisTemplate<String, Object> redisTemplate = new RedisTemplate<>(); redisTemplate.setKeySerializer(StringRedisSerializer.UTF_8); redisTemplate.setValueSerializer(genericJackson2JsonRedisSerializer); redisTemplate.setHashKeySerializer(StringRedisSerializer.UTF_8); redisTemplate.setHashValueSerializer(genericJackson2JsonRedisSerializer); redisTemplate.setConnectionFactory(redisConnectionFactory); return redisTemplate; } }\"]},\"62\":{\"h\":\"使用\",\"t\":[\"接下来我们就可以愉快的使用装饰器来进行缓存了\",\"@Cacheable(value = \\\"user\\\", key = \\\"#id\\\") public User getUserById(Long id) { return userMapper.selectById(id); } @CachePut(value = \\\"user\\\", key = \\\"#user.id\\\") public User updateUser(User user) { userMapper.updateById(user); return user; } @CacheEvict(value = \\\"user\\\", key = \\\"#id\\\") public void deleteUser(Long id) { userMapper.deleteById(id); }\",\"如果你想编程式缓存，可以使用CacheManager来获取Cache，然后使用Cache的方法。\",\"代码如下\",\"先来一个接口\",\"public interface ICacheService<E> { /** * 缓存数据 * 键值为ID * @param val 需要缓存的数据 */ @Async(\\\"AsyncExecutor\\\") void cache(E val); /** * 根据ID获取缓存数据 * @param id 数据ID * @return 缓存数据 */ E get(Long id); @EventListener @Async(\\\"AsyncExecutor\\\") void clearCache(UpdateEvent event); }\",\"然后具体实现一下\",\"@Service public class UserCacheService implements ICacheService<User> { @Autowired private CacheManager cacheManager; @Override public void cache(User user) { Cache cache = cacheManager.getCache(\\\"user\\\"); String key = \\\"userId#\\\" + user.getId(); cache.put(key, user); } @Override public User get(Long id) { Cache cache = cacheManager.getCache(\\\"user\\\"); String key = \\\"userId#\\\" + id; return cache.get(key, User.class); } @Override public void clearCache(UpdateEvent event) { Cache cache = cacheManager.getCache(\\\"user\\\"); cache.clear(); } }\",\"使用如下\",\"@Autowired private UserMapper userMapper; @Autowired private ICacheService<User> userCacheService; public List<User> findAllUsers() { List<Long> ids = userMapper.findAllIds(); List<User> users = new ArrayList<>(); for (Long id : ids) { User user = userCacheService.get(id); if (user != null) { users.add(user); } else { user = userMapper.findUserById(id); userCacheService.cache(user); users.add(user); } } return users; }\",\"这样当我们使用像selectAll这样的方法的时候可以逐条缓存起来。\"]},\"63\":{\"h\":\"总结\",\"t\":[\"通过springCache可以更优雅地实现缓存功能。如果只是简单地缓存实现，那么直接用装饰器就行。即使复杂的功能也不会有太多的代码。\"]},\"64\":{\"h\":\"从面向对象到数据库存储\"},\"65\":{\"h\":\"继承关系的存储\",\"t\":[\"对于继承关系，我们一般有两种存储方式：\",\"合并存储：将所有子类和父类的字段都存储在一张表中，不同子类建立不同表。\",\"比如，B、C继承A。那么 B建立一张表，C建立一张表。B表和C表都存储A表的数据。 然后B表存储自己独特的字段，C表存储自己独特的字段。\",\"这样做的好处是，查询方便，不用做表关联，插入删除也方便。\",\"分开存储：将父类和子类分别存储在不同的表中，子表通过外键关联父表。\",\"比如，B、C继承A。那么三个类分成三个表，每张表存储自己独特的字段。然后B表和C表通过外键关联A表。 这样做查询时需要建立表的链接，比较费时，而且插入删除时需要多表操作比较麻烦。 但是假如一般类也可以生成对象，那么这种方法比较合适。\"]},\"66\":{\"h\":\"聚合关系的存储\",\"t\":[\"对于聚合关系，我们有以下集中存储方式：\",\"一对一关系：可以存成两张表，通过外键关联。但更多的是存成一张表，这样减少开销\",\"一对多关系：一般存成两张表，通过外键关联。当然也可以化简成一张表（往多端靠拢）。\",\"多对多关系：一般存成三张表，通过外键关联。或者耍流氓存向量或者json，但是这样就违背了关系型数据库的设计理念。\"]},\"67\":{\"h\":\"关于Java读取数据库的时区问题\"},\"68\":{\"h\":\"前言\",\"t\":[\"我的MySQL是通过压缩包安装的，也配置了my.ini文件\",\"配置如下\",\"default-time_zone='+8:00'\",\"可以看到我配置了时区，然后我在数据库中访问时间戳也是正常的，但是当我通过Java访问数据库的时候，时间戳并没有加8个小时，而是显示的是0时区的时间。\"]},\"69\":{\"h\":\"解决方案\",\"t\":[\"@JsonFormat(timezone=\\\"GMT+8\\\") private Timestamp createAt;\",\"在实体类中，将时间戳字段加上这个注解，就可以解决时区问题。\"]},\"70\":{\"h\":\"关于Long传入前端精度缺失的解决方案\"},\"71\":{\"h\":\"前言\",\"t\":[\"在Java中，Long类型是64位有符号整数，最大值为9223372036854775807，最小值为-9223372036854775808。而在JavaScript中，Number类型是64位双精度浮点数，最大值为1.7976931348623157e+308，最小值为5e-324。因此，当Java中的Long类型值超过JavaScript中的Number类型范围时，就会出现精度缺失的问题。\"]},\"72\":{\"h\":\"解决方案\",\"t\":[\"直接上代码\",\"@JsonFormat(shape = JsonFormat.Shape.STRING) private Long id;\",\"使用@JsonFormat注解，将Long类型转换为字符串类型，这样就可以避免精度缺失的问题了。\"]},\"73\":{\"h\":\"获取Bean的那些事\"},\"74\":{\"h\":\"前言\",\"t\":[\"有一个类获取Bean\",\"@Component public class ServiceFactory { @Autowired private ApplicationContext applicationContext; /** * 根据服务类型获取服务实例 * * @param <T> 服务类型 * @param serviceClass 服务类名 * @return 服务实例 */ public <T> T getService(Class<T> serviceClass) { return applicationContext.getBean(serviceClass); } /** * 根据服务名称获取服务实例 * * @param <T> 服务类型 * @param serviceName 服务名称 * @return 服务实例 */ public <T> T getService(String serviceName) { return (T) applicationContext.getBean(serviceName); } }\",\"使用如下\",\"@Autowired private ServiceFactory serviceFactory; BlogService blogService = serviceFactory.getService(BlogService.class);\",\"然后突然发现有些时候无法获取某个Bean，报错如下\",\"org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'xxxxx' available\"]},\"75\":{\"h\":\"解决方案\",\"t\":[\"我去检查了一下发现这个Bean确实存在，但是他的方法上加了@Async导致了无法获取，于是我去查了一下资料，发现@Async会导致Bean被代理，而代理Bean和原始Bean是不一样的，所以无法获取。\",\"所以我的解决方案是通过Bean的名称获取Bean，而不是通过类型获取Bean，这样就可以获取到代理Bean了。\"]},\"76\":{\"h\":\"阿里云oss的使用\"},\"77\":{\"h\":\"创建bucket\",\"t\":[\"首先创建一个阿里账号，然后购买oss服务，这里使用的是新人免费（具体几个月忘记了）。\",\"首先应该生成一个AccessKey\",\"警告\",\"必须在创建完AccessKey后就赶紧保存你的Id和Secret\",\"过了你就查不到了\",\"AccessKey界面\",\"接下来创建bucket\",\"oss1\",\"这里配置你的bucket\",\"主要是存储类型和存储冗余类型。\",\"我设置为低频访问和本地冗余\",\"注\",\"公开读写得创建完了才能设置\",\"alt text\"]},\"78\":{\"h\":\"设置公开读写\",\"t\":[\"在边栏权限访问处，读写权限设置公开读写\",\"注\",\"不设置公开读写，你访问的url是有时间限制的，超过时间就无法访问\",\"alt text\"]},\"79\":{\"h\":\"引入依赖\",\"t\":[\"maven坐标如下\",\"<dependency> <groupId>com.aliyun.oss</groupId> <artifactId>aliyun-sdk-oss</artifactId> <version>3.1.0</version> </dependency>\"]},\"80\":{\"h\":\"配置\",\"t\":[\"aliyun: oss: end-point: #你的end-point 可以在概览中查到 access-key-id: # 上面提到的AccessKey access-key-secret: # 上面提到的AccessSecret bucket-name: # 你的bucketName\",\"如果你需要设置上传的文件大小，可以添加以下配置\",\"spring: servlet: multipart: max-file-size: 100MB max-request-size: 100MB\",\"@ConfigurationProperties(prefix = \\\"aliyun.oss\\\") @Configuration @Data public class OSSConfig { private String endPoint; private String accessKeyId; private String accessKeySecret; private String bucketName; }\"]},\"81\":{\"h\":\"使用\",\"t\":[\"@Service public class ImageService { @Autowired private OSSConfig ossConfig; public String uploadImage(MultipartFile multipartFile) throws IOException { String endpoint = ossConfig.getEndPoint(); String accessKeyId = ossConfig.getAccessKeyId(); String accessKeySecret = ossConfig.getAccessKeySecret(); String bucketName = ossConfig.getBucketName(); OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret); // 这里是为了按照日期分文件管理 SimpleDateFormat sdf = new SimpleDateFormat(\\\"yyyyMMdd\\\"); String fileName = multipartFile.getOriginalFilename(); String suffixName = fileName.substring(fileName.lastIndexOf(\\\".\\\")); String finalFileName = System.currentTimeMillis() + \\\"\\\" + new SecureRandom().nextInt(0x0400) + suffixName; String objectName = sdf.format(new Date()) + \\\"/\\\" + finalFileName; ObjectMetadata objectMetadata = new ObjectMetadata(); objectMetadata.setContentType(\\\"image/jpg\\\"); // 文件上传 ossClient.putObject(bucketName, objectName, new ByteArrayInputStream(multipartFile.getBytes()), objectMetadata); // 这里是设置过期时间，公开读写可忽略这部分。 // 注意最大设置为7天 // Date expiration = new Date(System.currentTimeMillis() + 7 * 24 * 60 * 60 * 1000); // String url = ossClient.generatePresignedUrl(bucketName, objectName, expiration).toString(); // 设置公开读后，这串url可以直接访问图片 String url = \\\"https://\\\" + bucketName + \\\".\\\" + ossConfig.getEndPoint() + \\\"/\\\" + objectName; ossClient.shutdown(); return url; } }\"]},\"82\":{\"h\":\"雪花算法简介\"},\"83\":{\"h\":\"背景\",\"t\":[\"在分布式系统中，需要生成全局唯一的ID，比如订单号、用户ID等。雪花算法（Snowflake Algorithm）是由Twitter开发的一种用于生成唯一ID的算法，它能够保证在分布式环境下生成的ID是唯一的。\"]},\"84\":{\"h\":\"普通uuid的问题\",\"t\":[\"主要问题在于uuid是无序的，比如在MySQL中查询，因为使用了B+树，uuid的无序性会导致查询效率低下。\"]},\"85\":{\"h\":\"雪花算法原理\",\"t\":[\"雪花算法生成的是一个64位的整数，由以下几部分组成：\",\"符号位：1位，固定为0，表示正数。（因为ID是正数，所以符号位固定为0）\",\"时间戳：41位，表示当前时间相对于某个起始时间的毫秒数。41位可以表示69年的时间。\",\"数据中心ID：5位，表示数据中心ID。最多可以表示32个数据中心。\",\"机器ID：5位，表示机器ID。最多可以表示32台机器。\",\"序列号：12位，表示同一毫秒内生成的多个ID。12位可以表示4096个不同的序列号。\"]},\"86\":{\"h\":\"雪花算法实现\",\"t\":[\"下面是一个简单的Java实现：\",\"@Component public class SnowFlake { /** * 起始的时间戳 */ private final static long START_STMP = 1609459200000L; // 2021-01-01 00:00:00 /** * 每一部分占用的位数 */ private final static long SEQUENCE_BIT = 12; //序列号占用的位数 private final static long MACHINE_BIT = 5; //机器标识占用的位数 private final static long DATACENTER_BIT = 5;//数据中心占用的位数 /** * 每一部分的最大值 */ private final static long MAX_DATACENTER_NUM = -1L ^ (-1L << DATACENTER_BIT); private final static long MAX_MACHINE_NUM = -1L ^ (-1L << MACHINE_BIT); private final static long MAX_SEQUENCE = -1L ^ (-1L << SEQUENCE_BIT); /** * 每一部分向左的位移 */ private final static long MACHINE_LEFT = SEQUENCE_BIT; private final static long DATACENTER_LEFT = SEQUENCE_BIT + MACHINE_BIT; private final static long TIMESTMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT; private long datacenterId = 1; //数据中心 private long machineId = 1; //机器标识 private long sequence = 0L; //序列号 private long lastStmp = -1L;//上一次时间戳 public SnowFlake() { } public SnowFlake(long datacenterId, long machineId) { if (datacenterId > MAX_DATACENTER_NUM || datacenterId < 0) { throw new IllegalArgumentException(\\\"datacenterId can't be greater than MAX_DATACENTER_NUM or less than 0\\\"); } if (machineId > MAX_MACHINE_NUM || machineId < 0) { throw new IllegalArgumentException(\\\"machineId can't be greater than MAX_MACHINE_NUM or less than 0\\\"); } this.datacenterId = datacenterId; this.machineId = machineId; } /** * 产生下一个ID * * @return */ public synchronized long nextId() { long currStmp = getNewstmp(); if (currStmp < lastStmp) { throw new RuntimeException(\\\"Clock moved backwards. Refusing to generate id\\\"); } if (currStmp == lastStmp) { //相同毫秒内，序列号自增 sequence = (sequence + 1) & MAX_SEQUENCE; //同一毫秒的序列数已经达到最大 if (sequence == 0L) { currStmp = getNextMill(); } } else { //不同毫秒内，序列号置为0 sequence = 0L; } lastStmp = currStmp; return (currStmp - START_STMP) << TIMESTMP_LEFT //时间戳部分 | datacenterId << DATACENTER_LEFT //数据中心部分 | machineId << MACHINE_LEFT //机器标识部分 | sequence; //序列号部分 } private long getNextMill() { long mill = getNewstmp(); while (mill <= lastStmp) { mill = getNewstmp(); } return mill; } private long getNewstmp() { return System.currentTimeMillis(); } }\"]},\"87\":{\"h\":\"使用示例\",\"t\":[\"@Autowired private SnowFlake snowFlake; public void generateId() { long id = snowFlake.nextId(); System.out.println(id); }\"]},\"88\":{\"h\":\"注意事项\",\"t\":[\"时间回拨：如果系统时间回拨，可能会导致生成的ID重复。为了避免这种情况，可以在代码中添加时间回拨的处理逻辑。\",\"数据中心和机器ID的分配：在分布式环境下，需要为每个数据中心和机器分配一个唯一的ID，以确保生成的ID是全局唯一的。\",\"序列号的分配：在同一毫秒内，生成的多个ID需要使用序列号进行区分，以确保生成的ID是唯一的。\"]},\"89\":{\"h\":\"总结\",\"t\":[\"雪花算法是一种简单而有效的生成全局唯一ID的算法，它能够保证在分布式环境下生成的ID是唯一的。通过调整数据中心ID和机器ID的位数，可以支持更多的数据中心和机器。\"]},\"90\":{\"h\":\"前端\",\"t\":[\"相关信息\",\"前端相关的。\"]},\"91\":{\"h\":\"axios的拦截器和请求器\"},\"92\":{\"h\":\"安装axios\",\"t\":[\"npm install axios\"]},\"93\":{\"h\":\"首先配置基础路径\",\"t\":[\"首先在vite.config.js中配置基础路径\",\"server: { proxy: { '/api': { target: 'http://localhost:8080/api', changeOrigin: true, rewrite: (path) => path.replace(/^\\\\/api/, ''), }, }, },\",\"然后使用axios.create创建一个axios实例\",\"import axios from 'axios' const service = axios.create({ baseURL: '/api', });\"]},\"94\":{\"h\":\"拦截器\"},\"95\":{\"h\":\"请求拦截器\",\"t\":[\"service.interceptors.request.use( config => { const accessToken = localStorage.getItem('accessToken'); if (accessToken) { config.headers['Authorization'] = `Bearer ${accessToken}`; } return config; }, error => Promise.reject(error) );\"]},\"96\":{\"h\":\"响应拦截器\",\"t\":[\"service.interceptors.response.use( response => { const res = response.data; if (res.code !== 200) { return Promise.reject(new Error(res.message || 'Error')); } else { return res; } }, error => { console.log('err' + error); return Promise.reject(error); } );\"]},\"97\":{\"h\":\"使用\",\"t\":[\"以用户登录为例\",\"async function login() { try { const response = await service.post('/login', { phone: user.value.phone, password: user.value.password, }); if (response.data.code == 0) { localStorage.setItem(\\\"accessToken\\\", response.data.data.tokens.accessToken); localStorage.setItem(\\\"refreshToken\\\", response.data.data.tokens.refreshToken); ElMessage.success(\\\"登录成功\\\"); return true; } ElMessage.error(response.data.msg); return false; } catch (error) { ElMessage.error(\\\"网络错误\\\"); console.error(error); return false; } }\"]},\"98\":{\"h\":\"el-upload上传两次问题\"},\"99\":{\"h\":\"问题\",\"t\":[\"使用 el-upload 组件上传文件时，发现每次上传都会触发两次 before-upload 和 change 事件，导致上传两次。\"]},\"100\":{\"h\":\"解决方案\",\"t\":[\"<el-upload class=\\\"avatar-uploader\\\" action=\\\"/api/uploadimage\\\" :show-file-list=\\\"false\\\" :on-success=\\\"handleAvatarUpload\\\" :headers=\\\"uploadHeaders\\\"> <el-avatar v-if=\\\"avatar\\\" :src=\\\"avatar\\\" :size=\\\"100\\\" /> <i v-else class=\\\"el-icon-plus avatar-uploader-icon\\\"></i> </el-upload>\",\"const token = localStorage.getItem('accseeToken'); const refreshToken = localStorage.getItem('refreshToken'); const uploadHeaders = { \\\"Authorization\\\": `Bearer ${token}`, \\\"Refresh-Token\\\": refreshToken }; function handleAvatarUpload(response) { console.log(response); avatar.value = response.data; }\",\"这样在action的时候就会上传文件，在handleAvatarUpload的时候就不会再上传文件了。\"]},\"101\":{\"h\":\"mitt 的使用\",\"t\":[\"在我开发的飞马旅游中为了让地图的主题跟随项目主题变化而变化， 特引入这个工具，用于监听主题变化，然后触发地图主题变化。\"]},\"102\":{\"h\":\"安装\",\"t\":[\"npm install mitt\"]},\"103\":{\"h\":\"使用\",\"t\":[\"先来一个工具类\",\"import mitt from 'mitt'; const emitter = mitt(); export default emitter;\",\"然后是事件发起\",\"import emitter from '@/util/eventBus.js'; emitter.emit(\\\"theme\\\", { message });\",\"最后是事件监听\",\"import emitter from '@/util/eventBus.js'; emitter.on(\\\"theme\\\", (data) => { console.log(data); }/* 这里可以写上你的回调函数 */);\",\"不需要的时候，记得取消监听\",\"emitter.off(\\\"theme\\\", (data) => { console.log(data); }/* 这里可以写上你的回调函数 */);\"]},\"104\":{\"h\":\"wangEditor自定义图片上传\"},\"105\":{\"h\":\"安装\",\"t\":[\"npm install @wangeditor/editor --save npm install @wangeditor/editor-for-vue@next --save\"]},\"106\":{\"h\":\"实现自定义图片上传\",\"t\":[\"首先是uploadImage方法，用于上传图片，并返回图片的url。\",\"async function uploadImage(file) { const formData = new FormData(); formData.append('file', file); const loadingInstance = ElLoading.service({ lock: true, text: '正在加载...', spinner: 'el-icon-loading', background: 'rgba(255, 255, 255, 0.4)' }); try { const res = await service.post('/uploadimage', formData); ElMessage.success('上传成功'); return res.data; } catch (error) { ElMessage.error('上传失败'); } finally { loadingInstance.close(); } }\",\"后端返回接口样例如下\",\"{ \\\"code\\\": 0, // 0表示成功，其他表示失败 \\\"msg\\\": \\\"图片上传成功\\\", \\\"data\\\": { \\\"url\\\": \\\"http://example.com/image.jpg\\\" } }\",\"然后是自定义的图片上传。\",\"const { uploadImage } = useImage(); // 配置上传图片 editorConfig.MENU_CONF['uploadImage'] = { async customUpload(file, insertFn) { const data = await uploadImage(file); console.log(\\\"editBlog: \\\", data.data); insertFn(data.data, data.data, data.data); } };\"]},\"107\":{\"h\":\"路由守卫\"},\"108\":{\"h\":\"全局路由守卫\",\"t\":[\"在router/index.js中 配置\",\"这样防止没有token的用户进入保护区域\",\"这里是基于双token实现的\",\"router.beforeEach(async (to, from, next) => { const accessToken = localStorage.getItem('accessToken'); const refreshToken = localStorage.getItem('refreshToken'); const isAccessTokenValid = accessToken && !isTokenExpired(accessToken); const isRefreshTokenValid = refreshToken && refreshToken.length > 0; if (to.path !== '/login' && to.path !== '/register') { if (!isAccessTokenValid) { if (isRefreshTokenValid) { console.log('Access token expired, refreshing...'); try { await refreshAccessToken(); next(); } catch (error) { console.error('Error refreshing access token:', error); next('/login'); } } else { next('/login'); } } else { next(); } } else { next(); } });\"]},\"109\":{\"h\":\"局部路由守卫\",\"t\":[\"当我们在网站写入一些东西没有保存就想要刷新或者跳转的时候，浏览器会给出提示。\",\"以下给出实现\",\"首先是自定义回调函数，用于弹窗提示\",\"const beforeUnloadHandler = (event) => { if (!isEmpty.value) { event.preventDefault(); event.returnValue = '确定要离开当前页面吗？'; } };\",\"然后在挂载的时候添加监听\",\"onMounted(() => { window.addEventListener('beforeunload', beforeUnloadHandler); removeGlobalGuard = router.beforeEach((to, from, next) => { if (!isEmpty.value) { if (confirm('您还有未保存的内容，确定要离开当前页面吗？')) { next(); } else { next(false); } } else { next(); } }); });\",\"在卸载的时候移除监听\",\"onBeforeUnmount(() => { window.removeEventListener('beforeunload', beforeUnloadHandler); if (removeGlobalGuard) { removeGlobalGuard(); } });\"]},\"110\":{\"h\":\"\",\"t\":[\"404 Not Found\"]}},\"dirtCount\":0,\"index\":[[\"您还有未保存的内容\",{\"1\":{\"109\":1}}],[\"确定要离开当前页面吗\",{\"1\":{\"109\":2}}],[\"浏览器会给出提示\",{\"1\":{\"109\":1}}],[\"局部路由守卫\",{\"0\":{\"109\":1}}],[\"全局路由守卫\",{\"0\":{\"108\":1}}],[\"全栈十分辛苦\",{\"1\":{\"12\":1}}],[\"路由守卫\",{\"0\":{\"107\":1}}],[\"图片上传成功\",{\"1\":{\"106\":1}}],[\"图标使用方法请参考fontawesome官网\",{\"1\":{\"6\":1}}],[\"图标的使用\",{\"0\":{\"6\":1}}],[\"404\",{\"1\":{\"110\":1}}],[\"4\",{\"1\":{\"106\":1}}],[\"41位可以表示69年的时间\",{\"1\":{\"85\":1}}],[\"41位\",{\"1\":{\"85\":1}}],[\"正在加载\",{\"1\":{\"106\":1}}],[\"实现自定义图片上传\",{\"0\":{\"106\":1}}],[\"实际应用中应该根据需求进行调整\",{\"1\":{\"43\":1}}],[\"实际应用中应该使用更安全的密钥\",{\"1\":{\"43\":1}}],[\"记得取消监听\",{\"1\":{\"103\":1}}],[\"记录一些与编程相关的技巧与心得\",{\"1\":{\"19\":1}}],[\"先来一个工具类\",{\"1\":{\"103\":1}}],[\"先来一个接口\",{\"1\":{\"62\":1}}],[\"特引入这个工具\",{\"1\":{\"101\":1}}],[\"导致上传两次\",{\"1\":{\"99\":1}}],[\"事件\",{\"1\":{\"99\":1}}],[\"和\",{\"1\":{\"99\":1}}],[\"和getter和setter\",{\"1\":{\"34\":1}}],[\"组件上传文件时\",{\"1\":{\"99\":1}}],[\"问题\",{\"0\":{\"99\":1}}],[\"问就是摸鱼\",{\"1\":{\"18\":1}}],[\"网络错误\",{\"1\":{\"97\":1}}],[\"网上特别多\",{\"1\":{\"5\":1}}],[\"登录成功\",{\"1\":{\"97\":1}}],[\"响应拦截器\",{\"0\":{\"96\":1}}],[\"$\",{\"1\":{\"95\":1,\"100\":1}}],[\"请求拦截器\",{\"0\":{\"95\":1}}],[\"请尝试刷新页面\",{\"1\":{\"8\":1}}],[\"以用户登录为例\",{\"1\":{\"97\":1}}],[\"以确保生成的id是唯一的\",{\"1\":{\"88\":1}}],[\"以确保生成的id是全局唯一的\",{\"1\":{\"88\":1}}],[\"以下给出实现\",{\"1\":{\"109\":1}}],[\"以下为字节码\",{\"1\":{\"40\":1}}],[\"以下介绍常见的几个o\",{\"1\":{\"29\":1}}],[\"为了避免这种情况\",{\"1\":{\"88\":1}}],[\"|\",{\"1\":{\"86\":3}}],[\"||\",{\"1\":{\"43\":1,\"58\":4,\"86\":2,\"96\":1}}],[\"同一毫秒的序列数已经达到最大\",{\"1\":{\"86\":1}}],[\"同学们可以互相学习\",{\"1\":{\"17\":1}}],[\"相同毫秒内\",{\"1\":{\"86\":1}}],[\"相关信息\",{\"1\":{\"0\":1,\"15\":1,\"19\":1,\"28\":1,\"90\":1}}],[\"产生下一个id\",{\"1\":{\"86\":1}}],[\"^\",{\"1\":{\"86\":3,\"93\":1}}],[\"机器标识部分\",{\"1\":{\"86\":1}}],[\"机器标识\",{\"1\":{\"86\":1}}],[\"机器标识占用的位数\",{\"1\":{\"86\":1}}],[\"机器id\",{\"1\":{\"85\":1}}],[\"每一部分向左的位移\",{\"1\":{\"86\":1}}],[\"每一部分的最大值\",{\"1\":{\"86\":1}}],[\"每一部分占用的位数\",{\"1\":{\"86\":1}}],[\"每张表存储自己独特的字段\",{\"1\":{\"65\":1}}],[\"起始的时间戳\",{\"1\":{\"86\":1}}],[\"序列号的分配\",{\"1\":{\"88\":1}}],[\"序列号部分\",{\"1\":{\"86\":1}}],[\"序列号置为0\",{\"1\":{\"86\":1}}],[\"序列号自增\",{\"1\":{\"86\":1}}],[\"序列号占用的位数\",{\"1\":{\"86\":1}}],[\"序列号\",{\"1\":{\"85\":1,\"86\":1}}],[\"固定为0\",{\"1\":{\"85\":1}}],[\"符号位\",{\"1\":{\"85\":1}}],[\"由以下几部分组成\",{\"1\":{\"85\":1}}],[\"由于没有服务器\",{\"1\":{\"9\":1}}],[\"普通uuid的问题\",{\"0\":{\"84\":1}}],[\"普通java对象\",{\"1\":{\"34\":1}}],[\"是由twitter开发的一种用于生成唯一id的算法\",{\"1\":{\"83\":1}}],[\"雪花算法是一种简单而有效的生成全局唯一id的算法\",{\"1\":{\"89\":1}}],[\"雪花算法实现\",{\"0\":{\"86\":1}}],[\"雪花算法生成的是一个64位的整数\",{\"1\":{\"85\":1}}],[\"雪花算法原理\",{\"0\":{\"85\":1}}],[\"雪花算法\",{\"1\":{\"83\":1}}],[\"雪花算法简介\",{\"0\":{\"82\":1}}],[\"背景\",{\"0\":{\"83\":1}}],[\"公开读写可忽略这部分\",{\"1\":{\"81\":1}}],[\"公开读写得创建完了才能设置\",{\"1\":{\"77\":1}}],[\"文件上传\",{\"1\":{\"81\":1}}],[\"文件中\",{\"1\":{\"5\":1}}],[\"yyyymmdd\",{\"1\":{\"81\":1}}],[\"上传失败\",{\"1\":{\"106\":1}}],[\"上传成功\",{\"1\":{\"106\":1}}],[\"上一次时间戳\",{\"1\":{\"86\":1}}],[\"上面提到的accesssecret\",{\"1\":{\"80\":1}}],[\"上面提到的accesskey\",{\"1\":{\"80\":1}}],[\"上述代码是一个简单的jwt工具类\",{\"1\":{\"43\":1}}],[\"超过时间就无法访问\",{\"1\":{\"78\":1}}],[\"读写权限设置公开读写\",{\"1\":{\"78\":1}}],[\"注\",{\"1\":{\"77\":1,\"78\":1}}],[\"注意最大设置为7天\",{\"1\":{\"81\":1}}],[\"注意事项\",{\"0\":{\"54\":1,\"88\":1}}],[\"注意排除预检请求\",{\"1\":{\"44\":1}}],[\"注意\",{\"1\":{\"5\":1,\"8\":1,\"12\":1,\"13\":1,\"44\":1}}],[\"接下来创建bucket\",{\"1\":{\"77\":1}}],[\"接下来我们就可以愉快的使用装饰器来进行缓存了\",{\"1\":{\"62\":1}}],[\"必须在创建完accesskey后就赶紧保存你的id和secret\",{\"1\":{\"77\":1}}],[\"警告\",{\"1\":{\"77\":1}}],[\"阿里云oss的使用\",{\"0\":{\"76\":1}}],[\"发现每次上传都会触发两次\",{\"1\":{\"99\":1}}],[\"发现\",{\"1\":{\"75\":1}}],[\"发布博客的用户头像\",{\"1\":{\"40\":1}}],[\"发布博客的用户昵称\",{\"1\":{\"40\":1}}],[\"发布博客的用户id\",{\"1\":{\"40\":1}}],[\"于是我去查了一下资料\",{\"1\":{\"75\":1}}],[\"qualifying\",{\"1\":{\"74\":1}}],[\"qo\",{\"1\":{\"36\":1}}],[\"报错如下\",{\"1\":{\"74\":1}}],[\"服务名称\",{\"1\":{\"74\":1}}],[\"服务实例\",{\"1\":{\"74\":2}}],[\"服务类名\",{\"1\":{\"74\":1}}],[\"服务类型\",{\"1\":{\"74\":2}}],[\"获取bean的那些事\",{\"0\":{\"73\":1}}],[\"获取token中包含的信息\",{\"1\":{\"43\":1}}],[\"当我们在网站写入一些东西没有保存就想要刷新或者跳转的时候\",{\"1\":{\"109\":1}}],[\"当java中的long类型值超过javascript中的number类型范围时\",{\"1\":{\"71\":1}}],[\"当然也可以化简成一张表\",{\"1\":{\"66\":1}}],[\"9223372036854775808\",{\"1\":{\"71\":1}}],[\"9个人\",{\"1\":{\"18\":1}}],[\"最后是事件监听\",{\"1\":{\"103\":1}}],[\"最多可以表示32台机器\",{\"1\":{\"85\":1}}],[\"最多可以表示32个数据中心\",{\"1\":{\"85\":1}}],[\"最大值为1\",{\"1\":{\"71\":1}}],[\"最大值为9223372036854775807\",{\"1\":{\"71\":1}}],[\"最小值为5e\",{\"1\":{\"71\":1}}],[\"最小值为\",{\"1\":{\"71\":1}}],[\"就会出现精度缺失的问题\",{\"1\":{\"71\":1}}],[\"就可以解决时区问题\",{\"1\":{\"69\":1}}],[\"就是我的生活\",{\"1\":{\"13\":1}}],[\"时间回拨\",{\"1\":{\"88\":1}}],[\"时间戳部分\",{\"1\":{\"86\":1}}],[\"时间戳\",{\"1\":{\"85\":1}}],[\"时间戳并没有加8个小时\",{\"1\":{\"68\":1}}],[\"时间更长\",{\"1\":{\"43\":1}}],[\"zone=\",{\"1\":{\"68\":1}}],[\"多对多关系\",{\"1\":{\"66\":1}}],[\"往多端靠拢\",{\"1\":{\"66\":1}}],[\"对于聚合关系\",{\"1\":{\"66\":1}}],[\"对于继承关系\",{\"1\":{\"65\":1}}],[\"聚合关系的存储\",{\"0\":{\"66\":1}}],[\"但是他的方法上加了\",{\"1\":{\"75\":1}}],[\"但是当我通过java访问数据库的时候\",{\"1\":{\"68\":1}}],[\"但是这样就违背了关系型数据库的设计理念\",{\"1\":{\"66\":1}}],[\"但是假如一般类也可以生成对象\",{\"1\":{\"65\":1}}],[\"但更多的是存成一张表\",{\"1\":{\"66\":1}}],[\"但我想说\",{\"1\":{\"13\":1}}],[\"而不是通过类型获取bean\",{\"1\":{\"75\":1}}],[\"而代理bean和原始bean是不一样的\",{\"1\":{\"75\":1}}],[\"而在javascript中\",{\"1\":{\"71\":1}}],[\"而是显示的是0时区的时间\",{\"1\":{\"68\":1}}],[\"而且插入删除时需要多表操作比较麻烦\",{\"1\":{\"65\":1}}],[\"而我的\",{\"1\":{\"13\":1}}],[\"比较费时\",{\"1\":{\"65\":1}}],[\"比如在mysql中查询\",{\"1\":{\"84\":1}}],[\"比如订单号\",{\"1\":{\"83\":1}}],[\"比如\",{\"1\":{\"65\":2}}],[\"比如说用户的手机号\",{\"1\":{\"43\":2}}],[\"子表通过外键关联父表\",{\"1\":{\"65\":1}}],[\"插入删除也方便\",{\"1\":{\"65\":1}}],[\"插件搜索vue即可\",{\"1\":{\"26\":1}}],[\"插件搜索spring即可\",{\"1\":{\"23\":1}}],[\"插件搜索java即可\",{\"1\":{\"22\":1}}],[\"不需要的时候\",{\"1\":{\"103\":1}}],[\"不同毫秒内\",{\"1\":{\"86\":1}}],[\"不同子类建立不同表\",{\"1\":{\"65\":1}}],[\"不设置公开读写\",{\"1\":{\"78\":1}}],[\"不用做表关联\",{\"1\":{\"65\":1}}],[\"不建议入坑\",{\"1\":{\"12\":1}}],[\"合并存储\",{\"1\":{\"65\":1}}],[\"继承关系的存储\",{\"0\":{\"65\":1}}],[\"继续请求\",{\"1\":{\"44\":1}}],[\"即使复杂的功能也不会有太多的代码\",{\"1\":{\"63\":1}}],[\"根据服务名称获取服务实例\",{\"1\":{\"74\":1}}],[\"根据服务类型获取服务实例\",{\"1\":{\"74\":1}}],[\"根据id获取缓存数据\",{\"1\":{\"62\":1}}],[\"根据你的情况选择\",{\"1\":{\"24\":2}}],[\"键值为id\",{\"1\":{\"62\":1}}],[\"缓存数据\",{\"1\":{\"62\":2}}],[\"代码如下\",{\"1\":{\"62\":1}}],[\"代码实现\",{\"0\":{\"43\":1}}],[\"客制化redistemplate\",{\"1\":{\"61\":1}}],[\"客制化cachemanager\",{\"1\":{\"61\":1}}],[\"8080\",{\"1\":{\"93\":1}}],[\"8\",{\"1\":{\"61\":3}}],[\"324\",{\"1\":{\"71\":1}}],[\"3600000\",{\"1\":{\"61\":1}}],[\"3306\",{\"1\":{\"24\":1}}],[\"6379\",{\"1\":{\"61\":1}}],[\"60\",{\"1\":{\"43\":3,\"81\":2}}],[\"配置上传图片\",{\"1\":{\"106\":1}}],[\"配置如下\",{\"1\":{\"68\":1}}],[\"配置\",{\"0\":{\"61\":1,\"80\":1},\"1\":{\"108\":1}}],[\"引入依赖\",{\"0\":{\"60\":1,\"79\":1}}],[\"且异常率小于1\",{\"1\":{\"58\":1}}],[\"本机试验1000个用户3s内同时收藏一个项目\",{\"1\":{\"58\":1}}],[\"本站搜索功能可能存在一些问题\",{\"1\":{\"8\":1}}],[\"本站使用vuepress\",{\"1\":{\"8\":1}}],[\"本站使用的是live2d插件\",{\"1\":{\"7\":1}}],[\"本站采用fontawesome图标\",{\"1\":{\"6\":1}}],[\"本站仓库地址\",{\"0\":{\"3\":1}}],[\"本站几乎全部参考这个项目\",{\"1\":{\"2\":1}}],[\"未知错误\",{\"1\":{\"58\":1}}],[\"未经他人苦\",{\"1\":{\"13\":1}}],[\"指数退避\",{\"1\":{\"58\":1}}],[\"主要问题在于uuid是无序的\",{\"1\":{\"84\":1}}],[\"主要是存储类型和存储冗余类型\",{\"1\":{\"77\":1}}],[\"主要展示锁的使用\",{\"1\":{\"58\":1}}],[\"主键id\",{\"1\":{\"40\":2}}],[\"0表示成功\",{\"1\":{\"106\":1}}],[\"0l\",{\"1\":{\"86\":3}}],[\"01\",{\"1\":{\"86\":2}}],[\"0x0400\",{\"1\":{\"81\":1}}],[\"0<\",{\"1\":{\"79\":1}}],[\"00\",{\"1\":{\"68\":1,\"86\":3}}],[\"0\",{\"1\":{\"58\":3,\"61\":1,\"86\":4,\"97\":1,\"106\":2,\"108\":1}}],[\"轮询\",{\"1\":{\"58\":1}}],[\"下面是一个简单的java实现\",{\"1\":{\"86\":1}}],[\"下面展示一个收藏项目的例子\",{\"1\":{\"58\":1}}],[\"下面介绍mapstruct\",{\"1\":{\"37\":1}}],[\"255\",{\"1\":{\"106\":3}}],[\"200\",{\"1\":{\"96\":1}}],[\"2021\",{\"1\":{\"86\":1}}],[\"2\",{\"1\":{\"57\":1,\"58\":1}}],[\"24\",{\"1\":{\"43\":1,\"81\":1}}],[\"单位毫秒\",{\"1\":{\"57\":1}}],[\"工具类\",{\"0\":{\"57\":1}}],[\"解决方案\",{\"0\":{\"69\":1,\"72\":1,\"75\":1,\"100\":1}}],[\"解决字段类型不匹配的问题\",{\"1\":{\"55\":1}}],[\"解析token\",{\"1\":{\"43\":2}}],[\"样例\",{\"0\":{\"53\":1}}],[\"将long类型转换为字符串类型\",{\"1\":{\"72\":1}}],[\"将时间戳字段加上这个注解\",{\"1\":{\"69\":1}}],[\"将父类和子类分别存储在不同的表中\",{\"1\":{\"65\":1}}],[\"将所有子类和父类的字段都存储在一张表中\",{\"1\":{\"65\":1}}],[\"将数据库字段类型与java实体类属性类型进行映射\",{\"1\":{\"52\":1}}],[\"将博客实体类转换为博客响应类\",{\"1\":{\"40\":1}}],[\"查询方便\",{\"1\":{\"65\":1}}],[\"查询写法如下\",{\"1\":{\"49\":1}}],[\"查询的时候直接如下面写即可\",{\"1\":{\"47\":1,\"48\":1}}],[\"参数错误\",{\"1\":{\"58\":1}}],[\"参见从面向对象到数据库存储\",{\"1\":{\"49\":1}}],[\"参考资料\",{\"0\":{\"36\":1}}],[\"参考仓库地址\",{\"0\":{\"2\":1}}],[\"现在我们要查询父类\",{\"1\":{\"49\":1}}],[\"几个子类\",{\"1\":{\"49\":1}}],[\"假设一个item类派生出spot\",{\"1\":{\"49\":1}}],[\"假设我们有一个父类\",{\"1\":{\"49\":1}}],[\"假设有一个blog的po\",{\"1\":{\"40\":1}}],[\"分开存储\",{\"1\":{\"65\":1}}],[\"分类查询\",{\"0\":{\"49\":1}}],[\"分别是username和useravatar\",{\"1\":{\"40\":1}}],[\"并返回图片的url\",{\"1\":{\"106\":1}}],[\"并且查询出其子类\",{\"1\":{\"49\":1}}],[\"并且赋值给route对象的routeitems属性\",{\"1\":{\"48\":1}}],[\"并且赋值给routeitem对象的location属性\",{\"1\":{\"47\":1}}],[\"并在需要时刷新\",{\"1\":{\"45\":1}}],[\"并在\",{\"1\":{\"45\":1}}],[\"`\",{\"1\":{\"95\":1,\"100\":1}}],[\"`bearer\",{\"1\":{\"95\":1,\"100\":1}}],[\"`item`\",{\"1\":{\"49\":7}}],[\"`id`\",{\"1\":{\"47\":1,\"48\":2,\"49\":9}}],[\"`hotel\",{\"1\":{\"49\":1}}],[\"`hotel`\",{\"1\":{\"49\":5}}],[\"`star\",{\"1\":{\"49\":4}}],[\"`spot`\",{\"1\":{\"49\":4}}],[\"`recommend`\",{\"1\":{\"49\":1}}],[\"`restaurant\",{\"1\":{\"49\":3}}],[\"`restaurant`\",{\"1\":{\"49\":7}}],[\"`route`\",{\"1\":{\"48\":1}}],[\"`route\",{\"1\":{\"47\":2}}],[\"`avg\",{\"1\":{\"49\":6}}],[\"`type`\",{\"1\":{\"49\":9}}],[\"`desc`\",{\"1\":{\"49\":2}}],[\"`filtered\",{\"1\":{\"49\":15}}],[\"`name`\",{\"1\":{\"48\":1,\"49\":2}}],[\"`order`\",{\"1\":{\"47\":2}}],[\"`loc\",{\"1\":{\"47\":1,\"49\":2}}],[\"><\",{\"1\":{\"100\":1}}],[\">\",{\"1\":{\"47\":12,\"48\":11,\"49\":16,\"53\":9,\"58\":2,\"86\":2,\"100\":2,\"108\":1}}],[\"xml\",{\"1\":{\"47\":2,\"48\":2,\"49\":2}}],[\"xxxxx\",{\"1\":{\"74\":1}}],[\"xxx\",{\"1\":{\"27\":1}}],[\"地址等信息\",{\"1\":{\"47\":1}}],[\"地点包含经纬度\",{\"1\":{\"47\":1}}],[\"举个例子\",{\"1\":{\"47\":1,\"48\":1}}],[\"一般存成三张表\",{\"1\":{\"66\":1}}],[\"一般存成两张表\",{\"1\":{\"66\":1}}],[\"一个路线列表包含多个路线项目\",{\"1\":{\"48\":1}}],[\"一个路线项目包含一个地点\",{\"1\":{\"47\":1}}],[\"一对多关系\",{\"1\":{\"66\":1}}],[\"一对多查询\",{\"0\":{\"48\":1}}],[\"一对一关系\",{\"1\":{\"66\":1}}],[\"一对一查询\",{\"0\":{\"47\":1}}],[\"一些碎碎念\",{\"1\":{\"15\":1}}],[\"的使用\",{\"0\":{\"101\":1}}],[\"的安全性了\",{\"1\":{\"45\":1}}],[\"的有效性\",{\"1\":{\"45\":1}}],[\"来保护\",{\"1\":{\"45\":1}}],[\"项目中进行了集成\",{\"1\":{\"45\":1}}],[\"认证机制\",{\"1\":{\"45\":1}}],[\"通过调整数据中心id和机器id的位数\",{\"1\":{\"89\":1}}],[\"通过外键关联\",{\"1\":{\"66\":3}}],[\"通过springcache可以更优雅地实现缓存功能\",{\"1\":{\"63\":1}}],[\"通过设置resultmap\",{\"1\":{\"55\":1}}],[\"通过<discriminator>标签来实现分类查询\",{\"1\":{\"50\":1}}],[\"通过<association>和<collection>标签来关联对象\",{\"1\":{\"50\":1}}],[\"通过拦截器对请求进行拦截\",{\"1\":{\"45\":1}}],[\"通过上述步骤\",{\"1\":{\"45\":1}}],[\"通过小组作业\",{\"1\":{\"17\":1}}],[\"静态资源映射\",{\"1\":{\"44\":1}}],[\"添加拦截器\",{\"1\":{\"44\":1}}],[\"window\",{\"1\":{\"109\":2}}],[\"wangeditor\",{\"1\":{\"105\":2}}],[\"wangeditor自定义图片上传\",{\"0\":{\"104\":1}}],[\"while\",{\"1\":{\"58\":1,\"86\":1}}],[\"when\",{\"1\":{\"49\":6}}],[\"where\",{\"1\":{\"47\":1,\"48\":1,\"49\":1,\"53\":1}}],[\"webjars\",{\"1\":{\"44\":3}}],[\"webmvcconfigurer\",{\"1\":{\"44\":1}}],[\"webconfig\",{\"1\":{\"44\":1}}],[\"write\",{\"1\":{\"44\":1}}],[\"返回401状态\",{\"1\":{\"44\":1}}],[\"都无效\",{\"1\":{\"44\":1}}],[\"都是摸鱼大神\",{\"1\":{\"18\":1}}],[\"两个\",{\"1\":{\"44\":1}}],[\"中提取用户信息\",{\"1\":{\"44\":1}}],[\"从面向对象到数据库存储\",{\"0\":{\"64\":1}}],[\"从\",{\"1\":{\"44\":1}}],[\"从而提高自己的团队协作能力和解决问题的能力\",{\"1\":{\"17\":1}}],[\"尝试刷新\",{\"1\":{\"44\":1}}],[\"无效但\",{\"1\":{\"44\":1}}],[\"有一个类获取bean\",{\"1\":{\"74\":1}}],[\"有效\",{\"1\":{\"44\":2}}],[\"有服务器的可以参照原作者的写法\",{\"1\":{\"9\":1}}],[\"验证\",{\"1\":{\"44\":2,\"45\":1}}],[\"验证token等方法\",{\"1\":{\"43\":1}}],[\"验证token合法性\",{\"1\":{\"43\":1}}],[\"建议加上包名\",{\"1\":{\"54\":1}}],[\"建议对浏览器预检请求做处理\",{\"1\":{\"44\":1}}],[\"建议直接参照上面那个\",{\"1\":{\"3\":1}}],[\"拦截器\",{\"0\":{\"94\":1}}],[\"拦截器定义如下\",{\"1\":{\"44\":1}}],[\"拦截器实现\",{\"0\":{\"44\":1}}],[\"既然有了token\",{\"1\":{\"44\":1}}],[\"另外\",{\"1\":{\"43\":1}}],[\"另外附上资源网模型资源\",{\"1\":{\"7\":1}}],[\"需要为每个数据中心和机器分配一个唯一的id\",{\"1\":{\"88\":1}}],[\"需要生成全局唯一的id\",{\"1\":{\"83\":1}}],[\"需要缓存的数据\",{\"1\":{\"62\":1}}],[\"需要注意的是\",{\"1\":{\"43\":1}}],[\"需要解析的token\",{\"1\":{\"43\":2}}],[\"表示同一毫秒内生成的多个id\",{\"1\":{\"85\":1}}],[\"表示机器id\",{\"1\":{\"85\":1}}],[\"表示数据中心id\",{\"1\":{\"85\":1}}],[\"表示当前时间相对于某个起始时间的毫秒数\",{\"1\":{\"85\":1}}],[\"表示正数\",{\"1\":{\"85\":1}}],[\"表示不合法\",{\"1\":{\"43\":1}}],[\"表示合法\",{\"1\":{\"43\":1}}],[\"表示未过期\",{\"1\":{\"43\":1}}],[\"表示过期\",{\"1\":{\"43\":1}}],[\"表示这个接口是一个spring的bean\",{\"1\":{\"40\":1}}],[\"待验证的token\",{\"1\":{\"43\":2}}],[\"判断token是否过期\",{\"1\":{\"43\":1}}],[\"过了你就查不到了\",{\"1\":{\"77\":1}}],[\"过期时间\",{\"1\":{\"57\":1}}],[\"过期的token直接返回null\",{\"1\":{\"43\":1}}],[\"过滤掉前端不需要的数据\",{\"1\":{\"31\":1,\"34\":1}}],[\"更不容易过期\",{\"1\":{\"43\":1}}],[\"生成的多个id需要使用序列号进行区分\",{\"1\":{\"88\":1}}],[\"生成的映射代码使用普通的方法调用\",{\"1\":{\"38\":1}}],[\"生成新的\",{\"1\":{\"44\":1}}],[\"生成refreshtoken\",{\"1\":{\"43\":1}}],[\"生成token\",{\"1\":{\"43\":1}}],[\"7976931348623157e+308\",{\"1\":{\"71\":1}}],[\"7\",{\"1\":{\"43\":2,\"44\":1,\"81\":1}}],[\"1l\",{\"1\":{\"86\":7}}],[\"12\",{\"1\":{\"86\":1}}],[\"12位可以表示4096个不同的序列号\",{\"1\":{\"85\":1}}],[\"12位\",{\"1\":{\"85\":1}}],[\"1609459200000l\",{\"1\":{\"86\":1}}],[\"1位\",{\"1\":{\"85\":1}}],[\"10\",{\"1\":{\"61\":1}}],[\"100mb\",{\"1\":{\"80\":2}}],[\"100\",{\"1\":{\"58\":1,\"100\":1}}],[\"1000\",{\"1\":{\"43\":2,\"57\":1,\"81\":1}}],[\"1\",{\"1\":{\"44\":1,\"57\":7,\"58\":1,\"79\":1,\"86\":3}}],[\"15\",{\"1\":{\"43\":2}}],[\"keys\",{\"1\":{\"57\":8}}],[\"key是一个固定的字符串\",{\"1\":{\"43\":1}}],[\"key\",{\"1\":{\"43\":13,\"44\":2,\"57\":4,\"62\":7,\"80\":2}}],[\"直接上代码\",{\"1\":{\"42\":1,\"72\":1}}],[\"废话不多说\",{\"1\":{\"42\":1}}],[\"使得转换过程更加简单和高效\",{\"1\":{\"41\":1}}],[\"使用示例\",{\"0\":{\"87\":1}}],[\"使用如下\",{\"1\":{\"62\":1,\"74\":1}}],[\"使用jackon序列化\",{\"1\":{\"61\":1}}],[\"使用jquery实现\",{\"1\":{\"5\":1}}],[\"使用lua脚本确保原子性\",{\"1\":{\"57\":1}}],[\"使用双token\",{\"1\":{\"44\":1}}],[\"使用\",{\"0\":{\"40\":1,\"58\":1,\"62\":1,\"81\":1,\"97\":1,\"103\":1},\"1\":{\"72\":1,\"99\":1}}],[\"总结\",{\"0\":{\"41\":1,\"45\":1,\"50\":1,\"55\":1,\"63\":1,\"89\":1}}],[\"方便我们使用\",{\"1\":{\"40\":1}}],[\"之后\",{\"1\":{\"40\":1}}],[\"然后在挂载的时候添加监听\",{\"1\":{\"109\":1}}],[\"然后是自定义的图片上传\",{\"1\":{\"106\":1}}],[\"然后是事件发起\",{\"1\":{\"103\":1}}],[\"然后是注册拦截器\",{\"1\":{\"44\":1}}],[\"然后触发地图主题变化\",{\"1\":{\"101\":1}}],[\"然后使用axios\",{\"1\":{\"93\":1}}],[\"然后使用cache的方法\",{\"1\":{\"62\":1}}],[\"然后购买oss服务\",{\"1\":{\"77\":1}}],[\"然后突然发现有些时候无法获取某个bean\",{\"1\":{\"74\":1}}],[\"然后我在数据库中访问时间戳也是正常的\",{\"1\":{\"68\":1}}],[\"然后我们就可以在代码中使用这个接口了\",{\"1\":{\"40\":1}}],[\"然后b表和c表通过外键关联a表\",{\"1\":{\"65\":1}}],[\"然后b表存储自己独特的字段\",{\"1\":{\"65\":1}}],[\"然后具体实现一下\",{\"1\":{\"62\":1}}],[\"然后就可以在select语句中使用resultmap属性了\",{\"1\":{\"53\":1}}],[\"然后给出本站的仓库地址\",{\"1\":{\"3\":1}}],[\"用来区分是哪个子类\",{\"1\":{\"49\":1}}],[\"用户id等\",{\"1\":{\"83\":1}}],[\"用户信息\",{\"1\":{\"43\":1}}],[\"用户昵称\",{\"1\":{\"40\":1}}],[\"用户头像\",{\"1\":{\"40\":1}}],[\"用于弹窗提示\",{\"1\":{\"109\":1}}],[\"用于上传图片\",{\"1\":{\"106\":1}}],[\"用于监听主题变化\",{\"1\":{\"101\":1}}],[\"用于排除你不想要排除的路径\",{\"1\":{\"44\":1}}],[\"用于定义转换规则\",{\"1\":{\"40\":1}}],[\"用于表示一个数据库表中的一条记录\",{\"1\":{\"33\":1}}],[\"用于表示一个视图层的数据\",{\"1\":{\"31\":1}}],[\"用于在不同的层之间传递数据\",{\"1\":{\"32\":1,\"34\":1}}],[\"那么这种方法比较合适\",{\"1\":{\"65\":1}}],[\"那么这些类之间应该如何做转换\",{\"1\":{\"37\":1}}],[\"那么三个类分成三个表\",{\"1\":{\"65\":1}}],[\"那么\",{\"1\":{\"65\":1}}],[\"那么直接用装饰器就行\",{\"1\":{\"63\":1}}],[\"那么肯定要有拦截器\",{\"1\":{\"44\":1}}],[\"那么接口使用方式如下\",{\"1\":{\"40\":1}}],[\"那么如何将blog转换为blogresp呢\",{\"1\":{\"40\":1}}],[\"博客响应类\",{\"1\":{\"40\":1}}],[\"博客响应\",{\"1\":{\"40\":1}}],[\"博客创建时间戳\",{\"1\":{\"40\":2}}],[\"博客内容\",{\"1\":{\"40\":2}}],[\"博客描述\",{\"1\":{\"40\":2}}],[\"博客标题\",{\"1\":{\"40\":2}}],[\"博客作者id\",{\"1\":{\"40\":1}}],[\"博客实体类\",{\"1\":{\"40\":2}}],[\"=>\",{\"1\":{\"93\":1,\"95\":2,\"96\":2,\"103\":2,\"108\":1,\"109\":4}}],[\"==\",{\"1\":{\"40\":3,\"43\":1,\"57\":2,\"58\":6,\"86\":2,\"96\":1,\"97\":1,\"108\":2}}],[\"=\",{\"1\":{\"40\":33,\"43\":9,\"44\":11,\"47\":1,\"48\":1,\"49\":10,\"53\":1,\"57\":13,\"58\":9,\"61\":3,\"62\":16,\"72\":1,\"74\":1,\"80\":1,\"81\":14,\"86\":23,\"87\":1,\"93\":1,\"95\":2,\"96\":1,\"97\":1,\"100\":4,\"103\":1,\"106\":6,\"108\":4,\"109\":3}}],[\"定义如下\",{\"1\":{\"40\":2}}],[\"found\",{\"1\":{\"110\":1}}],[\"formdata\",{\"1\":{\"106\":4}}],[\"format\",{\"1\":{\"81\":1}}],[\"for\",{\"1\":{\"62\":1,\"105\":1}}],[\"function\",{\"1\":{\"97\":1,\"100\":1,\"106\":1}}],[\"filename\",{\"1\":{\"81\":3}}],[\"file\",{\"1\":{\"80\":1,\"100\":1,\"106\":5}}],[\"findallids\",{\"1\":{\"62\":1}}],[\"findallusers\",{\"1\":{\"62\":1}}],[\"finduserbyid\",{\"1\":{\"58\":1,\"62\":1}}],[\"finditembyid\",{\"1\":{\"49\":1,\"58\":2}}],[\"findroutelistbyid\",{\"1\":{\"48\":1}}],[\"findrouteitemsbyrouteid\",{\"1\":{\"47\":1,\"48\":1}}],[\"findlocationbyid\",{\"1\":{\"47\":1,\"48\":1}}],[\"finalfilename\",{\"1\":{\"81\":2}}],[\"finally\",{\"1\":{\"58\":1,\"106\":1}}],[\"final\",{\"1\":{\"43\":3,\"57\":3,\"86\":10}}],[\"final<\",{\"1\":{\"39\":2}}],[\"fromserializer\",{\"1\":{\"61\":2}}],[\"from\",{\"1\":{\"47\":1,\"48\":1,\"49\":2,\"53\":1,\"93\":1,\"103\":3,\"108\":1,\"109\":1}}],[\"factory\",{\"1\":{\"74\":1}}],[\"favicon\",{\"1\":{\"44\":1}}],[\"false\",{\"1\":{\"43\":2,\"44\":4,\"57\":2,\"61\":1,\"97\":2,\"100\":1,\"109\":1}}],[\"fast\",{\"1\":{\"38\":1}}],[\"5位\",{\"1\":{\"85\":2}}],[\"5s\",{\"1\":{\"61\":2}}],[\"5\",{\"1\":{\"39\":4,\"58\":2,\"86\":2}}],[\"5173\",{\"1\":{\"27\":1}}],[\"<i\",{\"1\":{\"100\":1}}],[\"<id\",{\"1\":{\"47\":2,\"48\":2,\"49\":1,\"53\":1}}],[\"<el\",{\"1\":{\"100\":2}}],[\"<<\",{\"1\":{\"86\":6}}],[\"<version>3\",{\"1\":{\"79\":1}}],[\"<version>1\",{\"1\":{\"39\":2}}],[\"<groupid>com\",{\"1\":{\"79\":1}}],[\"<groupid>org\",{\"1\":{\"39\":2,\"60\":2}}],[\"<t>\",{\"1\":{\"74\":4}}],[\"<=\",{\"1\":{\"58\":1,\"86\":1}}],[\"<case\",{\"1\":{\"49\":3}}],[\"<collection\",{\"1\":{\"48\":1}}],[\"<discriminator\",{\"1\":{\"49\":1}}],[\"<dependency>\",{\"1\":{\"39\":2,\"60\":2,\"79\":1}}],[\"<select\",{\"1\":{\"47\":1,\"48\":1,\"49\":1,\"53\":1}}],[\"<scope>provided<\",{\"1\":{\"39\":1}}],[\"<artifactid>aliyun\",{\"1\":{\"79\":1}}],[\"<artifactid>spring\",{\"1\":{\"60\":2}}],[\"<artifactid>mapstruct\",{\"1\":{\"39\":1}}],[\"<artifactid>mapstruct<\",{\"1\":{\"39\":1}}],[\"<association\",{\"1\":{\"47\":1,\"48\":1}}],[\"<result\",{\"1\":{\"47\":4,\"48\":2,\"49\":5,\"53\":6}}],[\"<resultmap\",{\"1\":{\"47\":2,\"48\":2,\"49\":2,\"53\":1}}],[\"<\",{\"1\":{\"39\":2,\"47\":5,\"48\":5,\"49\":7,\"53\":2,\"60\":2,\"79\":1,\"86\":3,\"100\":1}}],[\"类型安全且易于理解\",{\"1\":{\"38\":1}}],[\"因此\",{\"1\":{\"71\":1}}],[\"因此速度快\",{\"1\":{\"38\":1}}],[\"因为id是正数\",{\"1\":{\"85\":1}}],[\"因为使用了b+树\",{\"1\":{\"84\":1}}],[\"因为我的网站取名还是太抽象了\",{\"1\":{\"13\":1}}],[\"因为全栈才符合牛马的气质啊\",{\"1\":{\"12\":1}}],[\"大概意思是\",{\"1\":{\"38\":1}}],[\"大肠\",{\"1\":{\"13\":1}}],[\"大肠包小肠\",{\"1\":{\"13\":1}}],[\"background\",{\"1\":{\"106\":1}}],[\"backwards\",{\"1\":{\"86\":1}}],[\"baseurl\",{\"1\":{\"93\":1}}],[\"based\",{\"1\":{\"38\":1}}],[\"bit\",{\"1\":{\"86\":10}}],[\"birthday\",{\"1\":{\"53\":2}}],[\"b表和c表都存储a表的数据\",{\"1\":{\"65\":1}}],[\"b建立一张表\",{\"1\":{\"65\":1}}],[\"b\",{\"1\":{\"65\":2}}],[\"bucketname\",{\"1\":{\"80\":1,\"81\":4}}],[\"bucket\",{\"1\":{\"80\":1}}],[\"bussinessexception\",{\"1\":{\"58\":1}}],[\"build\",{\"1\":{\"40\":1,\"61\":1,\"81\":1}}],[\"builder\",{\"1\":{\"40\":3,\"43\":2,\"61\":1}}],[\"bytearrayinputstream\",{\"1\":{\"81\":1}}],[\"by\",{\"1\":{\"47\":1}}],[\"blogservice\",{\"1\":{\"74\":3}}],[\"blogconvertmapperimpl\",{\"1\":{\"40\":2}}],[\"blogconvertmapper\",{\"1\":{\"40\":8}}],[\"blogrespbuilder\",{\"1\":{\"40\":1}}],[\"blogresp\",{\"1\":{\"40\":17}}],[\"blog\",{\"1\":{\"40\":20}}],[\"be\",{\"1\":{\"86\":2}}],[\"bearer\",{\"1\":{\"44\":1}}],[\"beans\",{\"1\":{\"74\":1}}],[\"bean类型之间进行映射的实现\",{\"1\":{\"38\":1}}],[\"bean\",{\"1\":{\"38\":1,\"61\":2,\"74\":1}}],[\"beforeunload\",{\"1\":{\"109\":2}}],[\"beforeunloadhandler\",{\"1\":{\"109\":3}}],[\"beforeeach\",{\"1\":{\"108\":1,\"109\":1}}],[\"before\",{\"1\":{\"43\":1,\"99\":1}}],[\"between\",{\"1\":{\"38\":1}}],[\"boolean\",{\"1\":{\"43\":2,\"44\":3,\"57\":6}}],[\"boot<\",{\"1\":{\"60\":2}}],[\"boot\",{\"1\":{\"24\":2,\"45\":1,\"60\":2}}],[\"bo\",{\"1\":{\"36\":1}}],[\"i>\",{\"1\":{\"100\":1}}],[\"ioexception\",{\"1\":{\"81\":1}}],[\"import\",{\"1\":{\"93\":1,\"103\":3}}],[\"implements\",{\"1\":{\"40\":1,\"44\":2,\"62\":1}}],[\"implementation\",{\"1\":{\"38\":1}}],[\"image\",{\"1\":{\"81\":1,\"106\":1}}],[\"imageservice\",{\"1\":{\"81\":1}}],[\"icacheservice<user>\",{\"1\":{\"62\":2}}],[\"icacheservice<e>\",{\"1\":{\"62\":1}}],[\"icon\",{\"1\":{\"100\":2,\"106\":1}}],[\"ico\",{\"1\":{\"44\":1}}],[\"ie\",{\"1\":{\"58\":1}}],[\"illegalargumentexception\",{\"1\":{\"58\":1,\"86\":2}}],[\"itemcacheservice\",{\"1\":{\"58\":2}}],[\"itemdto\",{\"1\":{\"58\":14}}],[\"itemtype\",{\"1\":{\"49\":1}}],[\"item\",{\"1\":{\"49\":1,\"58\":10}}],[\"itemresultmap\",{\"1\":{\"49\":3}}],[\"itemmapper\",{\"1\":{\"49\":2,\"58\":5}}],[\"item表中存储了一个type字段\",{\"1\":{\"49\":1}}],[\"item`\",{\"1\":{\"47\":1,\"49\":15}}],[\"if=\",{\"1\":{\"100\":1}}],[\"if\",{\"1\":{\"40\":2,\"44\":5,\"57\":2,\"58\":5,\"62\":1,\"86\":5,\"95\":1,\"96\":1,\"97\":1,\"108\":3,\"109\":4}}],[\"ids\",{\"1\":{\"62\":2}}],[\"idutil\",{\"1\":{\"58\":1}}],[\"id标签的property属性必须与java实体类的属性名一致\",{\"1\":{\"54\":1}}],[\"id来查询location对象\",{\"1\":{\"47\":1}}],[\"id`\",{\"1\":{\"47\":2,\"49\":2}}],[\"id=\",{\"1\":{\"47\":3,\"48\":3,\"49\":3,\"53\":2}}],[\"id\",{\"1\":{\"40\":3,\"47\":5,\"48\":7,\"49\":3,\"53\":4,\"62\":14,\"72\":1,\"80\":1,\"86\":1,\"87\":2}}],[\"ini文件\",{\"1\":{\"68\":1}}],[\"insertfn\",{\"1\":{\"106\":2}}],[\"insertitemusr\",{\"1\":{\"58\":1}}],[\"instance\",{\"1\":{\"40\":2}}],[\"install\",{\"1\":{\"27\":1,\"92\":1,\"102\":1,\"105\":2}}],[\"int\",{\"1\":{\"58\":1}}],[\"interceptors\",{\"1\":{\"95\":1,\"96\":1}}],[\"interceptorregistry\",{\"1\":{\"44\":1}}],[\"interrupt\",{\"1\":{\"58\":1}}],[\"interruptedexception\",{\"1\":{\"58\":1}}],[\"interface\",{\"1\":{\"40\":1,\"62\":1}}],[\"inf\",{\"1\":{\"44\":3}}],[\"index\",{\"1\":{\"44\":1,\"108\":1}}],[\"invalid\",{\"1\":{\"44\":1}}],[\"invocations\",{\"1\":{\"38\":1}}],[\"isrefreshtokenvalid\",{\"1\":{\"108\":2}}],[\"isaccesstokenvalid\",{\"1\":{\"108\":2}}],[\"isitemstarredbyuser\",{\"1\":{\"58\":1}}],[\"isolation\",{\"1\":{\"58\":2}}],[\"isempty\",{\"1\":{\"44\":1,\"109\":2}}],[\"istokenexpired\",{\"1\":{\"43\":2,\"44\":2,\"108\":1}}],[\"is\",{\"1\":{\"38\":2}}],[\"首先是自定义回调函数\",{\"1\":{\"109\":1}}],[\"首先是uploadimage方法\",{\"1\":{\"106\":1}}],[\"首先在vite\",{\"1\":{\"93\":1}}],[\"首先配置基础路径\",{\"0\":{\"93\":1}}],[\"首先应该生成一个accesskey\",{\"1\":{\"77\":1}}],[\"首先创建一个阿里账号\",{\"1\":{\"77\":1}}],[\"首先引用官网的原话\",{\"1\":{\"38\":1}}],[\"首先给出我参考的项目地址\",{\"1\":{\"2\":1}}],[\"在卸载的时候移除监听\",{\"1\":{\"109\":1}}],[\"在router\",{\"1\":{\"108\":1}}],[\"在我开发的飞马旅游中为了让地图的主题跟随项目主题变化而变化\",{\"1\":{\"101\":1}}],[\"在handleavatarupload的时候就不会再上传文件了\",{\"1\":{\"100\":1}}],[\"在同一毫秒内\",{\"1\":{\"88\":1}}],[\"在分布式环境下\",{\"1\":{\"88\":1}}],[\"在分布式系统中\",{\"1\":{\"83\":1}}],[\"在边栏权限访问处\",{\"1\":{\"78\":1}}],[\"在java中\",{\"1\":{\"71\":1}}],[\"在实体类中\",{\"1\":{\"69\":1}}],[\"在开发过程中\",{\"1\":{\"52\":1}}],[\"在开发中我们会用到很多类\",{\"1\":{\"37\":1}}],[\"在请求处理之前进行拦截\",{\"1\":{\"44\":1}}],[\"在字节码里面会加上\",{\"1\":{\"40\":1}}],[\"在application\",{\"1\":{\"24\":1}}],[\"前端相关的\",{\"1\":{\"90\":1}}],[\"前端\",{\"0\":{\"90\":1}}],[\"前端传后端的数据和后端传前端的数据\",{\"1\":{\"32\":1}}],[\"前言\",{\"0\":{\"52\":1,\"68\":1,\"71\":1,\"74\":1}}],[\"前面说到\",{\"1\":{\"37\":1}}],[\"概念pojo\",{\"1\":{\"36\":1}}],[\"他们之间可以相互转换\",{\"1\":{\"35\":1}}],[\"应当注意的是这些o之间并不是固定的\",{\"1\":{\"35\":1}}],[\"editblog\",{\"1\":{\"106\":1}}],[\"editorconfig\",{\"1\":{\"106\":1}}],[\"editor\",{\"1\":{\"105\":2}}],[\"emit\",{\"1\":{\"103\":1}}],[\"emitter\",{\"1\":{\"103\":7}}],[\"elloading\",{\"1\":{\"106\":1}}],[\"el\",{\"0\":{\"98\":1},\"1\":{\"99\":1,\"100\":2,\"106\":1}}],[\"elmessage\",{\"1\":{\"97\":3,\"106\":2}}],[\"else\",{\"1\":{\"40\":1,\"49\":2,\"57\":2,\"62\":1,\"86\":1,\"96\":1,\"100\":1,\"108\":3,\"109\":2}}],[\"err\",{\"1\":{\"96\":1}}],[\"error\",{\"1\":{\"95\":2,\"96\":5,\"97\":5,\"106\":2,\"108\":4}}],[\"eventbus\",{\"1\":{\"103\":2}}],[\"event\",{\"1\":{\"62\":2,\"109\":3}}],[\"eventlistener\",{\"1\":{\"62\":1}}],[\"entryttl\",{\"1\":{\"61\":1}}],[\"entity详解\",{\"1\":{\"36\":1}}],[\"entity\",{\"1\":{\"35\":1}}],[\"endpoint\",{\"1\":{\"80\":1,\"81\":2}}],[\"end\",{\"1\":{\"49\":2,\"57\":2,\"80\":1}}],[\"e\",{\"1\":{\"43\":1,\"58\":2,\"62\":2}}],[\"example\",{\"1\":{\"106\":1}}],[\"export\",{\"1\":{\"103\":1}}],[\"expired\",{\"1\":{\"108\":1}}],[\"expire\",{\"1\":{\"57\":2}}],[\"expiration\",{\"1\":{\"43\":2,\"81\":2}}],[\"execute\",{\"1\":{\"57\":2}}],[\"extends=\",{\"1\":{\"49\":1}}],[\"extractedkey\",{\"1\":{\"43\":3}}],[\"extractkey\",{\"1\":{\"43\":2,\"44\":1}}],[\"extractclaims\",{\"1\":{\"43\":3}}],[\"excludepathpatterns\",{\"1\":{\"44\":2}}],[\"exception\",{\"1\":{\"44\":1}}],[\"easy\",{\"1\":{\"38\":1}}],[\"equalsignorecase\",{\"1\":{\"44\":1}}],[\"equals\",{\"1\":{\"30\":1,\"43\":1}}],[\"rgba\",{\"1\":{\"106\":1}}],[\"router\",{\"1\":{\"108\":1,\"109\":1}}],[\"routeresultmap\",{\"1\":{\"48\":2}}],[\"route\",{\"1\":{\"48\":1}}],[\"routelistmapper\",{\"1\":{\"48\":1}}],[\"routeid\",{\"1\":{\"47\":1}}],[\"routeitems\",{\"1\":{\"48\":1}}],[\"routeitem\",{\"1\":{\"47\":1,\"48\":1}}],[\"routeitemresultmap\",{\"1\":{\"47\":2,\"48\":1}}],[\"routeitemmapper\",{\"1\":{\"47\":1,\"48\":2}}],[\"removeeventlistener\",{\"1\":{\"109\":1}}],[\"removeglobalguard\",{\"1\":{\"109\":3}}],[\"reject\",{\"1\":{\"95\":1,\"96\":2}}],[\"replace\",{\"1\":{\"93\":1}}],[\"rewrite\",{\"1\":{\"93\":1}}],[\"refusing\",{\"1\":{\"86\":1}}],[\"refreshaccesstoken\",{\"1\":{\"108\":1}}],[\"refreshing\",{\"1\":{\"108\":2}}],[\"refreshtokenvalid\",{\"1\":{\"44\":3}}],[\"refreshtoken\",{\"1\":{\"44\":6,\"97\":2,\"100\":3,\"108\":4}}],[\"refresh\",{\"1\":{\"43\":2,\"44\":4,\"100\":1}}],[\"retrycount\",{\"1\":{\"58\":4}}],[\"returnvalue\",{\"1\":{\"109\":1}}],[\"return\",{\"1\":{\"40\":5,\"43\":13,\"44\":4,\"57\":6,\"58\":2,\"61\":2,\"62\":5,\"74\":4,\"81\":1,\"86\":4,\"95\":1,\"96\":3,\"97\":3,\"106\":1}}],[\"redisserializationcontext\",{\"1\":{\"61\":2}}],[\"redisscript<boolean>\",{\"1\":{\"57\":2}}],[\"rediscachemanager\",{\"1\":{\"61\":1}}],[\"rediscacheconfiguration\",{\"1\":{\"61\":2}}],[\"redisconnectionfactory\",{\"1\":{\"61\":4}}],[\"redis<\",{\"1\":{\"60\":1}}],[\"redis\",{\"1\":{\"57\":4,\"61\":3}}],[\"redistemplate<>\",{\"1\":{\"61\":1}}],[\"redistemplate<string\",{\"1\":{\"57\":1,\"61\":2}}],[\"redistemplate\",{\"1\":{\"57\":3,\"61\":8}}],[\"redisdistributedlock\",{\"1\":{\"57\":1,\"58\":2}}],[\"redis锁在spring中的使用\",{\"0\":{\"56\":1}}],[\"recommend`\",{\"1\":{\"49\":1}}],[\"res\",{\"1\":{\"96\":4,\"106\":2}}],[\"result\",{\"1\":{\"57\":6}}],[\"result标签的property属性必须与java实体类的属性名一致\",{\"1\":{\"54\":1}}],[\"resultmap的id属性必须与select语句的resultmap一致\",{\"1\":{\"54\":1}}],[\"resultmap=\",{\"1\":{\"47\":1,\"48\":1,\"49\":4,\"53\":1}}],[\"resultmap>\",{\"1\":{\"47\":2,\"48\":2,\"49\":2,\"53\":1}}],[\"resultmap写法如下\",{\"1\":{\"47\":1,\"48\":1,\"49\":1}}],[\"restaurantresultmap\",{\"1\":{\"49\":1}}],[\"restaurantmapper\",{\"1\":{\"49\":1}}],[\"restaurant\",{\"1\":{\"49\":4}}],[\"resources\",{\"1\":{\"44\":3}}],[\"resourcehandlerregistry\",{\"1\":{\"44\":1}}],[\"response\",{\"1\":{\"44\":5,\"96\":3,\"97\":5,\"100\":3}}],[\"resp\",{\"1\":{\"35\":1}}],[\"register\",{\"1\":{\"44\":1,\"108\":1}}],[\"registry\",{\"1\":{\"44\":6}}],[\"request\",{\"1\":{\"44\":4,\"80\":1,\"95\":1}}],[\"req\",{\"1\":{\"35\":1}}],[\"runtimeexception\",{\"1\":{\"86\":1}}],[\"run\",{\"1\":{\"27\":1}}],[\"还有一个blogresp的vo\",{\"1\":{\"40\":1}}],[\"还有些没列出来\",{\"1\":{\"35\":1}}],[\"还是不建议直接使用iconfont\",{\"1\":{\"6\":1}}],[\"个人写只用到vo\",{\"1\":{\"35\":1}}],[\"个人理解\",{\"0\":{\"35\":1}}],[\"个人留言\",{\"0\":{\"12\":1}}],[\"其他表示失败\",{\"1\":{\"106\":1}}],[\"其中包含了生成token\",{\"1\":{\"43\":1}}],[\"其中\",{\"1\":{\"40\":1}}],[\"其中每个字段都和数据库中的属性一一对应\",{\"1\":{\"34\":1}}],[\"其实加了componentmodel\",{\"1\":{\"40\":1}}],[\"其实都是根据业务场景来划分的\",{\"1\":{\"35\":1}}],[\"其实大概意思就是只有data\",{\"1\":{\"30\":1}}],[\"持久化对象\",{\"1\":{\"34\":1}}],[\"数据中心和机器id的分配\",{\"1\":{\"88\":1}}],[\"数据中心部分\",{\"1\":{\"86\":1}}],[\"数据中心\",{\"1\":{\"86\":1}}],[\"数据中心占用的位数\",{\"1\":{\"86\":1}}],[\"数据中心id\",{\"1\":{\"85\":1}}],[\"数据id\",{\"1\":{\"62\":1}}],[\"数据传输对象\",{\"1\":{\"34\":1}}],[\"数据库\",{\"1\":{\"21\":1}}],[\"专门为前端服务的对象\",{\"1\":{\"34\":1}}],[\"显示层对象\",{\"1\":{\"34\":1}}],[\"只有数据\",{\"1\":{\"34\":1}}],[\"只有一个人在写\",{\"1\":{\"18\":1}}],[\"它能够保证在分布式环境下生成的id是唯一的\",{\"1\":{\"83\":1,\"89\":1}}],[\"它可以自动生成转换代码\",{\"1\":{\"41\":1}}],[\"它大大简化了基于约定优于配置的方法在java\",{\"1\":{\"38\":1}}],[\"它们之间的区别如下\",{\"1\":{\"34\":1}}],[\"它是一个持久化对象\",{\"1\":{\"33\":1}}],[\"它是一个数据传输对象\",{\"1\":{\"32\":1}}],[\"它是一个视图对象\",{\"1\":{\"31\":1}}],[\"它是一个简单的java对象\",{\"1\":{\"30\":1}}],[\"理解为po中的字段和数据库中的字段一一对应\",{\"1\":{\"33\":1}}],[\"理解为dto为各层传输的对象\",{\"1\":{\"32\":1}}],[\"包含前端想要的数据\",{\"1\":{\"31\":1,\"34\":1}}],[\"或者耍流氓存向量或者json\",{\"1\":{\"66\":1}}],[\"或者用于作为业务逻辑层的参数和返回值\",{\"1\":{\"32\":1,\"33\":1}}],[\"或者用于表示一个数据库表中的一条记录\",{\"1\":{\"32\":1}}],[\"或者一个网页的显示数据\",{\"1\":{\"31\":1}}],[\"或者搜索框无法关闭\",{\"1\":{\"8\":1}}],[\"例如一个网页的表单数据\",{\"1\":{\"31\":1}}],[\"headers=\",{\"1\":{\"100\":1}}],[\"headers\",{\"1\":{\"95\":1}}],[\"hotelresultmap\",{\"1\":{\"49\":1}}],[\"hotelmapper\",{\"1\":{\"49\":1}}],[\"hotel\",{\"1\":{\"49\":4}}],[\"hope官网介绍\",{\"1\":{\"6\":1}}],[\"http\",{\"1\":{\"93\":1,\"106\":1}}],[\"https\",{\"1\":{\"81\":1}}],[\"httpservletresponse\",{\"1\":{\"44\":3}}],[\"httpservletrequest\",{\"1\":{\"44\":1}}],[\"html\",{\"1\":{\"44\":4}}],[\"handleavatarupload\",{\"1\":{\"100\":2}}],[\"handler\",{\"1\":{\"44\":1}}],[\"handlerinterceptor\",{\"1\":{\"44\":1}}],[\"hashcode这些方法\",{\"1\":{\"30\":1}}],[\"hs512\",{\"1\":{\"43\":2}}],[\"gmt+8\",{\"1\":{\"40\":2,\"69\":1}}],[\"greater\",{\"1\":{\"86\":2}}],[\"greatly\",{\"1\":{\"38\":1}}],[\"groupid>\",{\"1\":{\"39\":2,\"60\":2,\"79\":1}}],[\"genericjackson2jsonredisserializer\",{\"1\":{\"61\":6}}],[\"generateid\",{\"1\":{\"87\":1}}],[\"generate\",{\"1\":{\"86\":1}}],[\"generatepresignedurl\",{\"1\":{\"81\":1}}],[\"generaterefreshtoken\",{\"1\":{\"43\":1}}],[\"generatetoken\",{\"1\":{\"43\":1,\"44\":1}}],[\"generated\",{\"1\":{\"38\":1}}],[\"generator\",{\"1\":{\"38\":1}}],[\"gender\",{\"1\":{\"53\":2}}],[\"getnextmill\",{\"1\":{\"86\":2}}],[\"getnewstmp\",{\"1\":{\"86\":4}}],[\"getoriginalfilename\",{\"1\":{\"81\":1}}],[\"getaccesskeysecret\",{\"1\":{\"81\":1}}],[\"getaccesskeyid\",{\"1\":{\"81\":1}}],[\"getendpoint\",{\"1\":{\"81\":2}}],[\"getexpiration\",{\"1\":{\"43\":1}}],[\"getbytes\",{\"1\":{\"81\":1}}],[\"getbucketname\",{\"1\":{\"81\":1}}],[\"getbean\",{\"1\":{\"74\":2}}],[\"getbody\",{\"1\":{\"43\":1}}],[\"getservice\",{\"1\":{\"74\":3}}],[\"getstarnumber\",{\"1\":{\"58\":1}}],[\"getsubject\",{\"1\":{\"43\":1}}],[\"getitemid\",{\"1\":{\"58\":2}}],[\"getitem\",{\"1\":{\"58\":4,\"95\":1,\"100\":2,\"108\":2}}],[\"getid\",{\"1\":{\"40\":1,\"58\":5,\"62\":1}}],[\"get\",{\"1\":{\"57\":1,\"58\":1,\"62\":4}}],[\"getuser\",{\"1\":{\"58\":3}}],[\"getuserbyid\",{\"1\":{\"53\":1,\"62\":1}}],[\"getuserid\",{\"1\":{\"40\":1}}],[\"getwriter\",{\"1\":{\"44\":1}}],[\"getheader\",{\"1\":{\"44\":2}}],[\"getmethod\",{\"1\":{\"44\":1}}],[\"getmapper\",{\"1\":{\"40\":1}}],[\"gettitle\",{\"1\":{\"40\":1}}],[\"getter\",{\"1\":{\"30\":1}}],[\"getdescription\",{\"1\":{\"40\":1}}],[\"getcache\",{\"1\":{\"62\":3}}],[\"getcreateat\",{\"1\":{\"40\":1}}],[\"getcontent\",{\"1\":{\"40\":1}}],[\"github\",{\"1\":{\"2\":1,\"3\":1}}],[\"out\",{\"1\":{\"87\":1}}],[\"ossclientbuilder\",{\"1\":{\"81\":1}}],[\"ossclient\",{\"1\":{\"81\":4}}],[\"ossconfig\",{\"1\":{\"80\":1,\"81\":7}}],[\"oss\",{\"1\":{\"80\":2,\"81\":1}}],[\"oss<\",{\"1\":{\"79\":2}}],[\"oss1\",{\"1\":{\"77\":1}}],[\"or\",{\"1\":{\"86\":2}}],[\"org\",{\"1\":{\"74\":1}}],[\"order\",{\"1\":{\"47\":3,\"48\":2}}],[\"operate\",{\"1\":{\"58\":1}}],[\"options\",{\"1\":{\"44\":1}}],[\"ok\",{\"1\":{\"44\":1}}],[\"override\",{\"1\":{\"44\":3,\"62\":3}}],[\"over\",{\"1\":{\"38\":1}}],[\"onbeforeunmount\",{\"1\":{\"109\":1}}],[\"onmounted\",{\"1\":{\"109\":1}}],[\"on\",{\"1\":{\"38\":1,\"49\":3,\"100\":1,\"103\":1}}],[\"off\",{\"1\":{\"103\":1}}],[\"ofminutes\",{\"1\":{\"61\":1}}],[\"of\",{\"1\":{\"38\":1,\"58\":1,\"74\":1}}],[\"objectmetadata\",{\"1\":{\"81\":5}}],[\"objectname\",{\"1\":{\"81\":4}}],[\"object>\",{\"1\":{\"58\":2,\"61\":2}}],[\"object\",{\"1\":{\"34\":4,\"44\":1}}],[\"object的缩写\",{\"1\":{\"30\":1,\"31\":1,\"32\":1,\"33\":1}}],[\"old\",{\"1\":{\"30\":1,\"34\":1}}],[\"后端返回接口样例如下\",{\"1\":{\"106\":1}}],[\"后端相关的\",{\"1\":{\"28\":1}}],[\"后端\",{\"0\":{\"28\":1}}],[\"成功启动vue项目\",{\"1\":{\"27\":1}}],[\"打开浏览器访问http\",{\"1\":{\"27\":1}}],[\"这串url可以直接访问图片\",{\"1\":{\"81\":1}}],[\"这时\",{\"1\":{\"52\":1}}],[\"这时候会根据id来查询routeitem对象\",{\"1\":{\"48\":1}}],[\"这时候会根据loc\",{\"1\":{\"47\":1}}],[\"这时候我们可以通过<discriminator>标签来实现\",{\"1\":{\"49\":1}}],[\"这时候我们可以通过<collection>标签来实现\",{\"1\":{\"48\":1}}],[\"这时候我们可以通过<association>标签来实现\",{\"1\":{\"47\":1}}],[\"这样防止没有token的用户进入保护区域\",{\"1\":{\"108\":1}}],[\"这样在action的时候就会上传文件\",{\"1\":{\"100\":1}}],[\"这样就可以获取到代理bean了\",{\"1\":{\"75\":1}}],[\"这样就可以避免精度缺失的问题了\",{\"1\":{\"72\":1}}],[\"这样就大功告成了\",{\"1\":{\"44\":1}}],[\"这样减少开销\",{\"1\":{\"66\":1}}],[\"这样做查询时需要建立表的链接\",{\"1\":{\"65\":1}}],[\"这样做的好处是\",{\"1\":{\"65\":1}}],[\"这样当我们使用像selectall这样的方法的时候可以逐条缓存起来\",{\"1\":{\"62\":1}}],[\"这样\",{\"1\":{\"45\":1}}],[\"这里可以写上你的回调函数\",{\"1\":{\"103\":2}}],[\"这里是基于双token实现的\",{\"1\":{\"108\":1}}],[\"这里是设置过期时间\",{\"1\":{\"81\":1}}],[\"这里是为了按照日期分文件管理\",{\"1\":{\"81\":1}}],[\"这里是演示所以全选否\",{\"1\":{\"27\":1}}],[\"这里配置你的bucket\",{\"1\":{\"77\":1}}],[\"这里使用的是新人免费\",{\"1\":{\"77\":1}}],[\"这里简化了逻辑\",{\"1\":{\"58\":1}}],[\"这里只是简单演示\",{\"1\":{\"57\":1}}],[\"这里指的是一个对象中包含多个对象\",{\"1\":{\"48\":1}}],[\"这里指的是一个对象中包含一个对象\",{\"1\":{\"47\":1}}],[\"这里的spotresultmap继承了itemresultmap\",{\"1\":{\"49\":1}}],[\"这里的secret\",{\"1\":{\"43\":1}}],[\"这里的expiration\",{\"1\":{\"43\":1}}],[\"这两个属性需要从user表中获取\",{\"1\":{\"40\":1}}],[\"这么多个o\",{\"1\":{\"35\":1}}],[\"这个官网里面也有给出\",{\"1\":{\"7\":1}}],[\"这个jquery加载比较慢\",{\"1\":{\"5\":1}}],[\"这个实现在\",{\"1\":{\"5\":1}}],[\"v\",{\"1\":{\"100\":2}}],[\"val\",{\"1\":{\"62\":2}}],[\"values\",{\"1\":{\"61\":1}}],[\"valueof\",{\"1\":{\"57\":1}}],[\"value\",{\"1\":{\"57\":4,\"62\":3,\"97\":2,\"100\":1,\"109\":2}}],[\"value=\",{\"1\":{\"49\":3}}],[\"validatetoken\",{\"1\":{\"43\":1}}],[\"v3\",{\"1\":{\"44\":2}}],[\"version>\",{\"1\":{\"39\":2,\"79\":1}}],[\"view\",{\"1\":{\"34\":1}}],[\"void\",{\"1\":{\"44\":2,\"62\":5,\"87\":1}}],[\"vo也可以认为是一种dto\",{\"1\":{\"32\":1}}],[\"vo通常用于作为视图层的参数和返回值\",{\"1\":{\"31\":1}}],[\"vo通常用于表示一个视图层的数据\",{\"1\":{\"31\":1}}],[\"vo是view\",{\"1\":{\"31\":1}}],[\"vo\",{\"0\":{\"31\":1,\"34\":1},\"1\":{\"34\":2,\"36\":1}}],[\"vue\",{\"1\":{\"27\":1,\"105\":1}}],[\"vscode\",{\"0\":{\"21\":1,\"25\":1},\"1\":{\"22\":1,\"23\":1,\"26\":1}}],[\"vscode一条龙服务\",{\"0\":{\"20\":1}}],[\"next\",{\"1\":{\"105\":1,\"108\":6,\"109\":4}}],[\"nextid\",{\"1\":{\"86\":1,\"87\":1}}],[\"nextint\",{\"1\":{\"81\":1}}],[\"newitem\",{\"1\":{\"58\":3}}],[\"newuser\",{\"1\":{\"58\":3}}],[\"newaccesstoken\",{\"1\":{\"44\":2}}],[\"new\",{\"1\":{\"43\":3,\"44\":1,\"57\":2,\"58\":3,\"61\":3,\"62\":1,\"81\":7,\"86\":3,\"96\":1,\"106\":1}}],[\"not\",{\"1\":{\"110\":1}}],[\"no\",{\"1\":{\"74\":1}}],[\"nosuchbeandefinitionexception\",{\"1\":{\"74\":1}}],[\"noargsconstructor\",{\"1\":{\"40\":2}}],[\"nickname\",{\"1\":{\"53\":2}}],[\"num\",{\"1\":{\"86\":6}}],[\"number类型是64位双精度浮点数\",{\"1\":{\"71\":1}}],[\"number`\",{\"1\":{\"49\":4}}],[\"number\",{\"1\":{\"49\":1}}],[\"null\",{\"1\":{\"40\":5,\"43\":6,\"44\":3,\"49\":2,\"57\":2,\"58\":7,\"61\":1,\"62\":1}}],[\"name\",{\"1\":{\"48\":2,\"49\":2,\"80\":1}}],[\"name=com\",{\"1\":{\"24\":1}}],[\"name=demo\",{\"1\":{\"24\":1}}],[\"npm\",{\"1\":{\"27\":3,\"92\":1,\"102\":1,\"105\":2}}],[\"创建bucket\",{\"0\":{\"77\":1}}],[\"创建博客时的时间戳\",{\"1\":{\"40\":2}}],[\"创建vue3项目\",{\"0\":{\"27\":1}}],[\"创建springboot项目\",{\"0\":{\"24\":1}}],[\"accseetoken\",{\"1\":{\"100\":1}}],[\"accesskeysecret\",{\"1\":{\"80\":1,\"81\":2}}],[\"accesskeyid\",{\"1\":{\"80\":1,\"81\":2}}],[\"accesskey界面\",{\"1\":{\"77\":1}}],[\"access\",{\"1\":{\"44\":6,\"80\":2,\"108\":2}}],[\"accesstokenvalid\",{\"1\":{\"44\":4}}],[\"accesstoken\",{\"1\":{\"44\":6,\"95\":4,\"97\":2,\"108\":4}}],[\"action=\",{\"1\":{\"100\":1}}],[\"await\",{\"1\":{\"97\":1,\"106\":2,\"108\":1}}],[\"axios\",{\"1\":{\"92\":1,\"93\":3}}],[\"axios的拦截器和请求器\",{\"0\":{\"91\":1}}],[\"arraylist<>\",{\"1\":{\"62\":1}}],[\"arrays\",{\"1\":{\"57\":2}}],[\"args\",{\"1\":{\"57\":4}}],[\"argv\",{\"1\":{\"57\":3}}],[\"artifactid>\",{\"1\":{\"39\":2,\"60\":2,\"79\":1}}],[\"available\",{\"1\":{\"74\":1}}],[\"avatar\",{\"1\":{\"53\":2,\"100\":6}}],[\"avg\",{\"1\":{\"49\":3}}],[\"avglevel\",{\"1\":{\"49\":1}}],[\"async会导致bean被代理\",{\"1\":{\"75\":1}}],[\"async导致了无法获取\",{\"1\":{\"75\":1}}],[\"asyncexecutor\",{\"1\":{\"62\":2}}],[\"async\",{\"1\":{\"62\":2,\"97\":1,\"106\":2,\"108\":1}}],[\"aslist\",{\"1\":{\"57\":2}}],[\"as\",{\"1\":{\"49\":7}}],[\"addeventlistener\",{\"1\":{\"109\":1}}],[\"add\",{\"1\":{\"62\":2}}],[\"address\",{\"1\":{\"47\":2}}],[\"addresourcelocations\",{\"1\":{\"44\":3}}],[\"addresourcehandler\",{\"1\":{\"44\":3}}],[\"addresourcehandlers\",{\"1\":{\"44\":1}}],[\"addinterceptor\",{\"1\":{\"44\":1}}],[\"addinterceptors\",{\"1\":{\"44\":1}}],[\"api\",{\"1\":{\"44\":5,\"45\":1,\"93\":4,\"100\":1}}],[\"append\",{\"1\":{\"106\":1}}],[\"approach\",{\"1\":{\"38\":1}}],[\"applicationcontext\",{\"1\":{\"74\":4}}],[\"application\",{\"1\":{\"24\":1}}],[\"authorization\",{\"1\":{\"44\":1,\"95\":1,\"100\":1}}],[\"autowired\",{\"1\":{\"40\":2,\"44\":1,\"57\":1,\"62\":3,\"74\":2,\"81\":1,\"87\":1}}],[\"abcdefghijklmnopqrstuvwxyz\",{\"1\":{\"43\":1}}],[\"algorithm\",{\"1\":{\"83\":1}}],[\"aliyun\",{\"1\":{\"79\":1,\"80\":2}}],[\"allargsconstructor\",{\"1\":{\"40\":2}}],[\"alt\",{\"1\":{\"26\":1,\"77\":1,\"78\":1}}],[\"and\",{\"1\":{\"38\":2}}],[\"a\",{\"1\":{\"38\":2}}],[\"默认已经安装了node\",{\"1\":{\"25\":1}}],[\"默认已经安装了jdk\",{\"1\":{\"21\":1}}],[\"启动vue3项目\",{\"0\":{\"25\":1}}],[\"启动项目\",{\"1\":{\"24\":1}}],[\"启动springboot项目\",{\"0\":{\"21\":1}}],[\"点击run启动项目\",{\"1\":{\"24\":1}}],[\"duration\",{\"1\":{\"61\":1}}],[\"discriminator>\",{\"1\":{\"49\":1}}],[\"docs\",{\"1\":{\"44\":2}}],[\"doc\",{\"1\":{\"44\":2}}],[\"default\",{\"1\":{\"68\":1,\"103\":1}}],[\"defaultcacheconfig\",{\"1\":{\"61\":1}}],[\"defaultredisscript<>\",{\"1\":{\"57\":2}}],[\"defaultvalue\",{\"1\":{\"40\":2}}],[\"deletebyid\",{\"1\":{\"62\":1}}],[\"deleteuser\",{\"1\":{\"62\":1}}],[\"del\",{\"1\":{\"57\":1}}],[\"desc\",{\"1\":{\"49\":1}}],[\"description\",{\"1\":{\"40\":19,\"49\":1}}],[\"dependency>\",{\"1\":{\"39\":2,\"60\":2,\"79\":1}}],[\"dev\",{\"1\":{\"27\":1}}],[\"date\",{\"1\":{\"43\":3,\"81\":3}}],[\"datacenterid\",{\"1\":{\"86\":8}}],[\"datacenter\",{\"1\":{\"86\":9}}],[\"database\",{\"1\":{\"61\":1}}],[\"data\",{\"1\":{\"34\":1,\"40\":2,\"44\":1,\"60\":1,\"61\":1,\"80\":1,\"96\":1,\"97\":6,\"100\":1,\"103\":4,\"106\":11}}],[\"datasource\",{\"1\":{\"24\":4}}],[\"day\",{\"1\":{\"43\":1}}],[\"dao\",{\"1\":{\"36\":1}}],[\"dto通常用于作为数据传输对象\",{\"1\":{\"32\":1}}],[\"dto通常用于表示一个业务实体\",{\"1\":{\"32\":1}}],[\"dto是data\",{\"1\":{\"32\":1}}],[\"dto\",{\"0\":{\"32\":1,\"34\":1},\"1\":{\"32\":1,\"33\":1,\"34\":2,\"35\":1,\"36\":1}}],[\"driver\",{\"1\":{\"24\":2}}],[\"util\",{\"1\":{\"103\":2}}],[\"utf\",{\"1\":{\"61\":3}}],[\"uuid的无序性会导致查询效率低下\",{\"1\":{\"84\":1}}],[\"url\",{\"1\":{\"81\":3,\"106\":1}}],[\"url=jdbc\",{\"1\":{\"24\":1}}],[\"upload>\",{\"1\":{\"100\":1}}],[\"uploadheaders\",{\"1\":{\"100\":2}}],[\"uploader\",{\"1\":{\"100\":2}}],[\"upload\",{\"1\":{\"99\":2,\"100\":1}}],[\"upload上传两次问题\",{\"0\":{\"98\":1}}],[\"uploadimage\",{\"1\":{\"81\":1,\"100\":1,\"106\":5}}],[\"updateevent\",{\"1\":{\"62\":2}}],[\"updatebyid\",{\"1\":{\"62\":1}}],[\"updateuser\",{\"1\":{\"62\":1}}],[\"updatestarnumber\",{\"1\":{\"58\":1}}],[\"ui\",{\"1\":{\"44\":2}}],[\"unlock\",{\"1\":{\"57\":3,\"58\":1}}],[\"unauthorized\",{\"1\":{\"44\":1}}],[\"understand\",{\"1\":{\"38\":1}}],[\"useimage\",{\"1\":{\"106\":1}}],[\"use\",{\"1\":{\"95\":1,\"96\":1}}],[\"users\",{\"1\":{\"62\":4}}],[\"usercacheservice\",{\"1\":{\"58\":1,\"62\":4}}],[\"usermapper\",{\"1\":{\"58\":1,\"62\":7}}],[\"user\",{\"1\":{\"53\":2,\"58\":2,\"62\":26,\"97\":2}}],[\"userresultmap\",{\"1\":{\"53\":2}}],[\"usernickname\",{\"1\":{\"40\":10}}],[\"username\",{\"1\":{\"40\":3}}],[\"username=root\",{\"1\":{\"24\":1}}],[\"useravatar\",{\"1\":{\"40\":13}}],[\"userid\",{\"1\":{\"40\":3,\"62\":2}}],[\"uses\",{\"1\":{\"38\":1}}],[\"t\",{\"1\":{\"74\":3,\"86\":2}}],[\"transactionaware\",{\"1\":{\"61\":1}}],[\"transactional\",{\"1\":{\"58\":1}}],[\"transfer\",{\"1\":{\"32\":1,\"34\":1}}],[\"true\",{\"1\":{\"43\":2,\"44\":2,\"57\":2,\"93\":1,\"97\":1,\"106\":1}}],[\"try\",{\"1\":{\"43\":1,\"58\":2,\"97\":1,\"106\":1,\"108\":1}}],[\"target\",{\"1\":{\"40\":2,\"93\":1}}],[\"timestmp\",{\"1\":{\"86\":2}}],[\"timestamp\",{\"1\":{\"40\":2,\"69\":1}}],[\"timeout\",{\"1\":{\"61\":2}}],[\"time也是固定的\",{\"1\":{\"43\":1}}],[\"time和refresh\",{\"1\":{\"43\":1}}],[\"time\",{\"1\":{\"43\":4,\"57\":2,\"61\":1,\"68\":1}}],[\"timezone=\",{\"1\":{\"40\":2,\"69\":1}}],[\"title\",{\"1\":{\"40\":3}}],[\"tokens\",{\"1\":{\"97\":2}}],[\"token\",{\"1\":{\"43\":15,\"44\":11,\"100\":3,\"108\":2}}],[\"token中包含的信息\",{\"1\":{\"43\":3}}],[\"toblogresp\",{\"1\":{\"40\":4}}],[\"to\",{\"1\":{\"38\":1,\"61\":1,\"86\":1,\"108\":3,\"109\":1}}],[\"tostring\",{\"1\":{\"30\":1,\"81\":1}}],[\"type属性必须与java实体类的全限定名一致\",{\"1\":{\"54\":1}}],[\"type`\",{\"1\":{\"49\":1}}],[\"type=\",{\"1\":{\"47\":2,\"48\":2,\"49\":2,\"53\":1}}],[\"type\",{\"1\":{\"38\":1,\"49\":2,\"61\":1,\"74\":1}}],[\"types\",{\"1\":{\"38\":1}}],[\"this\",{\"1\":{\"86\":2}}],[\"than\",{\"1\":{\"86\":4}}],[\"that\",{\"1\":{\"38\":1}}],[\"thread\",{\"1\":{\"58\":2}}],[\"throw\",{\"1\":{\"58\":4,\"86\":3}}],[\"throws\",{\"1\":{\"44\":1,\"81\":1}}],[\"thus\",{\"1\":{\"38\":1}}],[\"then\",{\"1\":{\"49\":6,\"57\":2}}],[\"the\",{\"1\":{\"38\":2}}],[\"theme\",{\"1\":{\"6\":1,\"103\":3}}],[\"text\",{\"1\":{\"26\":1,\"77\":1,\"78\":1,\"106\":1}}],[\"testdb1\",{\"1\":{\"24\":1}}],[\"laststmp\",{\"1\":{\"86\":5}}],[\"lastindexof\",{\"1\":{\"81\":1}}],[\"later\",{\"1\":{\"58\":1}}],[\"latest\",{\"1\":{\"27\":1}}],[\"latitude\",{\"1\":{\"47\":2}}],[\"list=\",{\"1\":{\"100\":1}}],[\"list<long>\",{\"1\":{\"62\":1}}],[\"list<user>\",{\"1\":{\"62\":2}}],[\"live\",{\"1\":{\"61\":1}}],[\"live2d的使用\",{\"0\":{\"7\":1}}],[\"length\",{\"1\":{\"108\":1}}],[\"less\",{\"1\":{\"86\":2}}],[\"left\",{\"1\":{\"49\":3,\"86\":7}}],[\"level`\",{\"1\":{\"49\":4}}],[\"level\",{\"1\":{\"49\":1}}],[\"loading\",{\"1\":{\"106\":1}}],[\"loadinginstance\",{\"1\":{\"106\":2}}],[\"log\",{\"1\":{\"96\":1,\"100\":1,\"103\":2,\"106\":1,\"108\":1}}],[\"login\",{\"1\":{\"44\":1,\"97\":2,\"108\":3}}],[\"logininterceptor\",{\"1\":{\"44\":4}}],[\"lockvalue\",{\"1\":{\"58\":3}}],[\"lockkey\",{\"1\":{\"58\":3}}],[\"lock\",{\"1\":{\"57\":5,\"58\":2,\"106\":1}}],[\"loc\",{\"1\":{\"47\":1,\"48\":1}}],[\"localstorage\",{\"1\":{\"95\":1,\"97\":2,\"100\":2,\"108\":2}}],[\"localhost\",{\"1\":{\"24\":1,\"27\":1,\"93\":1}}],[\"locationresultmap\",{\"1\":{\"47\":1}}],[\"locationmapper\",{\"1\":{\"47\":2,\"48\":1}}],[\"location\",{\"1\":{\"47\":2,\"48\":1}}],[\"long类型是64位有符号整数\",{\"1\":{\"71\":1}}],[\"longitude\",{\"1\":{\"47\":2}}],[\"long\",{\"1\":{\"40\":4,\"43\":2,\"57\":1,\"58\":1,\"62\":5,\"72\":1,\"86\":21,\"87\":1}}],[\"设置公开读后\",{\"1\":{\"81\":1}}],[\"设置公开读写\",{\"0\":{\"78\":1}}],[\"设置vue项目\",{\"1\":{\"27\":1}}],[\"设置项目\",{\"1\":{\"27\":1}}],[\"设置项目名称\",{\"1\":{\"24\":1}}],[\"设置java版本\",{\"1\":{\"24\":1}}],[\"设置域名\",{\"1\":{\"24\":1}}],[\"输入以下命令\",{\"1\":{\"27\":1}}],[\"输入\",{\"1\":{\"27\":1}}],[\"输入项目名称\",{\"1\":{\"24\":1}}],[\"输入域名\",{\"1\":{\"24\":1}}],[\"输入java\",{\"1\":{\"24\":1}}],[\"选择依赖\",{\"1\":{\"24\":1}}],[\"选择java版本\",{\"1\":{\"24\":1}}],[\"选择java为开发语言\",{\"1\":{\"24\":2}}],[\"选择jar为打包方式\",{\"1\":{\"24\":2}}],[\"选择maven\",{\"1\":{\"24\":2}}],[\"选择springboot版本\",{\"1\":{\"24\":2}}],[\"选择spring\",{\"1\":{\"24\":2}}],[\"customupload\",{\"1\":{\"106\":1}}],[\"currstmp\",{\"1\":{\"86\":6}}],[\"currentthread\",{\"1\":{\"58\":1}}],[\"currenttimemillis\",{\"1\":{\"43\":2,\"81\":2,\"86\":1}}],[\"change\",{\"1\":{\"99\":1}}],[\"changeorigin\",{\"1\":{\"93\":1}}],[\"c表存储自己独特的字段\",{\"1\":{\"65\":1}}],[\"c建立一张表\",{\"1\":{\"65\":1}}],[\"c继承a\",{\"1\":{\"65\":2}}],[\"close\",{\"1\":{\"106\":1}}],[\"clock\",{\"1\":{\"86\":1}}],[\"clear\",{\"1\":{\"62\":1}}],[\"clearcache\",{\"1\":{\"62\":2}}],[\"claims\",{\"1\":{\"43\":11}}],[\"class=\",{\"1\":{\"100\":2}}],[\"class<t>\",{\"1\":{\"74\":1}}],[\"classpath\",{\"1\":{\"44\":3}}],[\"class\",{\"1\":{\"24\":1,\"40\":4,\"43\":1,\"44\":2,\"57\":3,\"61\":1,\"62\":2,\"74\":2,\"80\":1,\"81\":1,\"86\":1}}],[\"can\",{\"1\":{\"86\":2}}],[\"cannotacquirelockexception\",{\"1\":{\"58\":1}}],[\"cacheevict\",{\"1\":{\"62\":1}}],[\"cacheput\",{\"1\":{\"62\":1}}],[\"cacheable\",{\"1\":{\"62\":1}}],[\"cachedefaults\",{\"1\":{\"61\":1}}],[\"cachemanager\",{\"1\":{\"61\":2,\"62\":5}}],[\"cacheconfig\",{\"1\":{\"61\":1}}],[\"cache<\",{\"1\":{\"60\":1}}],[\"cache\",{\"1\":{\"58\":2,\"61\":2,\"62\":12}}],[\"call\",{\"1\":{\"57\":4}}],[\"case\",{\"1\":{\"49\":2}}],[\"catch\",{\"1\":{\"43\":1,\"58\":2,\"97\":1,\"106\":1,\"108\":1}}],[\"column属性必须与数据库字段名一致\",{\"1\":{\"54\":2}}],[\"column=\",{\"1\":{\"47\":7,\"48\":6,\"49\":7,\"53\":7}}],[\"com\",{\"1\":{\"47\":1,\"48\":2,\"49\":4,\"106\":1}}],[\"compact\",{\"1\":{\"43\":2}}],[\"component\",{\"1\":{\"40\":2,\"43\":1,\"44\":1,\"57\":1,\"74\":1,\"86\":1}}],[\"componentmodel\",{\"1\":{\"40\":2}}],[\"confirm\",{\"1\":{\"109\":1}}],[\"config\",{\"1\":{\"44\":1,\"61\":2,\"93\":1,\"95\":3}}],[\"configurationproperties\",{\"1\":{\"80\":1}}],[\"configuration\",{\"1\":{\"38\":1,\"44\":1,\"61\":1,\"80\":1}}],[\"conf\",{\"1\":{\"106\":1}}],[\"console\",{\"1\":{\"96\":1,\"97\":1,\"100\":1,\"103\":2,\"106\":1,\"108\":2}}],[\"const\",{\"1\":{\"93\":1,\"95\":1,\"96\":1,\"97\":1,\"100\":3,\"103\":1,\"106\":5,\"108\":4,\"109\":1}}],[\"constructor\",{\"1\":{\"30\":1}}],[\"connectionfactory\",{\"1\":{\"61\":2}}],[\"connect\",{\"1\":{\"61\":1}}],[\"convertblogtoresp\",{\"1\":{\"40\":2}}],[\"convention\",{\"1\":{\"38\":1}}],[\"content\",{\"1\":{\"40\":3}}],[\"code\",{\"1\":{\"38\":2,\"43\":4,\"44\":1,\"96\":1,\"97\":1,\"106\":1}}],[\"cd\",{\"1\":{\"27\":1}}],[\"cj\",{\"1\":{\"24\":1}}],[\"create创建一个axios实例\",{\"1\":{\"93\":1}}],[\"createat\",{\"1\":{\"40\":3,\"69\":1}}],[\"create\",{\"1\":{\"24\":2,\"27\":1,\"93\":1}}],[\"ctrl\",{\"1\":{\"24\":1}}],[\"ctm\",{\"1\":{\"18\":1}}],[\"+8\",{\"1\":{\"68\":1}}],[\"+\",{\"1\":{\"24\":2,\"27\":1,\"43\":2,\"57\":8,\"58\":2,\"62\":2,\"81\":11,\"86\":3,\"96\":1}}],[\"按住ctrl\",{\"1\":{\"27\":1}}],[\"按住\",{\"1\":{\"24\":1}}],[\"按照vuepress\",{\"1\":{\"6\":1}}],[\"save\",{\"1\":{\"105\":2}}],[\"safe\",{\"1\":{\"38\":1}}],[\"src=\",{\"1\":{\"100\":1}}],[\"synchronized\",{\"1\":{\"86\":1}}],[\"system\",{\"1\":{\"43\":2,\"81\":2,\"86\":1,\"87\":1}}],[\"snowflake\",{\"1\":{\"83\":1,\"86\":3,\"87\":3}}],[\"success=\",{\"1\":{\"100\":1}}],[\"success\",{\"1\":{\"97\":1,\"106\":1}}],[\"suffixname\",{\"1\":{\"81\":2}}],[\"substring\",{\"1\":{\"44\":1,\"81\":1}}],[\"sdf\",{\"1\":{\"81\":2}}],[\"sdk\",{\"1\":{\"79\":1}}],[\"sleep\",{\"1\":{\"58\":1}}],[\"spinner\",{\"1\":{\"106\":1}}],[\"spotresultmap\",{\"1\":{\"49\":2}}],[\"spotmapper\",{\"1\":{\"49\":2}}],[\"spot\",{\"1\":{\"49\":4}}],[\"springframework\",{\"1\":{\"60\":2,\"74\":1}}],[\"springcache结合redis\",{\"0\":{\"59\":1}}],[\"spring\",{\"1\":{\"24\":5,\"40\":4,\"45\":1,\"61\":1,\"80\":1}}],[\"spring插件\",{\"1\":{\"23\":1}}],[\"swagger\",{\"1\":{\"44\":3}}],[\"size=\",{\"1\":{\"100\":1}}],[\"size\",{\"1\":{\"80\":2}}],[\"simpledateformat\",{\"1\":{\"81\":2}}],[\"simpleuuid\",{\"1\":{\"58\":1}}],[\"simplifies\",{\"1\":{\"38\":1}}],[\"signaturealgorithm\",{\"1\":{\"43\":2}}],[\"signwith\",{\"1\":{\"43\":2}}],[\"stmp\",{\"1\":{\"86\":2}}],[\"stu\",{\"1\":{\"47\":1,\"48\":2,\"49\":4}}],[\"start\",{\"1\":{\"86\":2}}],[\"starter\",{\"1\":{\"60\":2}}],[\"startswith\",{\"1\":{\"44\":1}}],[\"staritem\",{\"1\":{\"58\":1}}],[\"star\",{\"1\":{\"49\":1,\"58\":1}}],[\"starnumber\",{\"1\":{\"49\":1}}],[\"static\",{\"1\":{\"43\":9,\"57\":3,\"86\":10}}],[\"stringredisserializer\",{\"1\":{\"61\":3}}],[\"string>\",{\"1\":{\"57\":1}}],[\"string\",{\"1\":{\"40\":20,\"43\":12,\"44\":4,\"49\":1,\"57\":11,\"58\":2,\"62\":2,\"72\":1,\"74\":1,\"80\":4,\"81\":11}}],[\"source\",{\"1\":{\"40\":2}}],[\"show\",{\"1\":{\"100\":1}}],[\"shutdown\",{\"1\":{\"81\":1}}],[\"shape\",{\"1\":{\"40\":8,\"72\":2}}],[\"shift\",{\"1\":{\"24\":1}}],[\"script\",{\"1\":{\"57\":8}}],[\"sc\",{\"1\":{\"44\":2}}],[\"schema\",{\"1\":{\"40\":16}}],[\"scope>\",{\"1\":{\"39\":1}}],[\"sequence\",{\"1\":{\"86\":12}}],[\"securerandom\",{\"1\":{\"81\":1}}],[\"secret\",{\"1\":{\"43\":4,\"80\":1}}],[\"server\",{\"1\":{\"93\":1}}],[\"servlet\",{\"1\":{\"80\":1}}],[\"servicename\",{\"1\":{\"74\":3}}],[\"serviceclass\",{\"1\":{\"74\":3}}],[\"servicefactory\",{\"1\":{\"74\":4}}],[\"service\",{\"1\":{\"62\":1,\"81\":1,\"93\":1,\"95\":1,\"96\":1,\"97\":1,\"106\":2}}],[\"serializevalueswith\",{\"1\":{\"61\":1}}],[\"serializekeyswith\",{\"1\":{\"61\":1}}],[\"serializationpair\",{\"1\":{\"61\":2}}],[\"serializable\",{\"1\":{\"58\":1}}],[\"selectbyid\",{\"1\":{\"62\":1}}],[\"select>\",{\"1\":{\"47\":1,\"48\":1,\"49\":1,\"53\":1}}],[\"select\",{\"1\":{\"47\":1,\"48\":1,\"49\":2,\"53\":1}}],[\"select=\",{\"1\":{\"47\":1,\"48\":2}}],[\"setitem\",{\"1\":{\"97\":2}}],[\"setcontenttype\",{\"1\":{\"81\":1}}],[\"setconnectionfactory\",{\"1\":{\"61\":1}}],[\"sethashvalueserializer\",{\"1\":{\"61\":1}}],[\"sethashkeyserializer\",{\"1\":{\"61\":1}}],[\"setheader\",{\"1\":{\"44\":1}}],[\"setvalueserializer\",{\"1\":{\"61\":1}}],[\"setkeyserializer\",{\"1\":{\"61\":1}}],[\"setnx\",{\"1\":{\"57\":1}}],[\"setstarnumber\",{\"1\":{\"58\":1}}],[\"setstatus\",{\"1\":{\"44\":2}}],[\"setsigningkey\",{\"1\":{\"43\":1}}],[\"setsubject\",{\"1\":{\"43\":2}}],[\"setexpiration\",{\"1\":{\"43\":2}}],[\"setter\",{\"1\":{\"30\":1}}],[\"search\",{\"1\":{\"8\":1}}],[\"安装\",{\"0\":{\"102\":1,\"105\":1}}],[\"安装axios\",{\"0\":{\"92\":1}}],[\"安装vue插件\",{\"0\":{\"26\":1}}],[\"安装springboot插件\",{\"0\":{\"23\":1}}],[\"安装java插件\",{\"0\":{\"22\":1}}],[\"jpg\",{\"1\":{\"81\":1,\"106\":1}}],[\"join\",{\"1\":{\"49\":3}}],[\"jwt\",{\"1\":{\"45\":4}}],[\"jwtexception\",{\"1\":{\"43\":1}}],[\"jwts\",{\"1\":{\"43\":3}}],[\"jwtutil\",{\"1\":{\"43\":1,\"44\":4}}],[\"jwt的粗略实现\",{\"0\":{\"42\":1}}],[\"j打开命令行窗口\",{\"1\":{\"27\":1}}],[\"jdbc\",{\"1\":{\"24\":1}}],[\"javatype=\",{\"1\":{\"49\":1}}],[\"java类之间的转换\",{\"0\":{\"37\":1}}],[\"java的多个o\",{\"0\":{\"29\":1}}],[\"java\",{\"1\":{\"24\":3,\"30\":1,\"34\":1,\"38\":1}}],[\"java插件\",{\"1\":{\"22\":1}}],[\"js中\",{\"1\":{\"108\":1}}],[\"js中配置基础路径\",{\"1\":{\"93\":1}}],[\"jsonformat注解\",{\"1\":{\"72\":1}}],[\"jsonformat\",{\"1\":{\"40\":10,\"69\":1,\"72\":2}}],[\"js\",{\"1\":{\"5\":2,\"25\":1,\"103\":2}}],[\"没有出现重复收藏的情况\",{\"1\":{\"58\":1}}],[\"没有固定的规则\",{\"1\":{\"35\":1}}],[\"没有其他的方法\",{\"1\":{\"30\":1}}],[\"没有包含任何第三方库的依赖\",{\"1\":{\"30\":1}}],[\"没有包含任何网络通信\",{\"1\":{\"30\":1}}],[\"没有包含任何数据库操作\",{\"1\":{\"30\":1}}],[\"没有包含任何业务逻辑\",{\"1\":{\"30\":1}}],[\"没有使用任何注解\",{\"1\":{\"30\":1}}],[\"没有实现任何接口\",{\"1\":{\"30\":1}}],[\"没有继承任何类\",{\"1\":{\"30\":1}}],[\"没有配置数据库启动不了\",{\"1\":{\"24\":1}}],[\"没装的可以上网搜教程\",{\"1\":{\"21\":1,\"25\":1}}],[\"没办法太菜了bushi\",{\"1\":{\"2\":1}}],[\"msg\",{\"1\":{\"97\":1,\"106\":1}}],[\"mitt\",{\"0\":{\"101\":1},\"1\":{\"102\":1,\"103\":3}}],[\"mill\",{\"1\":{\"86\":4}}],[\"minutes\",{\"1\":{\"43\":1}}],[\"multipartfile\",{\"1\":{\"81\":4}}],[\"multipart\",{\"1\":{\"80\":1}}],[\"mybatis字段类型不匹配解决\",{\"0\":{\"51\":1}}],[\"mybatis的复杂查询主要通过<resultmap>标签来实现\",{\"1\":{\"50\":1}}],[\"mybatis复杂sql查询\",{\"0\":{\"46\":1}}],[\"mysql\",{\"1\":{\"24\":2}}],[\"menu\",{\"1\":{\"106\":1}}],[\"meta\",{\"1\":{\"44\":3}}],[\"method\",{\"1\":{\"38\":1}}],[\"message\",{\"1\":{\"44\":1,\"96\":1,\"103\":1}}],[\"machineid\",{\"1\":{\"86\":8}}],[\"machine\",{\"1\":{\"86\":8}}],[\"max\",{\"1\":{\"80\":2,\"86\":8}}],[\"math\",{\"1\":{\"58\":1}}],[\"map\",{\"1\":{\"58\":3}}],[\"map<string\",{\"1\":{\"58\":2}}],[\"mapper注解用于标识这是一个mapstruct的映射接口\",{\"1\":{\"40\":1}}],[\"mappers\",{\"1\":{\"40\":1}}],[\"mapper\",{\"1\":{\"40\":1,\"47\":1,\"48\":2,\"49\":4}}],[\"mapping注解用于定义具体的映射规则\",{\"1\":{\"40\":1}}],[\"mapping\",{\"1\":{\"38\":1,\"40\":2}}],[\"mappings注解用于定义映射规则\",{\"1\":{\"40\":1}}],[\"mappings\",{\"1\":{\"38\":1,\"40\":1}}],[\"mapstruct<\",{\"1\":{\"39\":2}}],[\"mapstruct是一个用于java类之间的转换的工具\",{\"1\":{\"41\":1}}],[\"mapstruct是一个代码生成器\",{\"1\":{\"38\":1}}],[\"mapstruct是什么\",{\"0\":{\"38\":1}}],[\"mapstruct\",{\"1\":{\"38\":1}}],[\"mapstruct的使用\",{\"0\":{\"37\":1}}],[\"maven坐标如下\",{\"1\":{\"39\":1,\"79\":1}}],[\"maven引入\",{\"0\":{\"39\":1}}],[\"maven\",{\"1\":{\"21\":1}}],[\"moved\",{\"1\":{\"86\":1}}],[\"mo7cc开源\",{\"1\":{\"10\":1}}],[\"mouseeffect\",{\"1\":{\"5\":1}}],[\"技术\",{\"0\":{\"19\":1}}],[\"别问\",{\"1\":{\"18\":1}}],[\"怎么玩\",{\"1\":{\"18\":2}}],[\"共同完成一个项目或任务\",{\"1\":{\"17\":1}}],[\"互相帮助\",{\"1\":{\"17\":1}}],[\"也配置了my\",{\"1\":{\"68\":1}}],[\"也能通过合作和交流来提高自己的技能和知识\",{\"1\":{\"17\":1}}],[\"也许\",{\"1\":{\"13\":1}}],[\"小组作业的弊端\",{\"0\":{\"18\":1}}],[\"小组作业的初衷是为了让同学们在完成课程任务的同时\",{\"1\":{\"17\":1}}],[\"小组作业的初衷\",{\"0\":{\"17\":1}}],[\"小肠\",{\"1\":{\"13\":1}}],[\"神\",{\"0\":{\"16\":1}}],[\"论小组作业为什么是\",{\"0\":{\"16\":1}}],[\"杂谈\",{\"0\":{\"15\":1}}],[\"人还是要积极乐观的不是吗\",{\"1\":{\"13\":1}}],[\"人生无常\",{\"1\":{\"13\":1}}],[\"好吧\",{\"1\":{\"13\":1}}],[\"莫劝他人善\",{\"1\":{\"13\":1}}],[\"可能会导致生成的id重复\",{\"1\":{\"88\":1}}],[\"可能看到我的网站的人觉得我是个衰鬼\",{\"1\":{\"13\":1}}],[\"可以支持更多的数据中心和机器\",{\"1\":{\"89\":1}}],[\"可以在代码中添加时间回拨的处理逻辑\",{\"1\":{\"88\":1}}],[\"可以在概览中查到\",{\"1\":{\"80\":1}}],[\"可以添加以下配置\",{\"1\":{\"80\":1}}],[\"可以看到我配置了时区\",{\"1\":{\"68\":1}}],[\"可以看出多了两个属性\",{\"1\":{\"40\":1}}],[\"可以存成两张表\",{\"1\":{\"66\":1}}],[\"可以使用cachemanager来获取cache\",{\"1\":{\"62\":1}}],[\"可以理解为controller层返回的resp对象\",{\"1\":{\"31\":1}}],[\"可以刷新一下\",{\"1\":{\"5\":1}}],[\"所以符号位固定为0\",{\"1\":{\"85\":1}}],[\"所以我的解决方案是通过bean的名称获取bean\",{\"1\":{\"75\":1}}],[\"所以我把音乐存在本地\",{\"1\":{\"9\":1}}],[\"所以无法获取\",{\"1\":{\"75\":1}}],[\"所以固定了锁的过期时间\",{\"1\":{\"57\":1}}],[\"所以大家可以根据自己的业务场景来划分\",{\"1\":{\"35\":1}}],[\"所以按照现在前后分离的思想来看\",{\"1\":{\"32\":1}}],[\"所以说我就是牛马本马\",{\"1\":{\"18\":1}}],[\"所以只能走全栈\",{\"1\":{\"12\":1}}],[\"开个玩笑\",{\"1\":{\"12\":1}}],[\"😎\",{\"1\":{\"12\":1,\"13\":1,\"18\":2}}],[\"什么\",{\"1\":{\"12\":1}}],[\"如你所见\",{\"1\":{\"12\":1}}],[\"如果系统时间回拨\",{\"1\":{\"88\":1}}],[\"如果只是简单地缓存实现\",{\"1\":{\"63\":1}}],[\"如果你需要设置上传的文件大小\",{\"1\":{\"80\":1}}],[\"如果你想编程式缓存\",{\"1\":{\"62\":1}}],[\"如果你是大牛\",{\"1\":{\"6\":1}}],[\"如果\",{\"1\":{\"44\":2}}],[\"如果没有componentmodel\",{\"1\":{\"40\":1}}],[\"如果搜索不到\",{\"1\":{\"8\":1}}],[\"如果鼠标点击没有特效\",{\"1\":{\"5\":1}}],[\"欢迎访问我的个人网站\",{\"1\":{\"12\":1}}],[\"你的bucketname\",{\"1\":{\"80\":1}}],[\"你的end\",{\"1\":{\"80\":1}}],[\"你的目录\",{\"1\":{\"27\":1}}],[\"你访问的url是有时间限制的\",{\"1\":{\"78\":1}}],[\"你问我为什么要走全栈\",{\"1\":{\"12\":1}}],[\"你好\",{\"1\":{\"12\":1}}],[\"你可以直接在iconfont建立自己的图标\",{\"1\":{\"6\":1}}],[\"感谢开源社区\",{\"1\":{\"10\":1}}],[\"感谢作者\",{\"1\":{\"10\":1}}],[\"感谢作者开源\",{\"1\":{\"2\":1}}],[\"感谢\",{\"0\":{\"10\":1}}],[\"音乐插件\",{\"0\":{\"9\":1}}],[\"具体几个月忘记了\",{\"1\":{\"77\":1}}],[\"具体请参阅关于本站\",{\"1\":{\"14\":1}}],[\"具体使用方法请参照官网\",{\"1\":{\"8\":1}}],[\"具体可以参照官网\",{\"1\":{\"7\":1}}],[\"putobject\",{\"1\":{\"81\":1}}],[\"put\",{\"1\":{\"62\":1}}],[\"public\",{\"1\":{\"5\":1,\"40\":8,\"43\":7,\"44\":5,\"57\":3,\"58\":1,\"61\":3,\"62\":9,\"74\":3,\"80\":1,\"81\":2,\"86\":4,\"87\":1}}],[\"pessimisticlockingfailureexception\",{\"1\":{\"58\":1}}],[\"pexpire\",{\"1\":{\"57\":1}}],[\"persistent\",{\"1\":{\"34\":1}}],[\"pwd\",{\"1\":{\"53\":1}}],[\"phone\",{\"1\":{\"53\":2,\"97\":2}}],[\"path\",{\"1\":{\"93\":2,\"108\":2}}],[\"password\",{\"1\":{\"53\":1,\"97\":2}}],[\"password=123456\",{\"1\":{\"24\":1}}],[\"parseclaimsjws\",{\"1\":{\"43\":1}}],[\"parser\",{\"1\":{\"43\":1}}],[\"param\",{\"1\":{\"40\":3,\"43\":7,\"62\":2,\"74\":4}}],[\"preventdefault\",{\"1\":{\"109\":1}}],[\"prefix\",{\"1\":{\"80\":1}}],[\"prehandle\",{\"1\":{\"44\":1}}],[\"println\",{\"1\":{\"87\":1}}],[\"price`\",{\"1\":{\"49\":4}}],[\"private\",{\"1\":{\"40\":15,\"43\":3,\"44\":1,\"57\":4,\"62\":3,\"69\":1,\"72\":1,\"74\":2,\"80\":4,\"81\":1,\"86\":16,\"87\":1}}],[\"promise\",{\"1\":{\"95\":1,\"96\":2}}],[\"proxy\",{\"1\":{\"93\":1}}],[\"property=\",{\"1\":{\"47\":7,\"48\":6,\"49\":6,\"53\":7}}],[\"properties中设置数据库连接信息\",{\"1\":{\"24\":1}}],[\"processor<\",{\"1\":{\"39\":1}}],[\"project\",{\"1\":{\"24\":2}}],[\"pro插件\",{\"1\":{\"8\":1}}],[\"plus\",{\"1\":{\"100\":1}}],[\"plugin\",{\"1\":{\"8\":1}}],[\"please\",{\"1\":{\"58\":1}}],[\"plain\",{\"1\":{\"34\":1,\"38\":1}}],[\"post\",{\"1\":{\"97\":1,\"106\":1}}],[\"point\",{\"1\":{\"80\":2}}],[\"port\",{\"1\":{\"61\":1}}],[\"pow\",{\"1\":{\"58\":1}}],[\"po都是java中常用的对象类型\",{\"1\":{\"34\":1}}],[\"po的区别\",{\"0\":{\"34\":1}}],[\"po通常用于作为数据传输对象\",{\"1\":{\"33\":1}}],[\"po通常用于表示一个数据库表中的一条记录\",{\"1\":{\"33\":1}}],[\"po是persistent\",{\"1\":{\"33\":1}}],[\"po\",{\"0\":{\"33\":1},\"1\":{\"34\":1,\"35\":1,\"36\":1}}],[\"pojo是plain\",{\"1\":{\"30\":1}}],[\"pojo\",{\"0\":{\"30\":1,\"34\":1},\"1\":{\"34\":2}}],[\"p\",{\"1\":{\"24\":1}}],[\"搜索\",{\"0\":{\"8\":1}}],[\"我设置为低频访问和本地冗余\",{\"1\":{\"77\":1}}],[\"我去检查了一下发现这个bean确实存在\",{\"1\":{\"75\":1}}],[\"我们有以下集中存储方式\",{\"1\":{\"66\":1}}],[\"我们一般有两种存储方式\",{\"1\":{\"65\":1}}],[\"我们可以将数据库字段类型与java实体类属性类型进行映射\",{\"1\":{\"55\":1}}],[\"我们需要在mybatis的xml文件设置resultmap\",{\"1\":{\"52\":1}}],[\"我们经常会遇到数据库字段类型与java实体类属性类型不匹配的问题\",{\"1\":{\"52\":1}}],[\"我们就可以在项目中使用\",{\"1\":{\"45\":1}}],[\"我们实现了一个简单的\",{\"1\":{\"45\":1}}],[\"我们只需要定义一个接口\",{\"1\":{\"40\":1}}],[\"我的mysql是通过压缩包安装的\",{\"1\":{\"68\":1}}],[\"我的网站就是我的\",{\"1\":{\"13\":1}}],[\"我的目标是成为一名全栈工程师\",{\"1\":{\"12\":1}}],[\"我只是比较笨\",{\"1\":{\"12\":1}}],[\"我是一个正在努力前行的小牛马\",{\"1\":{\"12\":1}}],[\"我叫carmen\",{\"1\":{\"12\":1}}],[\"我这里父类和子类的表是分开的\",{\"1\":{\"49\":1}}],[\"我这里就不赘述了\",{\"1\":{\"7\":1}}],[\"我这个只是拙劣的模仿\",{\"1\":{\"3\":1}}],[\"我就不赘述了\",{\"1\":{\"5\":1}}],[\"鼠标点击特效\",{\"0\":{\"5\":1}}],[\"说明\",{\"0\":{\"4\":1}}],[\"关于long传入前端精度缺失的解决方案\",{\"0\":{\"70\":1}}],[\"关于java读取数据库的时区问题\",{\"0\":{\"67\":1}}],[\"关于建站\",{\"0\":{\"14\":1}}],[\"关于本站\",{\"0\":{\"13\":1}}],[\"关于本站搭建\",{\"0\":{\"1\":1}}],[\"关于我\",{\"0\":{\"11\":1}}],[\"关于我和关于本站\",{\"1\":{\"0\":1}}],[\"关于\",{\"0\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,It(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const r=Ct[s];e==="suggest"?self.postMessage([e,o,tt(t,r,n)]):e==="search"?self.postMessage([e,o,Z(t,r,n)]):self.postMessage({suggestions:[e,o,tt(t,r,n)],results:[e,o,Z(t,r,n)]})};
//# sourceMappingURL=index.js.map
