import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as e,o as t}from"./app-DJdxcedd.js";const n={};function h(l,i){return t(),s("div",null,i[0]||(i[0]=[e(`<h1 id="关于long传入前端精度缺失的解决方案" tabindex="-1"><a class="header-anchor" href="#关于long传入前端精度缺失的解决方案"><span>关于Long传入前端精度缺失的解决方案</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>在Java中，Long类型是64位有符号整数，最大值为9223372036854775807，最小值为-9223372036854775808。而在JavaScript中，Number类型是64位双精度浮点数，最大值为1.7976931348623157e+308，最小值为5e-324。因此，当Java中的Long类型值超过JavaScript中的Number类型范围时，就会出现精度缺失的问题。</p><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h2><p>直接上代码</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">JsonFormat</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">shape</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> JsonFormat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Shape</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">STRING</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用@JsonFormat注解，将Long类型转换为字符串类型，这样就可以避免精度缺失的问题了。</p>`,7)]))}const o=a(n,[["render",h],["__file","关于Long传入前端精度缺失的解决方案.html.vue"]]),d=JSON.parse('{"path":"/technology/backend/%E5%85%B3%E4%BA%8ELong%E4%BC%A0%E5%85%A5%E5%89%8D%E7%AB%AF%E7%B2%BE%E5%BA%A6%E7%BC%BA%E5%A4%B1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html","title":"关于Long传入前端精度缺失的解决方案","lang":"zh-CN","frontmatter":{"icon":"fa-brands fa-java","date":"2024-11-27T00:00:00.000Z","category":["java"],"tag":["Long精度缺失"],"description":"关于Long传入前端精度缺失的解决方案 前言 在Java中，Long类型是64位有符号整数，最大值为9223372036854775807，最小值为-9223372036854775808。而在JavaScript中，Number类型是64位双精度浮点数，最大值为1.7976931348623157e+308，最小值为5e-324。因此，当Java中的...","head":[["meta",{"property":"og:url","content":"https://18259008878.github.io/painlife/painlife/technology/backend/%E5%85%B3%E4%BA%8ELong%E4%BC%A0%E5%85%A5%E5%89%8D%E7%AB%AF%E7%B2%BE%E5%BA%A6%E7%BC%BA%E5%A4%B1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"}],["meta",{"property":"og:site_name","content":"\\"极乐\\"人生"}],["meta",{"property":"og:title","content":"关于Long传入前端精度缺失的解决方案"}],["meta",{"property":"og:description","content":"关于Long传入前端精度缺失的解决方案 前言 在Java中，Long类型是64位有符号整数，最大值为9223372036854775807，最小值为-9223372036854775808。而在JavaScript中，Number类型是64位双精度浮点数，最大值为1.7976931348623157e+308，最小值为5e-324。因此，当Java中的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-27T01:01:12.000Z"}],["meta",{"property":"article:tag","content":"Long精度缺失"}],["meta",{"property":"article:published_time","content":"2024-11-27T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-27T01:01:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关于Long传入前端精度缺失的解决方案\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-27T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-27T01:01:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Carmen\\",\\"url\\":\\"https://gitee.com/Q_of_Git\\"}]}"]]},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]}],"git":{"createdTime":1732669272000,"updatedTime":1732669272000,"contributors":[{"name":"Carmen","email":"2942173241@qq.com","commits":1}]},"readingTime":{"minutes":0.56,"words":167},"filePathRelative":"technology/backend/关于Long传入前端精度缺失的解决方案.md","localizedDate":"2024年11月27日","excerpt":"\\n<h2>前言</h2>\\n<p>在Java中，Long类型是64位有符号整数，最大值为9223372036854775807，最小值为-9223372036854775808。而在JavaScript中，Number类型是64位双精度浮点数，最大值为1.7976931348623157e+308，最小值为5e-324。因此，当Java中的Long类型值超过JavaScript中的Number类型范围时，就会出现精度缺失的问题。</p>\\n<h2>解决方案</h2>\\n<p>直接上代码</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">@</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\\">JsonFormat</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">shape</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\"> JsonFormat</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">Shape</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">STRING</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">private</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Long</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E06C75\\"> id</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{o as comp,d as data};
