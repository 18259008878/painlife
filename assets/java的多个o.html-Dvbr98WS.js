import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,d as a,o as p}from"./app-Yp6IO8I6.js";const n={};function r(l,e){return p(),t("div",null,e[0]||(e[0]=[a('<h1 id="java的多个o" tabindex="-1"><a class="header-anchor" href="#java的多个o"><span>Java的多个o</span></a></h1><p>以下介绍常见的几个o。</p><h2 id="pojo" tabindex="-1"><a class="header-anchor" href="#pojo"><span>pojo</span></a></h2><p>pojo是Plain Old Java Object的缩写，它是一个简单的Java对象，没有继承任何类，没有实现任何接口，没有使用任何注解，没有包含任何业务逻辑，没有包含任何数据库操作，没有包含任何网络通信，没有包含任何第三方库的依赖。</p><p>其实大概意思就是只有data、constructor、getter、setter、toString、equals、hashCode这些方法，没有其他的方法。</p><h2 id="vo" tabindex="-1"><a class="header-anchor" href="#vo"><span>vo</span></a></h2><p>vo是View Object的缩写，它是一个视图对象，用于表示一个视图层的数据。vo通常用于表示一个视图层的数据，例如一个网页的表单数据，或者一个网页的显示数据。vo通常用于作为视图层的参数和返回值。</p><p>可以理解为Controller层返回的Resp对象，包含前端想要的数据，过滤掉前端不需要的数据。</p><h2 id="dto" tabindex="-1"><a class="header-anchor" href="#dto"><span>dto</span></a></h2><p>dto是Data Transfer Object的缩写，它是一个数据传输对象，用于在不同的层之间传递数据。dto通常用于表示一个业务实体，或者用于表示一个数据库表中的一条记录。dto通常用于作为数据传输对象（DTO），或者用于作为业务逻辑层的参数和返回值。</p><p>理解为dto为各层传输的对象（前端传后端的数据和后端传前端的数据，所以按照现在前后分离的思想来看，vo也可以认为是一种dto）。</p><h2 id="po" tabindex="-1"><a class="header-anchor" href="#po"><span>po</span></a></h2><p>po是Persistent Object的缩写，它是一个持久化对象，用于表示一个数据库表中的一条记录。po通常用于表示一个数据库表中的一条记录。po通常用于作为数据传输对象（DTO），或者用于作为业务逻辑层的参数和返回值。</p><p>理解为po中的字段和数据库中的字段一一对应。</p><h2 id="pojo、vo、dto、po的区别" tabindex="-1"><a class="header-anchor" href="#pojo、vo、dto、po的区别"><span>pojo、vo、dto、po的区别</span></a></h2><p>pojo、vo、dto、po都是Java中常用的对象类型，它们之间的区别如下：</p><ul><li>pojo：Plain Old Java Object，普通Java对象 只有数据，和getter和setter。</li><li>vo：View Object 显示层对象 专门为前端服务的对象，包含前端想要的数据，过滤掉前端不需要的数据。</li><li>dto：Data Transfer Object，数据传输对象，用于在不同的层之间传递数据。</li><li>po：Persistent Object，持久化对象，其中每个字段都和数据库中的属性一一对应</li></ul><h2 id="个人理解" tabindex="-1"><a class="header-anchor" href="#个人理解"><span>个人理解</span></a></h2><p>这么多个o（还有些没列出来），其实都是根据业务场景来划分的，没有固定的规则，所以大家可以根据自己的业务场景来划分。 个人写只用到vo(Resp), dto(Req), po(entity)。 应当注意的是这些o之间并不是固定的，他们之间可以相互转换。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><p><a href="https://blog.csdn.net/qq_40610003/article/details/109007539" target="_blank" rel="noopener noreferrer">概念POJO、DTO、DAO、PO、BO、VO、QO、ENTITY详解</a></p>',21)]))}const c=o(n,[["render",r],["__file","java的多个o.html.vue"]]),s=JSON.parse('{"path":"/technology/backend/java%E7%9A%84%E5%A4%9A%E4%B8%AAo.html","title":"Java的多个o","lang":"zh-CN","frontmatter":{"icon":"fa-brands fa-java","date":"2024-11-26T00:00:00.000Z","category":["java"],"tag":["java的各种o"],"description":"Java的多个o 以下介绍常见的几个o。 pojo pojo是Plain Old Java Object的缩写，它是一个简单的Java对象，没有继承任何类，没有实现任何接口，没有使用任何注解，没有包含任何业务逻辑，没有包含任何数据库操作，没有包含任何网络通信，没有包含任何第三方库的依赖。 其实大概意思就是只有data、constructor、gette...","head":[["meta",{"property":"og:url","content":"https://18259008878.github.io/painlife/painlife/technology/backend/java%E7%9A%84%E5%A4%9A%E4%B8%AAo.html"}],["meta",{"property":"og:site_name","content":"\\"极乐\\"人生"}],["meta",{"property":"og:title","content":"Java的多个o"}],["meta",{"property":"og:description","content":"Java的多个o 以下介绍常见的几个o。 pojo pojo是Plain Old Java Object的缩写，它是一个简单的Java对象，没有继承任何类，没有实现任何接口，没有使用任何注解，没有包含任何业务逻辑，没有包含任何数据库操作，没有包含任何网络通信，没有包含任何第三方库的依赖。 其实大概意思就是只有data、constructor、gette..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-27T00:55:35.000Z"}],["meta",{"property":"article:tag","content":"java的各种o"}],["meta",{"property":"article:published_time","content":"2024-11-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-27T00:55:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java的多个o\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-26T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-27T00:55:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Carmen\\",\\"url\\":\\"https://gitee.com/Q_of_Git\\"}]}"]]},"headers":[{"level":2,"title":"pojo","slug":"pojo","link":"#pojo","children":[]},{"level":2,"title":"vo","slug":"vo","link":"#vo","children":[]},{"level":2,"title":"dto","slug":"dto","link":"#dto","children":[]},{"level":2,"title":"po","slug":"po","link":"#po","children":[]},{"level":2,"title":"pojo、vo、dto、po的区别","slug":"pojo、vo、dto、po的区别","link":"#pojo、vo、dto、po的区别","children":[]},{"level":2,"title":"个人理解","slug":"个人理解","link":"#个人理解","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1732622741000,"updatedTime":1732668935000,"contributors":[{"name":"Carmen","email":"2942173241@qq.com","commits":2}]},"readingTime":{"minutes":2.55,"words":764},"filePathRelative":"technology/backend/java的多个o.md","localizedDate":"2024年11月26日","excerpt":"\\n<p>以下介绍常见的几个o。</p>\\n<h2>pojo</h2>\\n<p>pojo是Plain Old Java Object的缩写，它是一个简单的Java对象，没有继承任何类，没有实现任何接口，没有使用任何注解，没有包含任何业务逻辑，没有包含任何数据库操作，没有包含任何网络通信，没有包含任何第三方库的依赖。</p>\\n<p>其实大概意思就是只有data、constructor、getter、setter、toString、equals、hashCode这些方法，没有其他的方法。</p>\\n<h2>vo</h2>\\n<p>vo是View Object的缩写，它是一个视图对象，用于表示一个视图层的数据。vo通常用于表示一个视图层的数据，例如一个网页的表单数据，或者一个网页的显示数据。vo通常用于作为视图层的参数和返回值。</p>","autoDesc":true}');export{c as comp,s as data};
